/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 20);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var objectAssign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/browserify-zlib/lib/binding.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/binding.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
/* eslint camelcase: "off" */

var assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");

var Zstream = __webpack_require__(/*! pako/lib/zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");
var zlib_deflate = __webpack_require__(/*! pako/lib/zlib/deflate.js */ "./node_modules/pako/lib/zlib/deflate.js");
var zlib_inflate = __webpack_require__(/*! pako/lib/zlib/inflate.js */ "./node_modules/pako/lib/zlib/inflate.js");
var constants = __webpack_require__(/*! pako/lib/zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;

  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;

  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);

  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');

  this.write_in_progress = true;

  assert.equal(false, flush === undefined, 'must provide flush value');

  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }

  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });

  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null;

  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush

      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.

        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  // call the write() cb
  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err

  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');

  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;

  this.flush = exports.Z_NO_FLUSH;

  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;

  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/browserify-zlib/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-zlib/lib/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;
var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform;
var binding = __webpack_require__(/*! ./binding */ "./node_modules/browserify-zlib/lib/binding.js");
var util = __webpack_require__(/*! util */ "./node_modules/util/util.js");
var assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js").ok;
var kMaxLength = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}

// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
};

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}

// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}

// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}

// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) {
      error = er;
    });

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async) return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/builtin-status-codes/browser.js":
/*!******************************************************!*\
  !*** ./node_modules/builtin-status-codes/browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}


/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/https-browserify/index.js":
/*!************************************************!*\
  !*** ./node_modules/https-browserify/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var http = __webpack_require__(/*! http */ "./node_modules/stream-http/index.js")
var url = __webpack_require__(/*! url */ "./node_modules/url/url.js")

var https = module.exports

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key]
}

https.request = function (params, cb) {
  params = validateParams(params)
  return http.request.call(this, params, cb)
}

https.get = function (params, cb) {
  params = validateParams(params)
  return http.get.call(this, params, cb)
}

function validateParams (params) {
  if (typeof params === 'string') {
    params = url.parse(params)
  }
  if (!params.protocol) {
    params.protocol = 'https:'
  }
  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
  }
  return params
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var trees   = __webpack_require__(/*! ./trees */ "./node_modules/pako/lib/zlib/trees.js");
var adler32 = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32   = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var msg     = __webpack_require__(/*! ./messages */ "./node_modules/pako/lib/zlib/messages.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var adler32       = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32         = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var inflate_fast  = __webpack_require__(/*! ./inffast */ "./node_modules/pako/lib/zlib/inffast.js");
var inflate_table = __webpack_require__(/*! ./inftrees */ "./node_modules/pako/lib/zlib/inftrees.js");

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");


/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__(/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(/*! util */ 21);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js"));
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(/*! util */ 22);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").PassThrough


/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").Transform


/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ "./node_modules/stream-http/index.js":
/*!*******************************************!*\
  !*** ./node_modules/stream-http/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(/*! ./lib/request */ "./node_modules/stream-http/lib/request.js")
var response = __webpack_require__(/*! ./lib/response */ "./node_modules/stream-http/lib/response.js")
var extend = __webpack_require__(/*! xtend */ "./node_modules/xtend/immutable.js")
var statusCodes = __webpack_require__(/*! builtin-status-codes */ "./node_modules/builtin-status-codes/browser.js")
var url = __webpack_require__(/*! url */ "./node_modules/url/url.js")

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.ClientRequest = ClientRequest
http.IncomingMessage = response.IncomingMessage

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.globalAgent = new http.Agent()

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/stream-http/lib/capability.js":
/*!****************************************************!*\
  !*** ./node_modules/stream-http/lib/capability.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.writableStream = isFunction(global.WritableStream)

exports.abortController = isFunction(global.AbortController)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/stream-http/lib/request.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-http/lib/request.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(/*! ./capability */ "./node_modules/stream-http/lib/capability.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var response = __webpack_require__(/*! ./response */ "./node_modules/stream-http/lib/response.js")
var stream = __webpack_require__(/*! readable-stream */ "./node_modules/readable-stream/readable-browser.js")
var toArrayBuffer = __webpack_require__(/*! to-arraybuffer */ "./node_modules/to-arraybuffer/index.js")

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)
	self._fetchTimer = null

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.arraybuffer) {
			body = toArrayBuffer(Buffer.concat(self._body))
		} else if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		var signal = null
		var fetchTimer = null
		if (capability.abortController) {
			var controller = new AbortController()
			signal = controller.signal
			self._fetchAbortController = controller

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout')
					if (self._fetchAbortController)
						self._fetchAbortController.abort()
				}, opts.requestTimeout)
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			global.clearTimeout(self._fetchTimer)
			if (!self._destroyed)
				self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout
			xhr.ontimeout = function () {
				self.emit('requestTimeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	global.clearTimeout(self._fetchTimer)
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	else if (self._fetchAbortController)
		self._fetchAbortController.abort()
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
]

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/stream-http/lib/response.js":
/*!**************************************************!*\
  !*** ./node_modules/stream-http/lib/response.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(/*! ./capability */ "./node_modules/stream-http/lib/capability.js")
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var stream = __webpack_require__(/*! readable-stream */ "./node_modules/readable-stream/readable-browser.js")

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject()
						} else if(self.push(new Buffer(chunk))) {
							resolve()
						} else {
							self._resumeFetch = resolve
						}
					})
				},
				close: function () {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.push(null)
				},
				abort: function (err) {
					if (!self._destroyed)
						self.emit('error', err)
				}
			})

			try {
				response.body.pipeTo(writable).catch(function (err) {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.emit('error', err)
				})
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					global.clearTimeout(fetchTimer)
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function (err) {
				global.clearTimeout(fetchTimer)
				if (!self._destroyed)
					self.emit('error', err)
			})
		}
		read()
	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {
	var self = this

	var resolve = self._resumeFetch
	if (resolve) {
		self._resumeFetch = null
		resolve()
	}
}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/to-arraybuffer/index.js":
/*!**********************************************!*\
  !*** ./node_modules/to-arraybuffer/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}


/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/util/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/xtend/immutable.js":
/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),

/***/ "./resources/Public/js/vendor/moz_pdfjs.js":
/*!*************************************************!*\
  !*** ./resources/Public/js/vendor/moz_pdfjs.js ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process, Buffer, module) {/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);


function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @licstart The following is the entire license notice for the
 * Javascript code in this page
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * Javascript code in this page
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) define("pdfjs-dist/build/pdf", [], factory);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') exports["pdfjs-dist/build/pdf"] = factory();else root["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
})(undefined, function () {
  return (
    /******/
    function () {
      // webpackBootstrap

      /******/
      "use strict";
      /******/

      var __webpack_modules__ = [,
      /* 0 */

      /* 1 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.addLinkAttributes = addLinkAttributes;
        exports.deprecated = deprecated;
        exports.getFilenameFromUrl = getFilenameFromUrl;
        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
        exports.isDataScheme = isDataScheme;
        exports.isFetchSupported = isFetchSupported;
        exports.isPdfFile = isPdfFile;
        exports.isValidFetchUrl = isValidFetchUrl;
        exports.loadScript = loadScript;
        exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;

        var _util = __w_pdfjs_require__(2);

        var DEFAULT_LINK_REL = "noopener noreferrer nofollow";
        exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;
        var SVG_NS = "http://www.w3.org/2000/svg";

        var BaseCanvasFactory = /*#__PURE__*/function () {
          function BaseCanvasFactory() {
            _classCallCheck(this, BaseCanvasFactory);

            if (this.constructor === BaseCanvasFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCanvasFactory.");
            }
          }

          _createClass(BaseCanvasFactory, [{
            key: "create",
            value: function create(width, height) {
              (0, _util.unreachable)("Abstract method `create` called.");
            }
          }, {
            key: "reset",
            value: function reset(canvasAndContext, width, height) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }

              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }

              canvasAndContext.canvas.width = width;
              canvasAndContext.canvas.height = height;
            }
          }, {
            key: "destroy",
            value: function destroy(canvasAndContext) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }

              canvasAndContext.canvas.width = 0;
              canvasAndContext.canvas.height = 0;
              canvasAndContext.canvas = null;
              canvasAndContext.context = null;
            }
          }]);

          return BaseCanvasFactory;
        }();

        exports.BaseCanvasFactory = BaseCanvasFactory;

        var DOMCanvasFactory = /*#__PURE__*/function (_BaseCanvasFactory) {
          _inherits(DOMCanvasFactory, _BaseCanvasFactory);

          var _super = _createSuper(DOMCanvasFactory);

          function DOMCanvasFactory() {
            var _this;

            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref$ownerDocument = _ref.ownerDocument,
                ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument;

            _classCallCheck(this, DOMCanvasFactory);

            _this = _super.call(this);
            _this._document = ownerDocument;
            return _this;
          }

          _createClass(DOMCanvasFactory, [{
            key: "create",
            value: function create(width, height) {
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }

              var canvas = this._document.createElement("canvas");

              var context = canvas.getContext("2d");
              canvas.width = width;
              canvas.height = height;
              return {
                canvas: canvas,
                context: context
              };
            }
          }]);

          return DOMCanvasFactory;
        }(BaseCanvasFactory);

        exports.DOMCanvasFactory = DOMCanvasFactory;

        var BaseCMapReaderFactory = /*#__PURE__*/function () {
          function BaseCMapReaderFactory(_ref2) {
            var _ref2$baseUrl = _ref2.baseUrl,
                baseUrl = _ref2$baseUrl === void 0 ? null : _ref2$baseUrl,
                _ref2$isCompressed = _ref2.isCompressed,
                isCompressed = _ref2$isCompressed === void 0 ? false : _ref2$isCompressed;

            _classCallCheck(this, BaseCMapReaderFactory);

            if (this.constructor === BaseCMapReaderFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCMapReaderFactory.");
            }

            this.baseUrl = baseUrl;
            this.isCompressed = isCompressed;
          }

          _createClass(BaseCMapReaderFactory, [{
            key: "fetch",
            value: function () {
              var _fetch = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(_ref3) {
                var _this2 = this;

                var name, url, compressionType;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        name = _ref3.name;

                        if (this.baseUrl) {
                          _context.next = 3;
                          break;
                        }

                        throw new Error('The CMap "baseUrl" parameter must be specified, ensure that ' + 'the "cMapUrl" and "cMapPacked" API parameters are provided.');

                      case 3:
                        if (name) {
                          _context.next = 5;
                          break;
                        }

                        throw new Error("CMap name must be specified.");

                      case 5:
                        url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                        compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;
                        return _context.abrupt("return", this._fetchData(url, compressionType)["catch"](function (reason) {
                          throw new Error("Unable to load ".concat(_this2.isCompressed ? "binary " : "", "CMap at: ").concat(url));
                        }));

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));

              function fetch(_x) {
                return _fetch.apply(this, arguments);
              }

              return fetch;
            }()
          }, {
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              (0, _util.unreachable)("Abstract method `_fetchData` called.");
            }
          }]);

          return BaseCMapReaderFactory;
        }();

        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;

        var DOMCMapReaderFactory = /*#__PURE__*/function (_BaseCMapReaderFactor) {
          _inherits(DOMCMapReaderFactory, _BaseCMapReaderFactor);

          var _super2 = _createSuper(DOMCMapReaderFactory);

          function DOMCMapReaderFactory() {
            _classCallCheck(this, DOMCMapReaderFactory);

            return _super2.apply(this, arguments);
          }

          _createClass(DOMCMapReaderFactory, [{
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              var _this3 = this;

              if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {
                return fetch(url).then( /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(response) {
                    var cMapData;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (response.ok) {
                              _context2.next = 2;
                              break;
                            }

                            throw new Error(response.statusText);

                          case 2:
                            if (!_this3.isCompressed) {
                              _context2.next = 10;
                              break;
                            }

                            _context2.t0 = Uint8Array;
                            _context2.next = 6;
                            return response.arrayBuffer();

                          case 6:
                            _context2.t1 = _context2.sent;
                            cMapData = new _context2.t0(_context2.t1);
                            _context2.next = 15;
                            break;

                          case 10:
                            _context2.t2 = (0, _util.stringToBytes);
                            _context2.next = 13;
                            return response.text();

                          case 13:
                            _context2.t3 = _context2.sent;
                            cMapData = (0, _context2.t2)(_context2.t3);

                          case 15:
                            return _context2.abrupt("return", {
                              cMapData: cMapData,
                              compressionType: compressionType
                            });

                          case 16:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x2) {
                    return _ref4.apply(this, arguments);
                  };
                }());
              }

              return new Promise(function (resolve, reject) {
                var request = new XMLHttpRequest();
                request.open("GET", url, true);

                if (_this3.isCompressed) {
                  request.responseType = "arraybuffer";
                }

                request.onreadystatechange = function () {
                  if (request.readyState !== XMLHttpRequest.DONE) {
                    return;
                  }

                  if (request.status === 200 || request.status === 0) {
                    var cMapData;

                    if (_this3.isCompressed && request.response) {
                      cMapData = new Uint8Array(request.response);
                    } else if (!_this3.isCompressed && request.responseText) {
                      cMapData = (0, _util.stringToBytes)(request.responseText);
                    }

                    if (cMapData) {
                      resolve({
                        cMapData: cMapData,
                        compressionType: compressionType
                      });
                      return;
                    }
                  }

                  reject(new Error(request.statusText));
                };

                request.send(null);
              });
            }
          }]);

          return DOMCMapReaderFactory;
        }(BaseCMapReaderFactory);

        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;

        var DOMSVGFactory = /*#__PURE__*/function () {
          function DOMSVGFactory() {
            _classCallCheck(this, DOMSVGFactory);
          }

          _createClass(DOMSVGFactory, [{
            key: "create",
            value: function create(width, height) {
              (0, _util.assert)(width > 0 && height > 0, "Invalid SVG dimensions");
              var svg = document.createElementNS(SVG_NS, "svg:svg");
              svg.setAttribute("version", "1.1");
              svg.setAttribute("width", width + "px");
              svg.setAttribute("height", height + "px");
              svg.setAttribute("preserveAspectRatio", "none");
              svg.setAttribute("viewBox", "0 0 " + width + " " + height);
              return svg;
            }
          }, {
            key: "createElement",
            value: function createElement(type) {
              (0, _util.assert)(typeof type === "string", "Invalid SVG element type");
              return document.createElementNS(SVG_NS, type);
            }
          }]);

          return DOMSVGFactory;
        }();

        exports.DOMSVGFactory = DOMSVGFactory;

        var PageViewport = /*#__PURE__*/function () {
          function PageViewport(_ref5) {
            var viewBox = _ref5.viewBox,
                scale = _ref5.scale,
                rotation = _ref5.rotation,
                _ref5$offsetX = _ref5.offsetX,
                offsetX = _ref5$offsetX === void 0 ? 0 : _ref5$offsetX,
                _ref5$offsetY = _ref5.offsetY,
                offsetY = _ref5$offsetY === void 0 ? 0 : _ref5$offsetY,
                _ref5$dontFlip = _ref5.dontFlip,
                dontFlip = _ref5$dontFlip === void 0 ? false : _ref5$dontFlip;

            _classCallCheck(this, PageViewport);

            this.viewBox = viewBox;
            this.scale = scale;
            this.rotation = rotation;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            var centerX = (viewBox[2] + viewBox[0]) / 2;
            var centerY = (viewBox[3] + viewBox[1]) / 2;
            var rotateA, rotateB, rotateC, rotateD;
            rotation %= 360;

            if (rotation < 0) {
              rotation += 360;
            }

            switch (rotation) {
              case 180:
                rotateA = -1;
                rotateB = 0;
                rotateC = 0;
                rotateD = 1;
                break;

              case 90:
                rotateA = 0;
                rotateB = 1;
                rotateC = 1;
                rotateD = 0;
                break;

              case 270:
                rotateA = 0;
                rotateB = -1;
                rotateC = -1;
                rotateD = 0;
                break;

              case 0:
                rotateA = 1;
                rotateB = 0;
                rotateC = 0;
                rotateD = -1;
                break;

              default:
                throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
            }

            if (dontFlip) {
              rotateC = -rotateC;
              rotateD = -rotateD;
            }

            var offsetCanvasX, offsetCanvasY;
            var width, height;

            if (rotateA === 0) {
              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
              width = Math.abs(viewBox[3] - viewBox[1]) * scale;
              height = Math.abs(viewBox[2] - viewBox[0]) * scale;
            } else {
              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
              width = Math.abs(viewBox[2] - viewBox[0]) * scale;
              height = Math.abs(viewBox[3] - viewBox[1]) * scale;
            }

            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
            this.width = width;
            this.height = height;
          }

          _createClass(PageViewport, [{
            key: "clone",
            value: function clone() {
              var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref6$scale = _ref6.scale,
                  scale = _ref6$scale === void 0 ? this.scale : _ref6$scale,
                  _ref6$rotation = _ref6.rotation,
                  rotation = _ref6$rotation === void 0 ? this.rotation : _ref6$rotation,
                  _ref6$offsetX = _ref6.offsetX,
                  offsetX = _ref6$offsetX === void 0 ? this.offsetX : _ref6$offsetX,
                  _ref6$offsetY = _ref6.offsetY,
                  offsetY = _ref6$offsetY === void 0 ? this.offsetY : _ref6$offsetY,
                  _ref6$dontFlip = _ref6.dontFlip,
                  dontFlip = _ref6$dontFlip === void 0 ? false : _ref6$dontFlip;

              return new PageViewport({
                viewBox: this.viewBox.slice(),
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "convertToViewportPoint",
            value: function convertToViewportPoint(x, y) {
              return _util.Util.applyTransform([x, y], this.transform);
            }
          }, {
            key: "convertToViewportRectangle",
            value: function convertToViewportRectangle(rect) {
              var topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);

              var bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);

              return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
            }
          }, {
            key: "convertToPdfPoint",
            value: function convertToPdfPoint(x, y) {
              return _util.Util.applyInverseTransform([x, y], this.transform);
            }
          }]);

          return PageViewport;
        }();

        exports.PageViewport = PageViewport;

        var RenderingCancelledException = /*#__PURE__*/function (_util$BaseException) {
          _inherits(RenderingCancelledException, _util$BaseException);

          var _super3 = _createSuper(RenderingCancelledException);

          function RenderingCancelledException(msg, type) {
            var _this4;

            _classCallCheck(this, RenderingCancelledException);

            _this4 = _super3.call(this, msg);
            _this4.type = type;
            return _this4;
          }

          return RenderingCancelledException;
        }(_util.BaseException);

        exports.RenderingCancelledException = RenderingCancelledException;
        var LinkTarget = {
          NONE: 0,
          SELF: 1,
          BLANK: 2,
          PARENT: 3,
          TOP: 4
        };
        exports.LinkTarget = LinkTarget;

        function addLinkAttributes(link) {
          var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              url = _ref7.url,
              target = _ref7.target,
              rel = _ref7.rel,
              _ref7$enabled = _ref7.enabled,
              enabled = _ref7$enabled === void 0 ? true : _ref7$enabled;

          (0, _util.assert)(url && typeof url === "string", 'addLinkAttributes: A valid "url" parameter must provided.');
          var urlNullRemoved = (0, _util.removeNullCharacters)(url);

          if (enabled) {
            link.href = link.title = urlNullRemoved;
          } else {
            link.href = "";
            link.title = "Disabled: ".concat(urlNullRemoved);

            link.onclick = function () {
              return false;
            };
          }

          var targetStr = "";

          switch (target) {
            case LinkTarget.NONE:
              break;

            case LinkTarget.SELF:
              targetStr = "_self";
              break;

            case LinkTarget.BLANK:
              targetStr = "_blank";
              break;

            case LinkTarget.PARENT:
              targetStr = "_parent";
              break;

            case LinkTarget.TOP:
              targetStr = "_top";
              break;
          }

          link.target = targetStr;
          link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL;
        }

        function isDataScheme(url) {
          var ii = url.length;
          var i = 0;

          while (i < ii && url[i].trim() === "") {
            i++;
          }

          return url.substring(i, i + 5).toLowerCase() === "data:";
        }

        function isPdfFile(filename) {
          return typeof filename === "string" && /\.pdf$/i.test(filename);
        }

        function getFilenameFromUrl(url) {
          var anchor = url.indexOf("#");
          var query = url.indexOf("?");
          var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
          return url.substring(url.lastIndexOf("/", end) + 1, end);
        }

        function getPdfFilenameFromUrl(url) {
          var defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "document.pdf";

          if (typeof url !== "string") {
            return defaultFilename;
          }

          if (isDataScheme(url)) {
            (0, _util.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
            return defaultFilename;
          }

          var reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
          var reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
          var splitURI = reURI.exec(url);
          var suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);

          if (suggestedFilename) {
            suggestedFilename = suggestedFilename[0];

            if (suggestedFilename.includes("%")) {
              try {
                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
              } catch (ex) {}
            }
          }

          return suggestedFilename || defaultFilename;
        }

        var StatTimer = /*#__PURE__*/function () {
          function StatTimer() {
            _classCallCheck(this, StatTimer);

            this.started = Object.create(null);
            this.times = [];
          }

          _createClass(StatTimer, [{
            key: "time",
            value: function time(name) {
              if (name in this.started) {
                (0, _util.warn)("Timer is already running for ".concat(name));
              }

              this.started[name] = Date.now();
            }
          }, {
            key: "timeEnd",
            value: function timeEnd(name) {
              if (!(name in this.started)) {
                (0, _util.warn)("Timer has not been started for ".concat(name));
              }

              this.times.push({
                name: name,
                start: this.started[name],
                end: Date.now()
              });
              delete this.started[name];
            }
          }, {
            key: "toString",
            value: function toString() {
              var outBuf = [];
              var longest = 0;

              var _iterator = _createForOfIteratorHelper(this.times),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var time = _step.value;
                  var name = time.name;

                  if (name.length > longest) {
                    longest = name.length;
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              var _iterator2 = _createForOfIteratorHelper(this.times),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var _time = _step2.value;
                  var duration = _time.end - _time.start;
                  outBuf.push("".concat(_time.name.padEnd(longest), " ").concat(duration, "ms\n"));
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              return outBuf.join("");
            }
          }]);

          return StatTimer;
        }();

        exports.StatTimer = StatTimer;

        function isFetchSupported() {
          return typeof fetch !== "undefined" && typeof Response !== "undefined" && "body" in Response.prototype && typeof ReadableStream !== "undefined";
        }

        function isValidFetchUrl(url, baseUrl) {
          try {
            var _ref8 = baseUrl ? new URL(url, baseUrl) : new URL(url),
                protocol = _ref8.protocol;

            return protocol === "http:" || protocol === "https:";
          } catch (ex) {
            return false;
          }
        }

        function loadScript(src) {
          var removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          return new Promise(function (resolve, reject) {
            var script = document.createElement("script");
            script.src = src;

            script.onload = function (evt) {
              if (removeScriptElement) {
                script.remove();
              }

              resolve(evt);
            };

            script.onerror = function () {
              reject(new Error("Cannot load script at: ".concat(script.src)));
            };

            (document.head || document.documentElement).appendChild(script);
          });
        }

        function deprecated(details) {
          console.log("Deprecated API usage: " + details);
        }

        var pdfDateStringRegex;

        var PDFDateString = /*#__PURE__*/function () {
          function PDFDateString() {
            _classCallCheck(this, PDFDateString);
          }

          _createClass(PDFDateString, null, [{
            key: "toDateObject",
            value: function toDateObject(input) {
              if (!input || !(0, _util.isString)(input)) {
                return null;
              }

              if (!pdfDateStringRegex) {
                pdfDateStringRegex = new RegExp("^D:" + "(\\d{4})" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "([Z|+|-])?" + "(\\d{2})?" + "'?" + "(\\d{2})?" + "'?");
              }

              var matches = pdfDateStringRegex.exec(input);

              if (!matches) {
                return null;
              }

              var year = parseInt(matches[1], 10);
              var month = parseInt(matches[2], 10);
              month = month >= 1 && month <= 12 ? month - 1 : 0;
              var day = parseInt(matches[3], 10);
              day = day >= 1 && day <= 31 ? day : 1;
              var hour = parseInt(matches[4], 10);
              hour = hour >= 0 && hour <= 23 ? hour : 0;
              var minute = parseInt(matches[5], 10);
              minute = minute >= 0 && minute <= 59 ? minute : 0;
              var second = parseInt(matches[6], 10);
              second = second >= 0 && second <= 59 ? second : 0;
              var universalTimeRelation = matches[7] || "Z";
              var offsetHour = parseInt(matches[8], 10);
              offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
              var offsetMinute = parseInt(matches[9], 10) || 0;
              offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;

              if (universalTimeRelation === "-") {
                hour += offsetHour;
                minute += offsetMinute;
              } else if (universalTimeRelation === "+") {
                hour -= offsetHour;
                minute -= offsetMinute;
              }

              return new Date(Date.UTC(year, month, day, hour, minute, second));
            }
          }]);

          return PDFDateString;
        }();

        exports.PDFDateString = PDFDateString;
        /***/
      },
      /* 2 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.arrayByteLength = arrayByteLength;
        exports.arraysToBytes = arraysToBytes;
        exports.assert = assert;
        exports.bytesToString = bytesToString;
        exports.createObjectURL = createObjectURL;
        exports.createPromiseCapability = createPromiseCapability;
        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
        exports.escapeString = escapeString;
        exports.getModificationDate = getModificationDate;
        exports.getVerbosityLevel = getVerbosityLevel;
        exports.info = info;
        exports.isArrayBuffer = isArrayBuffer;
        exports.isArrayEqual = isArrayEqual;
        exports.isAscii = isAscii;
        exports.isBool = isBool;
        exports.isNum = isNum;
        exports.isSameOrigin = isSameOrigin;
        exports.isString = isString;
        exports.objectFromMap = objectFromMap;
        exports.objectSize = objectSize;
        exports.removeNullCharacters = removeNullCharacters;
        exports.setVerbosityLevel = setVerbosityLevel;
        exports.shadow = shadow;
        exports.string32 = string32;
        exports.stringToBytes = stringToBytes;
        exports.stringToPDFString = stringToPDFString;
        exports.stringToUTF16BEString = stringToUTF16BEString;
        exports.stringToUTF8String = stringToUTF8String;
        exports.unreachable = unreachable;
        exports.utf8StringToString = utf8StringToString;
        exports.warn = warn;
        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;

        __w_pdfjs_require__(3);

        var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
        var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
        var PermissionFlag = {
          PRINT: 0x04,
          MODIFY_CONTENTS: 0x08,
          COPY: 0x10,
          MODIFY_ANNOTATIONS: 0x20,
          FILL_INTERACTIVE_FORMS: 0x100,
          COPY_FOR_ACCESSIBILITY: 0x200,
          ASSEMBLE: 0x400,
          PRINT_HIGH_QUALITY: 0x800
        };
        exports.PermissionFlag = PermissionFlag;
        var TextRenderingMode = {
          FILL: 0,
          STROKE: 1,
          FILL_STROKE: 2,
          INVISIBLE: 3,
          FILL_ADD_TO_PATH: 4,
          STROKE_ADD_TO_PATH: 5,
          FILL_STROKE_ADD_TO_PATH: 6,
          ADD_TO_PATH: 7,
          FILL_STROKE_MASK: 3,
          ADD_TO_PATH_FLAG: 4
        };
        exports.TextRenderingMode = TextRenderingMode;
        var ImageKind = {
          GRAYSCALE_1BPP: 1,
          RGB_24BPP: 2,
          RGBA_32BPP: 3
        };
        exports.ImageKind = ImageKind;
        var AnnotationType = {
          TEXT: 1,
          LINK: 2,
          FREETEXT: 3,
          LINE: 4,
          SQUARE: 5,
          CIRCLE: 6,
          POLYGON: 7,
          POLYLINE: 8,
          HIGHLIGHT: 9,
          UNDERLINE: 10,
          SQUIGGLY: 11,
          STRIKEOUT: 12,
          STAMP: 13,
          CARET: 14,
          INK: 15,
          POPUP: 16,
          FILEATTACHMENT: 17,
          SOUND: 18,
          MOVIE: 19,
          WIDGET: 20,
          SCREEN: 21,
          PRINTERMARK: 22,
          TRAPNET: 23,
          WATERMARK: 24,
          THREED: 25,
          REDACT: 26
        };
        exports.AnnotationType = AnnotationType;
        var AnnotationStateModelType = {
          MARKED: "Marked",
          REVIEW: "Review"
        };
        exports.AnnotationStateModelType = AnnotationStateModelType;
        var AnnotationMarkedState = {
          MARKED: "Marked",
          UNMARKED: "Unmarked"
        };
        exports.AnnotationMarkedState = AnnotationMarkedState;
        var AnnotationReviewState = {
          ACCEPTED: "Accepted",
          REJECTED: "Rejected",
          CANCELLED: "Cancelled",
          COMPLETED: "Completed",
          NONE: "None"
        };
        exports.AnnotationReviewState = AnnotationReviewState;
        var AnnotationReplyType = {
          GROUP: "Group",
          REPLY: "R"
        };
        exports.AnnotationReplyType = AnnotationReplyType;
        var AnnotationFlag = {
          INVISIBLE: 0x01,
          HIDDEN: 0x02,
          PRINT: 0x04,
          NOZOOM: 0x08,
          NOROTATE: 0x10,
          NOVIEW: 0x20,
          READONLY: 0x40,
          LOCKED: 0x80,
          TOGGLENOVIEW: 0x100,
          LOCKEDCONTENTS: 0x200
        };
        exports.AnnotationFlag = AnnotationFlag;
        var AnnotationFieldFlag = {
          READONLY: 0x0000001,
          REQUIRED: 0x0000002,
          NOEXPORT: 0x0000004,
          MULTILINE: 0x0001000,
          PASSWORD: 0x0002000,
          NOTOGGLETOOFF: 0x0004000,
          RADIO: 0x0008000,
          PUSHBUTTON: 0x0010000,
          COMBO: 0x0020000,
          EDIT: 0x0040000,
          SORT: 0x0080000,
          FILESELECT: 0x0100000,
          MULTISELECT: 0x0200000,
          DONOTSPELLCHECK: 0x0400000,
          DONOTSCROLL: 0x0800000,
          COMB: 0x1000000,
          RICHTEXT: 0x2000000,
          RADIOSINUNISON: 0x2000000,
          COMMITONSELCHANGE: 0x4000000
        };
        exports.AnnotationFieldFlag = AnnotationFieldFlag;
        var AnnotationBorderStyleType = {
          SOLID: 1,
          DASHED: 2,
          BEVELED: 3,
          INSET: 4,
          UNDERLINE: 5
        };
        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
        var AnnotationActionEventType = {
          E: "Mouse Enter",
          X: "Mouse Exit",
          D: "Mouse Down",
          U: "Mouse Up",
          Fo: "Focus",
          Bl: "Blur",
          PO: "PageOpen",
          PC: "PageClose",
          PV: "PageVisible",
          PI: "PageInvisible",
          K: "Keystroke",
          F: "Format",
          V: "Validate",
          C: "Calculate"
        };
        exports.AnnotationActionEventType = AnnotationActionEventType;
        var DocumentActionEventType = {
          WC: "WillClose",
          WS: "WillSave",
          DS: "DidSave",
          WP: "WillPrint",
          DP: "DidPrint"
        };
        exports.DocumentActionEventType = DocumentActionEventType;
        var PageActionEventType = {
          O: "PageOpen",
          C: "PageClose"
        };
        exports.PageActionEventType = PageActionEventType;
        var StreamType = {
          UNKNOWN: "UNKNOWN",
          FLATE: "FLATE",
          LZW: "LZW",
          DCT: "DCT",
          JPX: "JPX",
          JBIG: "JBIG",
          A85: "A85",
          AHX: "AHX",
          CCF: "CCF",
          RLX: "RLX"
        };
        exports.StreamType = StreamType;
        var FontType = {
          UNKNOWN: "UNKNOWN",
          TYPE1: "TYPE1",
          TYPE1C: "TYPE1C",
          CIDFONTTYPE0: "CIDFONTTYPE0",
          CIDFONTTYPE0C: "CIDFONTTYPE0C",
          TRUETYPE: "TRUETYPE",
          CIDFONTTYPE2: "CIDFONTTYPE2",
          TYPE3: "TYPE3",
          OPENTYPE: "OPENTYPE",
          TYPE0: "TYPE0",
          MMTYPE1: "MMTYPE1"
        };
        exports.FontType = FontType;
        var VerbosityLevel = {
          ERRORS: 0,
          WARNINGS: 1,
          INFOS: 5
        };
        exports.VerbosityLevel = VerbosityLevel;
        var CMapCompressionType = {
          NONE: 0,
          BINARY: 1,
          STREAM: 2
        };
        exports.CMapCompressionType = CMapCompressionType;
        var OPS = {
          dependency: 1,
          setLineWidth: 2,
          setLineCap: 3,
          setLineJoin: 4,
          setMiterLimit: 5,
          setDash: 6,
          setRenderingIntent: 7,
          setFlatness: 8,
          setGState: 9,
          save: 10,
          restore: 11,
          transform: 12,
          moveTo: 13,
          lineTo: 14,
          curveTo: 15,
          curveTo2: 16,
          curveTo3: 17,
          closePath: 18,
          rectangle: 19,
          stroke: 20,
          closeStroke: 21,
          fill: 22,
          eoFill: 23,
          fillStroke: 24,
          eoFillStroke: 25,
          closeFillStroke: 26,
          closeEOFillStroke: 27,
          endPath: 28,
          clip: 29,
          eoClip: 30,
          beginText: 31,
          endText: 32,
          setCharSpacing: 33,
          setWordSpacing: 34,
          setHScale: 35,
          setLeading: 36,
          setFont: 37,
          setTextRenderingMode: 38,
          setTextRise: 39,
          moveText: 40,
          setLeadingMoveText: 41,
          setTextMatrix: 42,
          nextLine: 43,
          showText: 44,
          showSpacedText: 45,
          nextLineShowText: 46,
          nextLineSetSpacingShowText: 47,
          setCharWidth: 48,
          setCharWidthAndBounds: 49,
          setStrokeColorSpace: 50,
          setFillColorSpace: 51,
          setStrokeColor: 52,
          setStrokeColorN: 53,
          setFillColor: 54,
          setFillColorN: 55,
          setStrokeGray: 56,
          setFillGray: 57,
          setStrokeRGBColor: 58,
          setFillRGBColor: 59,
          setStrokeCMYKColor: 60,
          setFillCMYKColor: 61,
          shadingFill: 62,
          beginInlineImage: 63,
          beginImageData: 64,
          endInlineImage: 65,
          paintXObject: 66,
          markPoint: 67,
          markPointProps: 68,
          beginMarkedContent: 69,
          beginMarkedContentProps: 70,
          endMarkedContent: 71,
          beginCompat: 72,
          endCompat: 73,
          paintFormXObjectBegin: 74,
          paintFormXObjectEnd: 75,
          beginGroup: 76,
          endGroup: 77,
          beginAnnotations: 78,
          endAnnotations: 79,
          beginAnnotation: 80,
          endAnnotation: 81,
          paintJpegXObject: 82,
          paintImageMaskXObject: 83,
          paintImageMaskXObjectGroup: 84,
          paintImageXObject: 85,
          paintInlineImageXObject: 86,
          paintInlineImageXObjectGroup: 87,
          paintImageXObjectRepeat: 88,
          paintImageMaskXObjectRepeat: 89,
          paintSolidColorImageMask: 90,
          constructPath: 91
        };
        exports.OPS = OPS;
        var UNSUPPORTED_FEATURES = {
          unknown: "unknown",
          forms: "forms",
          javaScript: "javaScript",
          signatures: "signatures",
          smask: "smask",
          shadingPattern: "shadingPattern",
          font: "font",
          errorTilingPattern: "errorTilingPattern",
          errorExtGState: "errorExtGState",
          errorXObject: "errorXObject",
          errorFontLoadType3: "errorFontLoadType3",
          errorFontState: "errorFontState",
          errorFontMissing: "errorFontMissing",
          errorFontTranslate: "errorFontTranslate",
          errorColorSpace: "errorColorSpace",
          errorOperatorList: "errorOperatorList",
          errorFontToUnicode: "errorFontToUnicode",
          errorFontLoadNative: "errorFontLoadNative",
          errorFontGetPath: "errorFontGetPath",
          errorMarkedContent: "errorMarkedContent"
        };
        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
        var PasswordResponses = {
          NEED_PASSWORD: 1,
          INCORRECT_PASSWORD: 2
        };
        exports.PasswordResponses = PasswordResponses;
        var verbosity = VerbosityLevel.WARNINGS;

        function setVerbosityLevel(level) {
          if (Number.isInteger(level)) {
            verbosity = level;
          }
        }

        function getVerbosityLevel() {
          return verbosity;
        }

        function info(msg) {
          if (verbosity >= VerbosityLevel.INFOS) {
            console.log("Info: ".concat(msg));
          }
        }

        function warn(msg) {
          if (verbosity >= VerbosityLevel.WARNINGS) {
            console.log("Warning: ".concat(msg));
          }
        }

        function unreachable(msg) {
          throw new Error(msg);
        }

        function assert(cond, msg) {
          if (!cond) {
            unreachable(msg);
          }
        }

        function isSameOrigin(baseUrl, otherUrl) {
          var base;

          try {
            base = new URL(baseUrl);

            if (!base.origin || base.origin === "null") {
              return false;
            }
          } catch (e) {
            return false;
          }

          var other = new URL(otherUrl, base);
          return base.origin === other.origin;
        }

        function _isValidProtocol(url) {
          if (!url) {
            return false;
          }

          switch (url.protocol) {
            case "http:":
            case "https:":
            case "ftp:":
            case "mailto:":
            case "tel:":
              return true;

            default:
              return false;
          }
        }

        function createValidAbsoluteUrl(url, baseUrl) {
          if (!url) {
            return null;
          }

          try {
            var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);

            if (_isValidProtocol(absoluteUrl)) {
              return absoluteUrl;
            }
          } catch (ex) {}

          return null;
        }

        function shadow(obj, prop, value) {
          Object.defineProperty(obj, prop, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: false
          });
          return value;
        }

        var BaseException = function BaseExceptionClosure() {
          function BaseException(message) {
            if (this.constructor === BaseException) {
              unreachable("Cannot initialize BaseException.");
            }

            this.message = message;
            this.name = this.constructor.name;
          }

          BaseException.prototype = new Error();
          BaseException.constructor = BaseException;
          return BaseException;
        }();

        exports.BaseException = BaseException;

        var PasswordException = /*#__PURE__*/function (_BaseException) {
          _inherits(PasswordException, _BaseException);

          var _super4 = _createSuper(PasswordException);

          function PasswordException(msg, code) {
            var _this5;

            _classCallCheck(this, PasswordException);

            _this5 = _super4.call(this, msg);
            _this5.code = code;
            return _this5;
          }

          return PasswordException;
        }(BaseException);

        exports.PasswordException = PasswordException;

        var UnknownErrorException = /*#__PURE__*/function (_BaseException2) {
          _inherits(UnknownErrorException, _BaseException2);

          var _super5 = _createSuper(UnknownErrorException);

          function UnknownErrorException(msg, details) {
            var _this6;

            _classCallCheck(this, UnknownErrorException);

            _this6 = _super5.call(this, msg);
            _this6.details = details;
            return _this6;
          }

          return UnknownErrorException;
        }(BaseException);

        exports.UnknownErrorException = UnknownErrorException;

        var InvalidPDFException = /*#__PURE__*/function (_BaseException3) {
          _inherits(InvalidPDFException, _BaseException3);

          var _super6 = _createSuper(InvalidPDFException);

          function InvalidPDFException() {
            _classCallCheck(this, InvalidPDFException);

            return _super6.apply(this, arguments);
          }

          return InvalidPDFException;
        }(BaseException);

        exports.InvalidPDFException = InvalidPDFException;

        var MissingPDFException = /*#__PURE__*/function (_BaseException4) {
          _inherits(MissingPDFException, _BaseException4);

          var _super7 = _createSuper(MissingPDFException);

          function MissingPDFException() {
            _classCallCheck(this, MissingPDFException);

            return _super7.apply(this, arguments);
          }

          return MissingPDFException;
        }(BaseException);

        exports.MissingPDFException = MissingPDFException;

        var UnexpectedResponseException = /*#__PURE__*/function (_BaseException5) {
          _inherits(UnexpectedResponseException, _BaseException5);

          var _super8 = _createSuper(UnexpectedResponseException);

          function UnexpectedResponseException(msg, status) {
            var _this7;

            _classCallCheck(this, UnexpectedResponseException);

            _this7 = _super8.call(this, msg);
            _this7.status = status;
            return _this7;
          }

          return UnexpectedResponseException;
        }(BaseException);

        exports.UnexpectedResponseException = UnexpectedResponseException;

        var FormatError = /*#__PURE__*/function (_BaseException6) {
          _inherits(FormatError, _BaseException6);

          var _super9 = _createSuper(FormatError);

          function FormatError() {
            _classCallCheck(this, FormatError);

            return _super9.apply(this, arguments);
          }

          return FormatError;
        }(BaseException);

        exports.FormatError = FormatError;

        var AbortException = /*#__PURE__*/function (_BaseException7) {
          _inherits(AbortException, _BaseException7);

          var _super10 = _createSuper(AbortException);

          function AbortException() {
            _classCallCheck(this, AbortException);

            return _super10.apply(this, arguments);
          }

          return AbortException;
        }(BaseException);

        exports.AbortException = AbortException;
        var NullCharactersRegExp = /\x00/g;

        function removeNullCharacters(str) {
          if (typeof str !== "string") {
            warn("The argument for removeNullCharacters must be a string.");
            return str;
          }

          return str.replace(NullCharactersRegExp, "");
        }

        function bytesToString(bytes) {
          assert(bytes !== null && _typeof(bytes) === "object" && bytes.length !== undefined, "Invalid argument for bytesToString");
          var length = bytes.length;
          var MAX_ARGUMENT_COUNT = 8192;

          if (length < MAX_ARGUMENT_COUNT) {
            return String.fromCharCode.apply(null, bytes);
          }

          var strBuf = [];

          for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
            var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
            var chunk = bytes.subarray(i, chunkEnd);
            strBuf.push(String.fromCharCode.apply(null, chunk));
          }

          return strBuf.join("");
        }

        function stringToBytes(str) {
          assert(typeof str === "string", "Invalid argument for stringToBytes");
          var length = str.length;
          var bytes = new Uint8Array(length);

          for (var i = 0; i < length; ++i) {
            bytes[i] = str.charCodeAt(i) & 0xff;
          }

          return bytes;
        }

        function arrayByteLength(arr) {
          if (arr.length !== undefined) {
            return arr.length;
          }

          assert(arr.byteLength !== undefined, "arrayByteLength - invalid argument.");
          return arr.byteLength;
        }

        function arraysToBytes(arr) {
          var length = arr.length;

          if (length === 1 && arr[0] instanceof Uint8Array) {
            return arr[0];
          }

          var resultLength = 0;

          for (var i = 0; i < length; i++) {
            resultLength += arrayByteLength(arr[i]);
          }

          var pos = 0;
          var data = new Uint8Array(resultLength);

          for (var _i = 0; _i < length; _i++) {
            var item = arr[_i];

            if (!(item instanceof Uint8Array)) {
              if (typeof item === "string") {
                item = stringToBytes(item);
              } else {
                item = new Uint8Array(item);
              }
            }

            var itemLength = item.byteLength;
            data.set(item, pos);
            pos += itemLength;
          }

          return data;
        }

        function string32(value) {
          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
        }

        function objectSize(obj) {
          return Object.keys(obj).length;
        }

        function objectFromMap(map) {
          var obj = Object.create(null);

          var _iterator3 = _createForOfIteratorHelper(map),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _step3$value = _slicedToArray(_step3.value, 2),
                  key = _step3$value[0],
                  value = _step3$value[1];

              obj[key] = value;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          return obj;
        }

        function isLittleEndian() {
          var buffer8 = new Uint8Array(4);
          buffer8[0] = 1;
          var view32 = new Uint32Array(buffer8.buffer, 0, 1);
          return view32[0] === 1;
        }

        var IsLittleEndianCached = {
          get value() {
            return shadow(this, "value", isLittleEndian());
          }

        };
        exports.IsLittleEndianCached = IsLittleEndianCached;

        function isEvalSupported() {
          try {
            new Function("");
            return true;
          } catch (e) {
            return false;
          }
        }

        var IsEvalSupportedCached = {
          get value() {
            return shadow(this, "value", isEvalSupported());
          }

        };
        exports.IsEvalSupportedCached = IsEvalSupportedCached;

        var hexNumbers = _toConsumableArray(Array(256).keys()).map(function (n) {
          return n.toString(16).padStart(2, "0");
        });

        var Util = /*#__PURE__*/function () {
          function Util() {
            _classCallCheck(this, Util);
          }

          _createClass(Util, null, [{
            key: "makeHexColor",
            value: function makeHexColor(r, g, b) {
              return "#".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);
            }
          }, {
            key: "transform",
            value: function transform(m1, m2) {
              return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
            }
          }, {
            key: "applyTransform",
            value: function applyTransform(p, m) {
              var xt = p[0] * m[0] + p[1] * m[2] + m[4];
              var yt = p[0] * m[1] + p[1] * m[3] + m[5];
              return [xt, yt];
            }
          }, {
            key: "applyInverseTransform",
            value: function applyInverseTransform(p, m) {
              var d = m[0] * m[3] - m[1] * m[2];
              var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
              var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
              return [xt, yt];
            }
          }, {
            key: "getAxialAlignedBoundingBox",
            value: function getAxialAlignedBoundingBox(r, m) {
              var p1 = Util.applyTransform(r, m);
              var p2 = Util.applyTransform(r.slice(2, 4), m);
              var p3 = Util.applyTransform([r[0], r[3]], m);
              var p4 = Util.applyTransform([r[2], r[1]], m);
              return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
            }
          }, {
            key: "inverseTransform",
            value: function inverseTransform(m) {
              var d = m[0] * m[3] - m[1] * m[2];
              return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
            }
          }, {
            key: "apply3dTransform",
            value: function apply3dTransform(m, v) {
              return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
            }
          }, {
            key: "singularValueDecompose2dScale",
            value: function singularValueDecompose2dScale(m) {
              var transpose = [m[0], m[2], m[1], m[3]];
              var a = m[0] * transpose[0] + m[1] * transpose[2];
              var b = m[0] * transpose[1] + m[1] * transpose[3];
              var c = m[2] * transpose[0] + m[3] * transpose[2];
              var d = m[2] * transpose[1] + m[3] * transpose[3];
              var first = (a + d) / 2;
              var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
              var sx = first + second || 1;
              var sy = first - second || 1;
              return [Math.sqrt(sx), Math.sqrt(sy)];
            }
          }, {
            key: "normalizeRect",
            value: function normalizeRect(rect) {
              var r = rect.slice(0);

              if (rect[0] > rect[2]) {
                r[0] = rect[2];
                r[2] = rect[0];
              }

              if (rect[1] > rect[3]) {
                r[1] = rect[3];
                r[3] = rect[1];
              }

              return r;
            }
          }, {
            key: "intersect",
            value: function intersect(rect1, rect2) {
              function compare(a, b) {
                return a - b;
              }

              var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
              var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
              var result = [];
              rect1 = Util.normalizeRect(rect1);
              rect2 = Util.normalizeRect(rect2);

              if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
                result[0] = orderedX[1];
                result[2] = orderedX[2];
              } else {
                return null;
              }

              if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
                result[1] = orderedY[1];
                result[3] = orderedY[2];
              } else {
                return null;
              }

              return result;
            }
          }]);

          return Util;
        }();

        exports.Util = Util;
        var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];

        function stringToPDFString(str) {
          var length = str.length,
              strBuf = [];

          if (str[0] === "\xFE" && str[1] === "\xFF") {
            for (var i = 2; i < length; i += 2) {
              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
            }
          } else if (str[0] === "\xFF" && str[1] === "\xFE") {
            for (var _i2 = 2; _i2 < length; _i2 += 2) {
              strBuf.push(String.fromCharCode(str.charCodeAt(_i2 + 1) << 8 | str.charCodeAt(_i2)));
            }
          } else {
            for (var _i3 = 0; _i3 < length; ++_i3) {
              var code = PDFStringTranslateTable[str.charCodeAt(_i3)];
              strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i3));
            }
          }

          return strBuf.join("");
        }

        function escapeString(str) {
          return str.replace(/([()\\\n\r])/g, function (match) {
            if (match === "\n") {
              return "\\n";
            } else if (match === "\r") {
              return "\\r";
            }

            return "\\".concat(match);
          });
        }

        function isAscii(str) {
          return /^[\x00-\x7F]*$/.test(str);
        }

        function stringToUTF16BEString(str) {
          var buf = ["\xFE\xFF"];

          for (var i = 0, ii = str.length; i < ii; i++) {
            var _char = str.charCodeAt(i);

            buf.push(String.fromCharCode(_char >> 8 & 0xff));
            buf.push(String.fromCharCode(_char & 0xff));
          }

          return buf.join("");
        }

        function stringToUTF8String(str) {
          return decodeURIComponent(escape(str));
        }

        function utf8StringToString(str) {
          return unescape(encodeURIComponent(str));
        }

        function isBool(v) {
          return typeof v === "boolean";
        }

        function isNum(v) {
          return typeof v === "number";
        }

        function isString(v) {
          return typeof v === "string";
        }

        function isArrayBuffer(v) {
          return _typeof(v) === "object" && v !== null && v.byteLength !== undefined;
        }

        function isArrayEqual(arr1, arr2) {
          if (arr1.length !== arr2.length) {
            return false;
          }

          for (var i = 0, ii = arr1.length; i < ii; i++) {
            if (arr1[i] !== arr2[i]) {
              return false;
            }
          }

          return true;
        }

        function getModificationDate() {
          var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
          var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
          return buffer.join("");
        }

        function createPromiseCapability() {
          var capability = Object.create(null);
          var isSettled = false;
          Object.defineProperty(capability, "settled", {
            get: function get() {
              return isSettled;
            }
          });
          capability.promise = new Promise(function (resolve, reject) {
            capability.resolve = function (data) {
              isSettled = true;
              resolve(data);
            };

            capability.reject = function (reason) {
              isSettled = true;
              reject(reason);
            };
          });
          return capability;
        }

        function createObjectURL(data) {
          var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          if (URL.createObjectURL && !forceDataSchema) {
            return URL.createObjectURL(new Blob([data], {
              type: contentType
            }));
          }

          var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var buffer = "data:".concat(contentType, ";base64,");

          for (var i = 0, ii = data.length; i < ii; i += 3) {
            var b1 = data[i] & 0xff;
            var b2 = data[i + 1] & 0xff;
            var b3 = data[i + 2] & 0xff;
            var d1 = b1 >> 2,
                d2 = (b1 & 3) << 4 | b2 >> 4;
            var d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;
            var d4 = i + 2 < ii ? b3 & 0x3f : 64;
            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
          }

          return buffer;
        }
        /***/

      },
      /* 3 */

      /***/
      function (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {
        var _is_node = __w_pdfjs_require__(4);

        ;
        /***/
      },
      /* 4 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isNodeJS = void 0;
        var isNodeJS = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
        exports.isNodeJS = isNodeJS;
        /***/
      },
      /* 5 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getDocument = getDocument;
        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;
        exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var _font_loader = __w_pdfjs_require__(6);

        var _node_utils = __w_pdfjs_require__(7);

        var _annotation_storage = __w_pdfjs_require__(8);

        var _api_compatibility = __w_pdfjs_require__(9);

        var _canvas = __w_pdfjs_require__(10);

        var _worker_options = __w_pdfjs_require__(12);

        var _is_node = __w_pdfjs_require__(4);

        var _message_handler = __w_pdfjs_require__(13);

        var _metadata = __w_pdfjs_require__(14);

        var _optional_content_config = __w_pdfjs_require__(15);

        var _transport_stream = __w_pdfjs_require__(16);

        var _webgl = __w_pdfjs_require__(17);

        var DEFAULT_RANGE_CHUNK_SIZE = 65536;
        var RENDERING_CANCELLED_TIMEOUT = 100;
        var DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;
        exports.DefaultCanvasFactory = DefaultCanvasFactory;
        var DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
        var createPDFNetworkStream;

        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {
          createPDFNetworkStream = pdfNetworkStreamFactory;
        }

        function getDocument(src) {
          var task = new PDFDocumentLoadingTask();
          var source;

          if (typeof src === "string" || src instanceof URL) {
            source = {
              url: src
            };
          } else if ((0, _util.isArrayBuffer)(src)) {
            source = {
              data: src
            };
          } else if (src instanceof PDFDataRangeTransport) {
            source = {
              range: src
            };
          } else {
            if (_typeof(src) !== "object") {
              throw new Error("Invalid parameter in getDocument, " + "need either string, URL, Uint8Array, or parameter object.");
            }

            if (!src.url && !src.data && !src.range) {
              throw new Error("Invalid parameter object: need either .data, .range or .url");
            }

            source = src;
          }

          var params = Object.create(null);
          var rangeTransport = null,
              worker = null;

          for (var key in source) {
            var value = source[key];

            switch (key) {
              case "url":
                if (typeof window !== "undefined") {
                  try {
                    params[key] = new URL(value, window.location).href;
                    continue;
                  } catch (ex) {
                    (0, _util.warn)("Cannot create valid URL: \"".concat(ex, "\"."));
                  }
                } else if (typeof value === "string" || value instanceof URL) {
                  params[key] = value.toString();
                  continue;
                }

                throw new Error("Invalid PDF url data: " + "either string or URL-object is expected in the url property.");

              case "range":
                rangeTransport = value;
                continue;

              case "worker":
                worker = value;
                continue;

              case "data":
                if (_is_node.isNodeJS && typeof Buffer !== "undefined" && value instanceof Buffer) {
                  params[key] = new Uint8Array(value);
                } else if (value instanceof Uint8Array) {
                  break;
                } else if (typeof value === "string") {
                  params[key] = (0, _util.stringToBytes)(value);
                } else if (_typeof(value) === "object" && value !== null && !isNaN(value.length)) {
                  params[key] = new Uint8Array(value);
                } else if ((0, _util.isArrayBuffer)(value)) {
                  params[key] = new Uint8Array(value);
                } else {
                  throw new Error("Invalid PDF binary data: either typed array, " + "string, or array-like object is expected in the data property.");
                }

                continue;
            }

            params[key] = value;
          }

          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;
          params.ignoreErrors = params.stopAtErrors !== true;
          params.fontExtraProperties = params.fontExtraProperties === true;
          params.pdfBug = params.pdfBug === true;
          params.enableXfa = params.enableXfa === true;

          if (typeof params.docBaseUrl !== "string" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {
            params.docBaseUrl = null;
          }

          if (!Number.isInteger(params.maxImageSize)) {
            params.maxImageSize = -1;
          }

          if (typeof params.isEvalSupported !== "boolean") {
            params.isEvalSupported = true;
          }

          if (typeof params.disableFontFace !== "boolean") {
            params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;
          }

          if (typeof params.ownerDocument === "undefined") {
            params.ownerDocument = globalThis.document;
          }

          if (typeof params.disableRange !== "boolean") {
            params.disableRange = false;
          }

          if (typeof params.disableStream !== "boolean") {
            params.disableStream = false;
          }

          if (typeof params.disableAutoFetch !== "boolean") {
            params.disableAutoFetch = false;
          }

          (0, _util.setVerbosityLevel)(params.verbosity);

          if (!worker) {
            var workerParams = {
              verbosity: params.verbosity,
              port: _worker_options.GlobalWorkerOptions.workerPort
            };
            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
            task._worker = worker;
          }

          var docId = task.docId;
          worker.promise.then(function () {
            if (task.destroyed) {
              throw new Error("Loading aborted");
            }

            var workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);

            var networkStreamPromise = new Promise(function (resolve) {
              var networkStream;

              if (rangeTransport) {
                networkStream = new _transport_stream.PDFDataTransportStream({
                  length: params.length,
                  initialData: params.initialData,
                  progressiveDone: params.progressiveDone,
                  contentDispositionFilename: params.contentDispositionFilename,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                }, rangeTransport);
              } else if (!params.data) {
                networkStream = createPDFNetworkStream({
                  url: params.url,
                  length: params.length,
                  httpHeaders: params.httpHeaders,
                  withCredentials: params.withCredentials,
                  rangeChunkSize: params.rangeChunkSize,
                  disableRange: params.disableRange,
                  disableStream: params.disableStream
                });
              }

              resolve(networkStream);
            });
            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref9) {
              var _ref10 = _slicedToArray(_ref9, 2),
                  workerId = _ref10[0],
                  networkStream = _ref10[1];

              if (task.destroyed) {
                throw new Error("Loading aborted");
              }

              var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);
              messageHandler.postMessageTransfers = worker.postMessageTransfers;
              var transport = new WorkerTransport(messageHandler, task, networkStream, params);
              task._transport = transport;
              messageHandler.send("Ready", null);
            });
          })["catch"](task._capability.reject);
          return task;
        }

        function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {
          if (worker.destroyed) {
            return Promise.reject(new Error("Worker was destroyed"));
          }

          if (pdfDataRangeTransport) {
            source.length = pdfDataRangeTransport.length;
            source.initialData = pdfDataRangeTransport.initialData;
            source.progressiveDone = pdfDataRangeTransport.progressiveDone;
            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;
          }

          return worker.messageHandler.sendWithPromise("GetDocRequest", {
            docId: docId,
            apiVersion: '2.9.79',
            source: {
              data: source.data,
              url: source.url,
              password: source.password,
              disableAutoFetch: source.disableAutoFetch,
              rangeChunkSize: source.rangeChunkSize,
              length: source.length
            },
            maxImageSize: source.maxImageSize,
            disableFontFace: source.disableFontFace,
            postMessageTransfers: worker.postMessageTransfers,
            docBaseUrl: source.docBaseUrl,
            ignoreErrors: source.ignoreErrors,
            isEvalSupported: source.isEvalSupported,
            fontExtraProperties: source.fontExtraProperties,
            enableXfa: source.enableXfa
          }).then(function (workerId) {
            if (worker.destroyed) {
              throw new Error("Worker was destroyed");
            }

            return workerId;
          });
        }

        var PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {
          var nextDocumentId = 0;

          var PDFDocumentLoadingTask = /*#__PURE__*/function () {
            function PDFDocumentLoadingTask() {
              _classCallCheck(this, PDFDocumentLoadingTask);

              this._capability = (0, _util.createPromiseCapability)();
              this._transport = null;
              this._worker = null;
              this.docId = "d" + nextDocumentId++;
              this.destroyed = false;
              this.onPassword = null;
              this.onProgress = null;
              this.onUnsupportedFeature = null;
            }

            _createClass(PDFDocumentLoadingTask, [{
              key: "destroy",
              value: function destroy() {
                var _this8 = this;

                this.destroyed = true;
                var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();
                return transportDestroyed.then(function () {
                  _this8._transport = null;

                  if (_this8._worker) {
                    _this8._worker.destroy();

                    _this8._worker = null;
                  }
                });
              }
            }, {
              key: "promise",
              get: function get() {
                return this._capability.promise;
              }
            }]);

            return PDFDocumentLoadingTask;
          }();

          return PDFDocumentLoadingTask;
        }();

        var PDFDataRangeTransport = /*#__PURE__*/function () {
          function PDFDataRangeTransport(length, initialData) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, PDFDataRangeTransport);

            this.length = length;
            this.initialData = initialData;
            this.progressiveDone = progressiveDone;
            this.contentDispositionFilename = contentDispositionFilename;
            this._rangeListeners = [];
            this._progressListeners = [];
            this._progressiveReadListeners = [];
            this._progressiveDoneListeners = [];
            this._readyCapability = (0, _util.createPromiseCapability)();
          }

          _createClass(PDFDataRangeTransport, [{
            key: "addRangeListener",
            value: function addRangeListener(listener) {
              this._rangeListeners.push(listener);
            }
          }, {
            key: "addProgressListener",
            value: function addProgressListener(listener) {
              this._progressListeners.push(listener);
            }
          }, {
            key: "addProgressiveReadListener",
            value: function addProgressiveReadListener(listener) {
              this._progressiveReadListeners.push(listener);
            }
          }, {
            key: "addProgressiveDoneListener",
            value: function addProgressiveDoneListener(listener) {
              this._progressiveDoneListeners.push(listener);
            }
          }, {
            key: "onDataRange",
            value: function onDataRange(begin, chunk) {
              var _iterator4 = _createForOfIteratorHelper(this._rangeListeners),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var listener = _step4.value;
                  listener(begin, chunk);
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
          }, {
            key: "onDataProgress",
            value: function onDataProgress(loaded, total) {
              var _this9 = this;

              this._readyCapability.promise.then(function () {
                var _iterator5 = _createForOfIteratorHelper(_this9._progressListeners),
                    _step5;

                try {
                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var listener = _step5.value;
                    listener(loaded, total);
                  }
                } catch (err) {
                  _iterator5.e(err);
                } finally {
                  _iterator5.f();
                }
              });
            }
          }, {
            key: "onDataProgressiveRead",
            value: function onDataProgressiveRead(chunk) {
              var _this10 = this;

              this._readyCapability.promise.then(function () {
                var _iterator6 = _createForOfIteratorHelper(_this10._progressiveReadListeners),
                    _step6;

                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    var listener = _step6.value;
                    listener(chunk);
                  }
                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }
              });
            }
          }, {
            key: "onDataProgressiveDone",
            value: function onDataProgressiveDone() {
              var _this11 = this;

              this._readyCapability.promise.then(function () {
                var _iterator7 = _createForOfIteratorHelper(_this11._progressiveDoneListeners),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var listener = _step7.value;
                    listener();
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              });
            }
          }, {
            key: "transportReady",
            value: function transportReady() {
              this._readyCapability.resolve();
            }
          }, {
            key: "requestDataRange",
            value: function requestDataRange(begin, end) {
              (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
            }
          }, {
            key: "abort",
            value: function abort() {}
          }]);

          return PDFDataRangeTransport;
        }();

        exports.PDFDataRangeTransport = PDFDataRangeTransport;

        var PDFDocumentProxy = /*#__PURE__*/function () {
          function PDFDocumentProxy(pdfInfo, transport) {
            _classCallCheck(this, PDFDocumentProxy);

            this._pdfInfo = pdfInfo;
            this._transport = transport;
          }

          _createClass(PDFDocumentProxy, [{
            key: "getPage",
            value: function getPage(pageNumber) {
              return this._transport.getPage(pageNumber);
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              return this._transport.getPageIndex(ref);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this._transport.getDestinations();
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              return this._transport.getDestination(id);
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this._transport.getPageLabels();
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this._transport.getPageLayout();
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this._transport.getPageMode();
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this._transport.getViewerPreferences();
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this._transport.getOpenAction();
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this._transport.getAttachments();
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this._transport.getJavaScript();
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._transport.getDocJSActions();
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this._transport.getOutline();
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this._transport.getOptionalContentConfig();
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this._transport.getPermissions();
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              return this._transport.getMetadata();
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this._transport.getMarkInfo();
            }
          }, {
            key: "getData",
            value: function getData() {
              return this._transport.getData();
            }
          }, {
            key: "getDownloadInfo",
            value: function getDownloadInfo() {
              return this._transport.downloadInfoCapability.promise;
            }
          }, {
            key: "getStats",
            value: function getStats() {
              return this._transport.getStats();
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
            }
          }, {
            key: "destroy",
            value: function destroy() {
              return this.loadingTask.destroy();
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              if (arguments.length > 0) {
                (0, _display_utils.deprecated)("saveDocument no longer accepts any options.");
              }

              if (this._transport.annotationStorage.size <= 0) {
                (0, _display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, " + "please use the getData-method instead.");
              }

              return this._transport.saveDocument();
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return this._transport.getFieldObjects();
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return this._transport.hasJSActions();
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this._transport.getCalculationOrderIds();
            }
          }, {
            key: "annotationStorage",
            get: function get() {
              return this._transport.annotationStorage;
            }
          }, {
            key: "numPages",
            get: function get() {
              return this._pdfInfo.numPages;
            }
          }, {
            key: "fingerprint",
            get: function get() {
              return this._pdfInfo.fingerprint;
            }
          }, {
            key: "isPureXfa",
            get: function get() {
              return this._pdfInfo.isPureXfa;
            }
          }, {
            key: "loadingParams",
            get: function get() {
              return this._transport.loadingParams;
            }
          }, {
            key: "loadingTask",
            get: function get() {
              return this._transport.loadingTask;
            }
          }]);

          return PDFDocumentProxy;
        }();

        exports.PDFDocumentProxy = PDFDocumentProxy;

        var PDFPageProxy = /*#__PURE__*/function () {
          function PDFPageProxy(pageIndex, pageInfo, transport, ownerDocument) {
            var pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            _classCallCheck(this, PDFPageProxy);

            this._pageIndex = pageIndex;
            this._pageInfo = pageInfo;
            this._ownerDocument = ownerDocument;
            this._transport = transport;
            this._stats = pdfBug ? new _display_utils.StatTimer() : null;
            this._pdfBug = pdfBug;
            this.commonObjs = transport.commonObjs;
            this.objs = new PDFObjects();
            this.cleanupAfterRender = false;
            this.pendingCleanup = false;
            this._intentStates = new Map();
            this.destroyed = false;
          }

          _createClass(PDFPageProxy, [{
            key: "getViewport",
            value: function getViewport() {
              var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  scale = _ref11.scale,
                  _ref11$rotation = _ref11.rotation,
                  rotation = _ref11$rotation === void 0 ? this.rotate : _ref11$rotation,
                  _ref11$offsetX = _ref11.offsetX,
                  offsetX = _ref11$offsetX === void 0 ? 0 : _ref11$offsetX,
                  _ref11$offsetY = _ref11.offsetY,
                  offsetY = _ref11$offsetY === void 0 ? 0 : _ref11$offsetY,
                  _ref11$dontFlip = _ref11.dontFlip,
                  dontFlip = _ref11$dontFlip === void 0 ? false : _ref11$dontFlip;

              return new _display_utils.PageViewport({
                viewBox: this.view,
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations() {
              var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref12$intent = _ref12.intent,
                  intent = _ref12$intent === void 0 ? null : _ref12$intent;

              if (!this._annotationsPromise || this._annotationsIntent !== intent) {
                this._annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);
                this._annotationsIntent = intent;
              }

              return this._annotationsPromise;
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));
            }
          }, {
            key: "getXfa",
            value: function getXfa() {
              return this._xfaPromise || (this._xfaPromise = this._transport.getPageXfa(this._pageIndex));
            }
          }, {
            key: "render",
            value: function render(_ref13) {
              var _arguments$,
                  _this12 = this;

              var canvasContext = _ref13.canvasContext,
                  viewport = _ref13.viewport,
                  _ref13$intent = _ref13.intent,
                  intent = _ref13$intent === void 0 ? "display" : _ref13$intent,
                  _ref13$enableWebGL = _ref13.enableWebGL,
                  enableWebGL = _ref13$enableWebGL === void 0 ? false : _ref13$enableWebGL,
                  _ref13$renderInteract = _ref13.renderInteractiveForms,
                  renderInteractiveForms = _ref13$renderInteract === void 0 ? false : _ref13$renderInteract,
                  _ref13$transform = _ref13.transform,
                  transform = _ref13$transform === void 0 ? null : _ref13$transform,
                  _ref13$imageLayer = _ref13.imageLayer,
                  imageLayer = _ref13$imageLayer === void 0 ? null : _ref13$imageLayer,
                  _ref13$canvasFactory = _ref13.canvasFactory,
                  canvasFactory = _ref13$canvasFactory === void 0 ? null : _ref13$canvasFactory,
                  _ref13$background = _ref13.background,
                  background = _ref13$background === void 0 ? null : _ref13$background,
                  _ref13$includeAnnotat = _ref13.includeAnnotationStorage,
                  includeAnnotationStorage = _ref13$includeAnnotat === void 0 ? false : _ref13$includeAnnotat,
                  _ref13$optionalConten = _ref13.optionalContentConfigPromise,
                  optionalContentConfigPromise = _ref13$optionalConten === void 0 ? null : _ref13$optionalConten;

              var _intentState;

              if (((_arguments$ = arguments[0]) === null || _arguments$ === void 0 ? void 0 : _arguments$.annotationStorage) !== undefined) {
                (0, _display_utils.deprecated)("render no longer accepts an `annotationStorage` option, " + "please use the `includeAnnotationStorage`-boolean instead.");
                includeAnnotationStorage || (includeAnnotationStorage = !!arguments[0].annotationStorage);
              }

              if (this._stats) {
                this._stats.time("Overall");
              }

              var renderingIntent = intent === "print" ? "print" : "display";
              this.pendingCleanup = false;

              if (!optionalContentConfigPromise) {
                optionalContentConfigPromise = this._transport.getOptionalContentConfig();
              }

              var intentState = this._intentStates.get(renderingIntent);

              if (!intentState) {
                intentState = Object.create(null);

                this._intentStates.set(renderingIntent, intentState);
              }

              if (intentState.streamReaderCancelTimeout) {
                clearTimeout(intentState.streamReaderCancelTimeout);
                intentState.streamReaderCancelTimeout = null;
              }

              var canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({
                ownerDocument: this._ownerDocument
              });
              var webGLContext = new _webgl.WebGLContext({
                enable: enableWebGL
              });
              var annotationStorage = includeAnnotationStorage ? this._transport.annotationStorage.serializable : null;

              if (!intentState.displayReadyCapability) {
                intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false
                };

                if (this._stats) {
                  this._stats.time("Page Request");
                }

                this._pumpOperatorList({
                  pageIndex: this._pageIndex,
                  intent: renderingIntent,
                  renderInteractiveForms: renderInteractiveForms === true,
                  annotationStorage: annotationStorage
                });
              }

              var complete = function complete(error) {
                intentState.renderTasks["delete"](internalRenderTask);

                if (_this12.cleanupAfterRender || renderingIntent === "print") {
                  _this12.pendingCleanup = true;
                }

                _this12._tryCleanup();

                if (error) {
                  internalRenderTask.capability.reject(error);

                  _this12._abortOperatorList({
                    intentState: intentState,
                    reason: error
                  });
                } else {
                  internalRenderTask.capability.resolve();
                }

                if (_this12._stats) {
                  _this12._stats.timeEnd("Rendering");

                  _this12._stats.timeEnd("Overall");
                }
              };

              var internalRenderTask = new InternalRenderTask({
                callback: complete,
                params: {
                  canvasContext: canvasContext,
                  viewport: viewport,
                  transform: transform,
                  imageLayer: imageLayer,
                  background: background
                },
                objs: this.objs,
                commonObjs: this.commonObjs,
                operatorList: intentState.operatorList,
                pageIndex: this._pageIndex,
                canvasFactory: canvasFactoryInstance,
                webGLContext: webGLContext,
                useRequestAnimationFrame: renderingIntent !== "print",
                pdfBug: this._pdfBug
              });
              ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);
              var renderTask = internalRenderTask.task;
              Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(function (_ref14) {
                var _ref15 = _slicedToArray(_ref14, 2),
                    transparency = _ref15[0],
                    optionalContentConfig = _ref15[1];

                if (_this12.pendingCleanup) {
                  complete();
                  return;
                }

                if (_this12._stats) {
                  _this12._stats.time("Rendering");
                }

                internalRenderTask.initializeGraphics({
                  transparency: transparency,
                  optionalContentConfig: optionalContentConfig
                });
                internalRenderTask.operatorListChanged();
              })["catch"](complete);
              return renderTask;
            }
          }, {
            key: "getOperatorList",
            value: function getOperatorList() {
              function operatorListChanged() {
                if (intentState.operatorList.lastChunk) {
                  intentState.opListReadCapability.resolve(intentState.operatorList);
                  intentState.renderTasks["delete"](opListTask);
                }
              }

              var renderingIntent = "oplist";

              var intentState = this._intentStates.get(renderingIntent);

              if (!intentState) {
                intentState = Object.create(null);

                this._intentStates.set(renderingIntent, intentState);
              }

              var opListTask;

              if (!intentState.opListReadCapability) {
                var _intentState2;

                opListTask = Object.create(null);
                opListTask.operatorListChanged = operatorListChanged;
                intentState.opListReadCapability = (0, _util.createPromiseCapability)();
                ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false
                };

                if (this._stats) {
                  this._stats.time("Page Request");
                }

                this._pumpOperatorList({
                  pageIndex: this._pageIndex,
                  intent: renderingIntent
                });
              }

              return intentState.opListReadCapability.promise;
            }
          }, {
            key: "streamTextContent",
            value: function streamTextContent() {
              var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref16$normalizeWhite = _ref16.normalizeWhitespace,
                  normalizeWhitespace = _ref16$normalizeWhite === void 0 ? false : _ref16$normalizeWhite,
                  _ref16$disableCombine = _ref16.disableCombineTextItems,
                  disableCombineTextItems = _ref16$disableCombine === void 0 ? false : _ref16$disableCombine,
                  _ref16$includeMarkedC = _ref16.includeMarkedContent,
                  includeMarkedContent = _ref16$includeMarkedC === void 0 ? false : _ref16$includeMarkedC;

              var TEXT_CONTENT_CHUNK_SIZE = 100;
              return this._transport.messageHandler.sendWithStream("GetTextContent", {
                pageIndex: this._pageIndex,
                normalizeWhitespace: normalizeWhitespace === true,
                combineTextItems: disableCombineTextItems !== true,
                includeMarkedContent: includeMarkedContent === true
              }, {
                highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                size: function size(textContent) {
                  return textContent.items.length;
                }
              });
            }
          }, {
            key: "getTextContent",
            value: function getTextContent() {
              var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var readableStream = this.streamTextContent(params);
              return new Promise(function (resolve, reject) {
                function pump() {
                  reader.read().then(function (_ref17) {
                    var _textContent$items;

                    var value = _ref17.value,
                        done = _ref17.done;

                    if (done) {
                      resolve(textContent);
                      return;
                    }

                    Object.assign(textContent.styles, value.styles);

                    (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));

                    pump();
                  }, reject);
                }

                var reader = readableStream.getReader();
                var textContent = {
                  items: [],
                  styles: Object.create(null)
                };
                pump();
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree() {
              return this._structTreePromise || (this._structTreePromise = this._transport.getStructTree(this._pageIndex));
            }
          }, {
            key: "_destroy",
            value: function _destroy() {
              this.destroyed = true;
              this._transport.pageCache[this._pageIndex] = null;
              var waitOn = [];

              var _iterator8 = _createForOfIteratorHelper(this._intentStates),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var _step8$value = _slicedToArray(_step8.value, 2),
                      intent = _step8$value[0],
                      intentState = _step8$value[1];

                  this._abortOperatorList({
                    intentState: intentState,
                    reason: new Error("Page was destroyed."),
                    force: true
                  });

                  if (intent === "oplist") {
                    continue;
                  }

                  var _iterator9 = _createForOfIteratorHelper(intentState.renderTasks),
                      _step9;

                  try {
                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                      var internalRenderTask = _step9.value;
                      waitOn.push(internalRenderTask.completed);
                      internalRenderTask.cancel();
                    }
                  } catch (err) {
                    _iterator9.e(err);
                  } finally {
                    _iterator9.f();
                  }
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }

              this.objs.clear();
              this._annotationsPromise = null;
              this._jsActionsPromise = null;
              this._xfaPromise = null;
              this._structTreePromise = null;
              this.pendingCleanup = false;
              return Promise.all(waitOn);
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              this.pendingCleanup = true;
              return this._tryCleanup(resetStats);
            }
          }, {
            key: "_tryCleanup",
            value: function _tryCleanup() {
              var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (!this.pendingCleanup) {
                return false;
              }

              var _iterator10 = _createForOfIteratorHelper(this._intentStates.values()),
                  _step10;

              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var _step10$value = _step10.value,
                      renderTasks = _step10$value.renderTasks,
                      operatorList = _step10$value.operatorList;

                  if (renderTasks.size > 0 || !operatorList.lastChunk) {
                    return false;
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }

              this._intentStates.clear();

              this.objs.clear();
              this._annotationsPromise = null;
              this._jsActionsPromise = null;
              this._xfaPromise = null;
              this._structTreePromise = null;

              if (resetStats && this._stats) {
                this._stats = new _display_utils.StatTimer();
              }

              this.pendingCleanup = false;
              return true;
            }
          }, {
            key: "_startRenderPage",
            value: function _startRenderPage(transparency, intent) {
              var intentState = this._intentStates.get(intent);

              if (!intentState) {
                return;
              }

              if (this._stats) {
                this._stats.timeEnd("Page Request");
              }

              if (intentState.displayReadyCapability) {
                intentState.displayReadyCapability.resolve(transparency);
              }
            }
          }, {
            key: "_renderPageChunk",
            value: function _renderPageChunk(operatorListChunk, intentState) {
              for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {
                intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
              }

              intentState.operatorList.lastChunk = operatorListChunk.lastChunk;

              var _iterator11 = _createForOfIteratorHelper(intentState.renderTasks),
                  _step11;

              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  var internalRenderTask = _step11.value;
                  internalRenderTask.operatorListChanged();
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }

              if (operatorListChunk.lastChunk) {
                this._tryCleanup();
              }
            }
          }, {
            key: "_pumpOperatorList",
            value: function _pumpOperatorList(args) {
              var _this13 = this;

              (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected "intent" argument.');

              var readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", args);

              var reader = readableStream.getReader();

              var intentState = this._intentStates.get(args.intent);

              intentState.streamReader = reader;

              var pump = function pump() {
                reader.read().then(function (_ref18) {
                  var value = _ref18.value,
                      done = _ref18.done;

                  if (done) {
                    intentState.streamReader = null;
                    return;
                  }

                  if (_this13._transport.destroyed) {
                    return;
                  }

                  _this13._renderPageChunk(value, intentState);

                  pump();
                }, function (reason) {
                  intentState.streamReader = null;

                  if (_this13._transport.destroyed) {
                    return;
                  }

                  if (intentState.operatorList) {
                    intentState.operatorList.lastChunk = true;

                    var _iterator12 = _createForOfIteratorHelper(intentState.renderTasks),
                        _step12;

                    try {
                      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                        var internalRenderTask = _step12.value;
                        internalRenderTask.operatorListChanged();
                      }
                    } catch (err) {
                      _iterator12.e(err);
                    } finally {
                      _iterator12.f();
                    }

                    _this13._tryCleanup();
                  }

                  if (intentState.displayReadyCapability) {
                    intentState.displayReadyCapability.reject(reason);
                  } else if (intentState.opListReadCapability) {
                    intentState.opListReadCapability.reject(reason);
                  } else {
                    throw reason;
                  }
                });
              };

              pump();
            }
          }, {
            key: "_abortOperatorList",
            value: function _abortOperatorList(_ref19) {
              var _this14 = this;

              var intentState = _ref19.intentState,
                  reason = _ref19.reason,
                  _ref19$force = _ref19.force,
                  force = _ref19$force === void 0 ? false : _ref19$force;
              (0, _util.assert)(reason instanceof Error || _typeof(reason) === "object" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected "reason" argument.');

              if (!intentState.streamReader) {
                return;
              }

              if (!force) {
                if (intentState.renderTasks.size > 0) {
                  return;
                }

                if (reason instanceof _display_utils.RenderingCancelledException) {
                  intentState.streamReaderCancelTimeout = setTimeout(function () {
                    _this14._abortOperatorList({
                      intentState: intentState,
                      reason: reason,
                      force: true
                    });

                    intentState.streamReaderCancelTimeout = null;
                  }, RENDERING_CANCELLED_TIMEOUT);
                  return;
                }
              }

              intentState.streamReader.cancel(new _util.AbortException(reason === null || reason === void 0 ? void 0 : reason.message));
              intentState.streamReader = null;

              if (this._transport.destroyed) {
                return;
              }

              var _iterator13 = _createForOfIteratorHelper(this._intentStates),
                  _step13;

              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                  var _step13$value = _slicedToArray(_step13.value, 2),
                      intent = _step13$value[0],
                      curIntentState = _step13$value[1];

                  if (curIntentState === intentState) {
                    this._intentStates["delete"](intent);

                    break;
                  }
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }

              this.cleanup();
            }
          }, {
            key: "pageNumber",
            get: function get() {
              return this._pageIndex + 1;
            }
          }, {
            key: "rotate",
            get: function get() {
              return this._pageInfo.rotate;
            }
          }, {
            key: "ref",
            get: function get() {
              return this._pageInfo.ref;
            }
          }, {
            key: "userUnit",
            get: function get() {
              return this._pageInfo.userUnit;
            }
          }, {
            key: "view",
            get: function get() {
              return this._pageInfo.view;
            }
          }, {
            key: "stats",
            get: function get() {
              return this._stats;
            }
          }]);

          return PDFPageProxy;
        }();

        exports.PDFPageProxy = PDFPageProxy;

        var LoopbackPort = /*#__PURE__*/function () {
          function LoopbackPort() {
            _classCallCheck(this, LoopbackPort);

            this._listeners = [];
            this._deferred = Promise.resolve(undefined);
          }

          _createClass(LoopbackPort, [{
            key: "postMessage",
            value: function postMessage(obj, transfers) {
              var _this15 = this;

              function cloneValue(value) {
                if (_typeof(value) !== "object" || value === null) {
                  return value;
                }

                if (cloned.has(value)) {
                  return cloned.get(value);
                }

                var buffer, result;

                if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
                  if (transfers === null || transfers === void 0 ? void 0 : transfers.includes(buffer)) {
                    result = new value.constructor(buffer, value.byteOffset, value.byteLength);
                  } else {
                    result = new value.constructor(value);
                  }

                  cloned.set(value, result);
                  return result;
                }

                if (value instanceof Map) {
                  result = new Map();
                  cloned.set(value, result);

                  var _iterator14 = _createForOfIteratorHelper(value),
                      _step14;

                  try {
                    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                      var _step14$value = _slicedToArray(_step14.value, 2),
                          key = _step14$value[0],
                          val = _step14$value[1];

                      result.set(key, cloneValue(val));
                    }
                  } catch (err) {
                    _iterator14.e(err);
                  } finally {
                    _iterator14.f();
                  }

                  return result;
                }

                if (value instanceof Set) {
                  result = new Set();
                  cloned.set(value, result);

                  var _iterator15 = _createForOfIteratorHelper(value),
                      _step15;

                  try {
                    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                      var _val = _step15.value;
                      result.add(cloneValue(_val));
                    }
                  } catch (err) {
                    _iterator15.e(err);
                  } finally {
                    _iterator15.f();
                  }

                  return result;
                }

                result = Array.isArray(value) ? [] : {};
                cloned.set(value, result);

                for (var i in value) {
                  var desc = void 0,
                      p = value;

                  while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
                    p = Object.getPrototypeOf(p);
                  }

                  if (typeof desc.value === "undefined") {
                    continue;
                  }

                  if (typeof desc.value === "function") {
                    var _value$hasOwnProperty;

                    if ((_value$hasOwnProperty = value.hasOwnProperty) === null || _value$hasOwnProperty === void 0 ? void 0 : _value$hasOwnProperty.call(value, i)) {
                      throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(value[i]));
                    }

                    continue;
                  }

                  result[i] = cloneValue(desc.value);
                }

                return result;
              }

              var cloned = new WeakMap();
              var event = {
                data: cloneValue(obj)
              };

              this._deferred.then(function () {
                var _iterator16 = _createForOfIteratorHelper(_this15._listeners),
                    _step16;

                try {
                  for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                    var listener = _step16.value;
                    listener.call(_this15, event);
                  }
                } catch (err) {
                  _iterator16.e(err);
                } finally {
                  _iterator16.f();
                }
              });
            }
          }, {
            key: "addEventListener",
            value: function addEventListener(name, listener) {
              this._listeners.push(listener);
            }
          }, {
            key: "removeEventListener",
            value: function removeEventListener(name, listener) {
              var i = this._listeners.indexOf(listener);

              this._listeners.splice(i, 1);
            }
          }, {
            key: "terminate",
            value: function terminate() {
              this._listeners.length = 0;
            }
          }]);

          return LoopbackPort;
        }();

        exports.LoopbackPort = LoopbackPort;

        var PDFWorker = function PDFWorkerClosure() {
          var pdfWorkerPorts = new WeakMap();
          var isWorkerDisabled = false;
          var fallbackWorkerSrc;
          var nextFakeWorkerId = 0;
          var fakeWorkerCapability;

          if (_is_node.isNodeJS && "function" === "function") {
            isWorkerDisabled = true;
            fallbackWorkerSrc = "./pdf.worker.js";
          } else if ((typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && "currentScript" in document) {
            var _document$currentScri;

            var pdfjsFilePath = (_document$currentScri = document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;

            if (pdfjsFilePath) {
              fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
            }
          }

          function _getWorkerSrc() {
            if (_worker_options.GlobalWorkerOptions.workerSrc) {
              return _worker_options.GlobalWorkerOptions.workerSrc;
            }

            if (typeof fallbackWorkerSrc !== "undefined") {
              if (!_is_node.isNodeJS) {
                (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
              }

              return fallbackWorkerSrc;
            }

            throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
          }

          function getMainThreadWorkerMessageHandler() {
            var mainWorkerMessageHandler;

            try {
              var _globalThis$pdfjsWork;

              mainWorkerMessageHandler = (_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler;
            } catch (ex) {}

            return mainWorkerMessageHandler || null;
          }

          function setupFakeWorkerGlobal() {
            if (fakeWorkerCapability) {
              return fakeWorkerCapability.promise;
            }

            fakeWorkerCapability = (0, _util.createPromiseCapability)();

            var loader = /*#__PURE__*/function () {
              var _ref20 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {
                var mainWorkerMessageHandler, worker;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();

                        if (!mainWorkerMessageHandler) {
                          _context3.next = 3;
                          break;
                        }

                        return _context3.abrupt("return", mainWorkerMessageHandler);

                      case 3:
                        if (!(_is_node.isNodeJS && "function" === "function")) {
                          _context3.next = 6;
                          break;
                        }

                        worker = eval("require")(_getWorkerSrc());
                        return _context3.abrupt("return", worker.WorkerMessageHandler);

                      case 6:
                        _context3.next = 8;
                        return (0, _display_utils.loadScript)(_getWorkerSrc());

                      case 8:
                        return _context3.abrupt("return", window.pdfjsWorker.WorkerMessageHandler);

                      case 9:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function loader() {
                return _ref20.apply(this, arguments);
              };
            }();

            loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);
            return fakeWorkerCapability.promise;
          }

          function createCDNWrapper(url) {
            var wrapper = "importScripts('" + url + "');";
            return URL.createObjectURL(new Blob([wrapper]));
          }

          var PDFWorker = /*#__PURE__*/function () {
            function PDFWorker() {
              var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  _ref21$name = _ref21.name,
                  name = _ref21$name === void 0 ? null : _ref21$name,
                  _ref21$port = _ref21.port,
                  port = _ref21$port === void 0 ? null : _ref21$port,
                  _ref21$verbosity = _ref21.verbosity,
                  verbosity = _ref21$verbosity === void 0 ? (0, _util.getVerbosityLevel)() : _ref21$verbosity;

              _classCallCheck(this, PDFWorker);

              if (port && pdfWorkerPorts.has(port)) {
                throw new Error("Cannot use more than one PDFWorker per port");
              }

              this.name = name;
              this.destroyed = false;
              this.postMessageTransfers = true;
              this.verbosity = verbosity;
              this._readyCapability = (0, _util.createPromiseCapability)();
              this._port = null;
              this._webWorker = null;
              this._messageHandler = null;

              if (port) {
                pdfWorkerPorts.set(port, this);

                this._initializeFromPort(port);

                return;
              }

              this._initialize();
            }

            _createClass(PDFWorker, [{
              key: "_initializeFromPort",
              value: function _initializeFromPort(port) {
                this._port = port;
                this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);

                this._messageHandler.on("ready", function () {});

                this._readyCapability.resolve();
              }
            }, {
              key: "_initialize",
              value: function _initialize() {
                var _this16 = this;

                if (typeof Worker !== "undefined" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {
                  var workerSrc = _getWorkerSrc();

                  try {
                    if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
                      workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);
                    }

                    var worker = new Worker(workerSrc);
                    var messageHandler = new _message_handler.MessageHandler("main", "worker", worker);

                    var terminateEarly = function terminateEarly() {
                      worker.removeEventListener("error", onWorkerError);
                      messageHandler.destroy();
                      worker.terminate();

                      if (_this16.destroyed) {
                        _this16._readyCapability.reject(new Error("Worker was destroyed"));
                      } else {
                        _this16._setupFakeWorker();
                      }
                    };

                    var onWorkerError = function onWorkerError() {
                      if (!_this16._webWorker) {
                        terminateEarly();
                      }
                    };

                    worker.addEventListener("error", onWorkerError);
                    messageHandler.on("test", function (data) {
                      worker.removeEventListener("error", onWorkerError);

                      if (_this16.destroyed) {
                        terminateEarly();
                        return;
                      }

                      if (data) {
                        _this16._messageHandler = messageHandler;
                        _this16._port = worker;
                        _this16._webWorker = worker;

                        if (!data.supportTransfers) {
                          _this16.postMessageTransfers = false;
                        }

                        _this16._readyCapability.resolve();

                        messageHandler.send("configure", {
                          verbosity: _this16.verbosity
                        });
                      } else {
                        _this16._setupFakeWorker();

                        messageHandler.destroy();
                        worker.terminate();
                      }
                    });
                    messageHandler.on("ready", function (data) {
                      worker.removeEventListener("error", onWorkerError);

                      if (_this16.destroyed) {
                        terminateEarly();
                        return;
                      }

                      try {
                        sendTest();
                      } catch (e) {
                        _this16._setupFakeWorker();
                      }
                    });

                    var sendTest = function sendTest() {
                      var testObj = new Uint8Array([_this16.postMessageTransfers ? 255 : 0]);

                      try {
                        messageHandler.send("test", testObj, [testObj.buffer]);
                      } catch (ex) {
                        (0, _util.warn)("Cannot use postMessage transfers.");
                        testObj[0] = 0;
                        messageHandler.send("test", testObj);
                      }
                    };

                    sendTest();
                    return;
                  } catch (e) {
                    (0, _util.info)("The worker has been disabled.");
                  }
                }

                this._setupFakeWorker();
              }
            }, {
              key: "_setupFakeWorker",
              value: function _setupFakeWorker() {
                var _this17 = this;

                if (!isWorkerDisabled) {
                  (0, _util.warn)("Setting up fake worker.");
                  isWorkerDisabled = true;
                }

                setupFakeWorkerGlobal().then(function (WorkerMessageHandler) {
                  if (_this17.destroyed) {
                    _this17._readyCapability.reject(new Error("Worker was destroyed"));

                    return;
                  }

                  var port = new LoopbackPort();
                  _this17._port = port;
                  var id = "fake" + nextFakeWorkerId++;
                  var workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                  WorkerMessageHandler.setup(workerHandler, port);
                  var messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                  _this17._messageHandler = messageHandler;

                  _this17._readyCapability.resolve();

                  messageHandler.send("configure", {
                    verbosity: _this17.verbosity
                  });
                })["catch"](function (reason) {
                  _this17._readyCapability.reject(new Error("Setting up fake worker failed: \"".concat(reason.message, "\".")));
                });
              }
            }, {
              key: "destroy",
              value: function destroy() {
                this.destroyed = true;

                if (this._webWorker) {
                  this._webWorker.terminate();

                  this._webWorker = null;
                }

                pdfWorkerPorts["delete"](this._port);
                this._port = null;

                if (this._messageHandler) {
                  this._messageHandler.destroy();

                  this._messageHandler = null;
                }
              }
            }, {
              key: "promise",
              get: function get() {
                return this._readyCapability.promise;
              }
            }, {
              key: "port",
              get: function get() {
                return this._port;
              }
            }, {
              key: "messageHandler",
              get: function get() {
                return this._messageHandler;
              }
            }], [{
              key: "fromPort",
              value: function fromPort(params) {
                if (!params || !params.port) {
                  throw new Error("PDFWorker.fromPort - invalid method signature.");
                }

                if (pdfWorkerPorts.has(params.port)) {
                  return pdfWorkerPorts.get(params.port);
                }

                return new PDFWorker(params);
              }
            }, {
              key: "getWorkerSrc",
              value: function getWorkerSrc() {
                return _getWorkerSrc();
              }
            }]);

            return PDFWorker;
          }();

          return PDFWorker;
        }();

        exports.PDFWorker = PDFWorker;

        var WorkerTransport = /*#__PURE__*/function () {
          function WorkerTransport(messageHandler, loadingTask, networkStream, params) {
            _classCallCheck(this, WorkerTransport);

            this.messageHandler = messageHandler;
            this.loadingTask = loadingTask;
            this.commonObjs = new PDFObjects();
            this.fontLoader = new _font_loader.FontLoader({
              docId: loadingTask.docId,
              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
              ownerDocument: params.ownerDocument
            });
            this._params = params;
            this.CMapReaderFactory = new params.CMapReaderFactory({
              baseUrl: params.cMapUrl,
              isCompressed: params.cMapPacked
            });
            this.destroyed = false;
            this.destroyCapability = null;
            this._passwordCapability = null;
            this._networkStream = networkStream;
            this._fullReader = null;
            this._lastProgress = null;
            this.pageCache = [];
            this.pagePromises = [];
            this.downloadInfoCapability = (0, _util.createPromiseCapability)();
            this.setupMessageHandler();
          }

          _createClass(WorkerTransport, [{
            key: "destroy",
            value: function destroy() {
              var _this18 = this;

              if (this.destroyCapability) {
                return this.destroyCapability.promise;
              }

              this.destroyed = true;
              this.destroyCapability = (0, _util.createPromiseCapability)();

              if (this._passwordCapability) {
                this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
              }

              var waitOn = [];
              this.pageCache.forEach(function (page) {
                if (page) {
                  waitOn.push(page._destroy());
                }
              });
              this.pageCache.length = 0;
              this.pagePromises.length = 0;

              if (this.hasOwnProperty("annotationStorage")) {
                this.annotationStorage.resetModified();
              }

              var terminated = this.messageHandler.sendWithPromise("Terminate", null);
              waitOn.push(terminated);
              Promise.all(waitOn).then(function () {
                _this18.commonObjs.clear();

                _this18.fontLoader.clear();

                _this18._hasJSActionsPromise = null;

                if (_this18._networkStream) {
                  _this18._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));
                }

                if (_this18.messageHandler) {
                  _this18.messageHandler.destroy();

                  _this18.messageHandler = null;
                }

                _this18.destroyCapability.resolve();
              }, this.destroyCapability.reject);
              return this.destroyCapability.promise;
            }
          }, {
            key: "setupMessageHandler",
            value: function setupMessageHandler() {
              var _this19 = this;

              var messageHandler = this.messageHandler,
                  loadingTask = this.loadingTask;
              messageHandler.on("GetReader", function (data, sink) {
                (0, _util.assert)(_this19._networkStream, "GetReader - no `IPDFStream` instance available.");
                _this19._fullReader = _this19._networkStream.getFullReader();

                _this19._fullReader.onProgress = function (evt) {
                  _this19._lastProgress = {
                    loaded: evt.loaded,
                    total: evt.total
                  };
                };

                sink.onPull = function () {
                  _this19._fullReader.read().then(function (_ref22) {
                    var value = _ref22.value,
                        done = _ref22.done;

                    if (done) {
                      sink.close();
                      return;
                    }

                    (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  })["catch"](function (reason) {
                    sink.error(reason);
                  });
                };

                sink.onCancel = function (reason) {
                  _this19._fullReader.cancel(reason);

                  sink.ready["catch"](function (readyReason) {
                    if (_this19.destroyed) {
                      return;
                    }

                    throw readyReason;
                  });
                };
              });
              messageHandler.on("ReaderHeadersReady", function (data) {
                var headersCapability = (0, _util.createPromiseCapability)();
                var fullReader = _this19._fullReader;
                fullReader.headersReady.then(function () {
                  if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                    if (_this19._lastProgress && loadingTask.onProgress) {
                      loadingTask.onProgress(_this19._lastProgress);
                    }

                    fullReader.onProgress = function (evt) {
                      if (loadingTask.onProgress) {
                        loadingTask.onProgress({
                          loaded: evt.loaded,
                          total: evt.total
                        });
                      }
                    };
                  }

                  headersCapability.resolve({
                    isStreamingSupported: fullReader.isStreamingSupported,
                    isRangeSupported: fullReader.isRangeSupported,
                    contentLength: fullReader.contentLength
                  });
                }, headersCapability.reject);
                return headersCapability.promise;
              });
              messageHandler.on("GetRangeReader", function (data, sink) {
                (0, _util.assert)(_this19._networkStream, "GetRangeReader - no `IPDFStream` instance available.");

                var rangeReader = _this19._networkStream.getRangeReader(data.begin, data.end);

                if (!rangeReader) {
                  sink.close();
                  return;
                }

                sink.onPull = function () {
                  rangeReader.read().then(function (_ref23) {
                    var value = _ref23.value,
                        done = _ref23.done;

                    if (done) {
                      sink.close();
                      return;
                    }

                    (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetRangeReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  })["catch"](function (reason) {
                    sink.error(reason);
                  });
                };

                sink.onCancel = function (reason) {
                  rangeReader.cancel(reason);
                  sink.ready["catch"](function (readyReason) {
                    if (_this19.destroyed) {
                      return;
                    }

                    throw readyReason;
                  });
                };
              });
              messageHandler.on("GetDoc", function (_ref24) {
                var pdfInfo = _ref24.pdfInfo;
                _this19._numPages = pdfInfo.numPages;

                loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, _this19));
              });
              messageHandler.on("DocException", function (ex) {
                var reason;

                switch (ex.name) {
                  case "PasswordException":
                    reason = new _util.PasswordException(ex.message, ex.code);
                    break;

                  case "InvalidPDFException":
                    reason = new _util.InvalidPDFException(ex.message);
                    break;

                  case "MissingPDFException":
                    reason = new _util.MissingPDFException(ex.message);
                    break;

                  case "UnexpectedResponseException":
                    reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                    break;

                  case "UnknownErrorException":
                    reason = new _util.UnknownErrorException(ex.message, ex.details);
                    break;
                }

                if (!(reason instanceof Error)) {
                  var msg = "DocException - expected a valid Error.";
                  (0, _util.warn)(msg);
                }

                loadingTask._capability.reject(reason);
              });
              messageHandler.on("PasswordRequest", function (exception) {
                _this19._passwordCapability = (0, _util.createPromiseCapability)();

                if (loadingTask.onPassword) {
                  var updatePassword = function updatePassword(password) {
                    _this19._passwordCapability.resolve({
                      password: password
                    });
                  };

                  try {
                    loadingTask.onPassword(updatePassword, exception.code);
                  } catch (ex) {
                    _this19._passwordCapability.reject(ex);
                  }
                } else {
                  _this19._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                }

                return _this19._passwordCapability.promise;
              });
              messageHandler.on("DataLoaded", function (data) {
                if (loadingTask.onProgress) {
                  loadingTask.onProgress({
                    loaded: data.length,
                    total: data.length
                  });
                }

                _this19.downloadInfoCapability.resolve(data);
              });
              messageHandler.on("StartRenderPage", function (data) {
                if (_this19.destroyed) {
                  return;
                }

                var page = _this19.pageCache[data.pageIndex];

                page._startRenderPage(data.transparency, data.intent);
              });
              messageHandler.on("commonobj", function (data) {
                var _globalThis$FontInspe;

                if (_this19.destroyed) {
                  return;
                }

                var _data = _slicedToArray(data, 3),
                    id = _data[0],
                    type = _data[1],
                    exportedData = _data[2];

                if (_this19.commonObjs.has(id)) {
                  return;
                }

                switch (type) {
                  case "Font":
                    var params = _this19._params;

                    if ("error" in exportedData) {
                      var exportedError = exportedData.error;
                      (0, _util.warn)("Error during font loading: ".concat(exportedError));

                      _this19.commonObjs.resolve(id, exportedError);

                      break;
                    }

                    var fontRegistry = null;

                    if (params.pdfBug && ((_globalThis$FontInspe = globalThis.FontInspector) === null || _globalThis$FontInspe === void 0 ? void 0 : _globalThis$FontInspe.enabled)) {
                      fontRegistry = {
                        registerFont: function registerFont(font, url) {
                          globalThis.FontInspector.fontAdded(font, url);
                        }
                      };
                    }

                    var font = new _font_loader.FontFaceObject(exportedData, {
                      isEvalSupported: params.isEvalSupported,
                      disableFontFace: params.disableFontFace,
                      ignoreErrors: params.ignoreErrors,
                      onUnsupportedFeature: _this19._onUnsupportedFeature.bind(_this19),
                      fontRegistry: fontRegistry
                    });

                    _this19.fontLoader.bind(font)["catch"](function (reason) {
                      return messageHandler.sendWithPromise("FontFallback", {
                        id: id
                      });
                    })["finally"](function () {
                      if (!params.fontExtraProperties && font.data) {
                        font.data = null;
                      }

                      _this19.commonObjs.resolve(id, font);
                    });

                    break;

                  case "FontPath":
                  case "Image":
                    _this19.commonObjs.resolve(id, exportedData);

                    break;

                  default:
                    throw new Error("Got unknown common object type ".concat(type));
                }
              });
              messageHandler.on("obj", function (data) {
                var _imageData$data;

                if (_this19.destroyed) {
                  return undefined;
                }

                var _data2 = _slicedToArray(data, 4),
                    id = _data2[0],
                    pageIndex = _data2[1],
                    type = _data2[2],
                    imageData = _data2[3];

                var pageProxy = _this19.pageCache[pageIndex];

                if (pageProxy.objs.has(id)) {
                  return undefined;
                }

                switch (type) {
                  case "Image":
                    pageProxy.objs.resolve(id, imageData);
                    var MAX_IMAGE_SIZE_TO_STORE = 8000000;

                    if ((imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) > MAX_IMAGE_SIZE_TO_STORE) {
                      pageProxy.cleanupAfterRender = true;
                    }

                    break;

                  default:
                    throw new Error("Got unknown object type ".concat(type));
                }

                return undefined;
              });
              messageHandler.on("DocProgress", function (data) {
                if (_this19.destroyed) {
                  return;
                }

                if (loadingTask.onProgress) {
                  loadingTask.onProgress({
                    loaded: data.loaded,
                    total: data.total
                  });
                }
              });
              messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this));
              messageHandler.on("FetchBuiltInCMap", function (data, sink) {
                if (_this19.destroyed) {
                  sink.error(new Error("Worker was destroyed"));
                  return;
                }

                var fetched = false;

                sink.onPull = function () {
                  if (fetched) {
                    sink.close();
                    return;
                  }

                  fetched = true;

                  _this19.CMapReaderFactory.fetch(data).then(function (builtInCMap) {
                    sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);
                  })["catch"](function (reason) {
                    sink.error(reason);
                  });
                };
              });
            }
          }, {
            key: "_onUnsupportedFeature",
            value: function _onUnsupportedFeature(_ref25) {
              var featureId = _ref25.featureId;

              if (this.destroyed) {
                return;
              }

              if (this.loadingTask.onUnsupportedFeature) {
                this.loadingTask.onUnsupportedFeature(featureId);
              }
            }
          }, {
            key: "getData",
            value: function getData() {
              return this.messageHandler.sendWithPromise("GetData", null);
            }
          }, {
            key: "getPage",
            value: function getPage(pageNumber) {
              var _this20 = this;

              if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                return Promise.reject(new Error("Invalid page request"));
              }

              var pageIndex = pageNumber - 1;

              if (pageIndex in this.pagePromises) {
                return this.pagePromises[pageIndex];
              }

              var promise = this.messageHandler.sendWithPromise("GetPage", {
                pageIndex: pageIndex
              }).then(function (pageInfo) {
                if (_this20.destroyed) {
                  throw new Error("Transport destroyed");
                }

                var page = new PDFPageProxy(pageIndex, pageInfo, _this20, _this20._params.ownerDocument, _this20._params.pdfBug);
                _this20.pageCache[pageIndex] = page;
                return page;
              });
              this.pagePromises[pageIndex] = promise;
              return promise;
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              return this.messageHandler.sendWithPromise("GetPageIndex", {
                ref: ref
              })["catch"](function (reason) {
                return Promise.reject(new Error(reason));
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations(pageIndex, intent) {
              return this.messageHandler.sendWithPromise("GetAnnotations", {
                pageIndex: pageIndex,
                intent: intent
              });
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              var _this$_fullReader$fil,
                  _this$_fullReader,
                  _this21 = this;

              return this.messageHandler.sendWithPromise("SaveDocument", {
                numPages: this._numPages,
                annotationStorage: this.annotationStorage.serializable,
                filename: (_this$_fullReader$fil = (_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) !== null && _this$_fullReader$fil !== void 0 ? _this$_fullReader$fil : null
              })["finally"](function () {
                _this21.annotationStorage.resetModified();
              });
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return this.messageHandler.sendWithPromise("GetFieldObjects", null);
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise("HasJSActions", null));
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this.messageHandler.sendWithPromise("GetDestinations", null);
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              if (typeof id !== "string") {
                return Promise.reject(new Error("Invalid destination request."));
              }

              return this.messageHandler.sendWithPromise("GetDestination", {
                id: id
              });
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this.messageHandler.sendWithPromise("GetPageLabels", null);
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this.messageHandler.sendWithPromise("GetPageLayout", null);
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this.messageHandler.sendWithPromise("GetPageMode", null);
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this.messageHandler.sendWithPromise("GetOpenAction", null);
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this.messageHandler.sendWithPromise("GetAttachments", null);
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this.messageHandler.sendWithPromise("GetJavaScript", null);
            }
          }, {
            key: "getDocJSActions",
            value: function getDocJSActions() {
              return this.messageHandler.sendWithPromise("GetDocJSActions", null);
            }
          }, {
            key: "getPageJSActions",
            value: function getPageJSActions(pageIndex) {
              return this.messageHandler.sendWithPromise("GetPageJSActions", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getPageXfa",
            value: function getPageXfa(pageIndex) {
              return this.messageHandler.sendWithPromise("GetPageXfa", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree(pageIndex) {
              return this.messageHandler.sendWithPromise("GetStructTree", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this.messageHandler.sendWithPromise("GetOutline", null);
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(function (results) {
                return new _optional_content_config.OptionalContentConfig(results);
              });
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this.messageHandler.sendWithPromise("GetPermissions", null);
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              var _this22 = this;

              return this.messageHandler.sendWithPromise("GetMetadata", null).then(function (results) {
                var _this22$_fullReader$f, _this22$_fullReader, _this22$_fullReader$c, _this22$_fullReader2;

                return {
                  info: results[0],
                  metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                  contentDispositionFilename: (_this22$_fullReader$f = (_this22$_fullReader = _this22._fullReader) === null || _this22$_fullReader === void 0 ? void 0 : _this22$_fullReader.filename) !== null && _this22$_fullReader$f !== void 0 ? _this22$_fullReader$f : null,
                  contentLength: (_this22$_fullReader$c = (_this22$_fullReader2 = _this22._fullReader) === null || _this22$_fullReader2 === void 0 ? void 0 : _this22$_fullReader2.contentLength) !== null && _this22$_fullReader$c !== void 0 ? _this22$_fullReader$c : null
                };
              });
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this.messageHandler.sendWithPromise("GetMarkInfo", null);
            }
          }, {
            key: "getStats",
            value: function getStats() {
              return this.messageHandler.sendWithPromise("GetStats", null);
            }
          }, {
            key: "startCleanup",
            value: function () {
              var _startCleanup = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
                var keepLoadedFonts,
                    i,
                    ii,
                    page,
                    cleanupSuccessful,
                    _args4 = arguments;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        keepLoadedFonts = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;
                        _context4.next = 3;
                        return this.messageHandler.sendWithPromise("Cleanup", null);

                      case 3:
                        if (!this.destroyed) {
                          _context4.next = 5;
                          break;
                        }

                        return _context4.abrupt("return");

                      case 5:
                        i = 0, ii = this.pageCache.length;

                      case 6:
                        if (!(i < ii)) {
                          _context4.next = 16;
                          break;
                        }

                        page = this.pageCache[i];

                        if (page) {
                          _context4.next = 10;
                          break;
                        }

                        return _context4.abrupt("continue", 13);

                      case 10:
                        cleanupSuccessful = page.cleanup();

                        if (cleanupSuccessful) {
                          _context4.next = 13;
                          break;
                        }

                        throw new Error("startCleanup: Page ".concat(i + 1, " is currently rendering."));

                      case 13:
                        i++;
                        _context4.next = 6;
                        break;

                      case 16:
                        this.commonObjs.clear();

                        if (!keepLoadedFonts) {
                          this.fontLoader.clear();
                        }

                        this._hasJSActionsPromise = null;

                      case 19:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));

              function startCleanup() {
                return _startCleanup.apply(this, arguments);
              }

              return startCleanup;
            }()
          }, {
            key: "annotationStorage",
            get: function get() {
              return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
            }
          }, {
            key: "loadingParams",
            get: function get() {
              var params = this._params;
              return (0, _util.shadow)(this, "loadingParams", {
                disableAutoFetch: params.disableAutoFetch,
                disableFontFace: params.disableFontFace
              });
            }
          }]);

          return WorkerTransport;
        }();

        var PDFObjects = /*#__PURE__*/function () {
          function PDFObjects() {
            _classCallCheck(this, PDFObjects);

            this._objs = Object.create(null);
          }

          _createClass(PDFObjects, [{
            key: "_ensureObj",
            value: function _ensureObj(objId) {
              if (this._objs[objId]) {
                return this._objs[objId];
              }

              return this._objs[objId] = {
                capability: (0, _util.createPromiseCapability)(),
                data: null,
                resolved: false
              };
            }
          }, {
            key: "get",
            value: function get(objId) {
              var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

              if (callback) {
                this._ensureObj(objId).capability.promise.then(callback);

                return null;
              }

              var obj = this._objs[objId];

              if (!obj || !obj.resolved) {
                throw new Error("Requesting object that isn't resolved yet ".concat(objId, "."));
              }

              return obj.data;
            }
          }, {
            key: "has",
            value: function has(objId) {
              var obj = this._objs[objId];
              return (obj === null || obj === void 0 ? void 0 : obj.resolved) || false;
            }
          }, {
            key: "resolve",
            value: function resolve(objId, data) {
              var obj = this._ensureObj(objId);

              obj.resolved = true;
              obj.data = data;
              obj.capability.resolve(data);
            }
          }, {
            key: "clear",
            value: function clear() {
              this._objs = Object.create(null);
            }
          }]);

          return PDFObjects;
        }();

        var RenderTask = /*#__PURE__*/function () {
          function RenderTask(internalRenderTask) {
            _classCallCheck(this, RenderTask);

            this._internalRenderTask = internalRenderTask;
            this.onContinue = null;
          }

          _createClass(RenderTask, [{
            key: "cancel",
            value: function cancel() {
              this._internalRenderTask.cancel();
            }
          }, {
            key: "promise",
            get: function get() {
              return this._internalRenderTask.capability.promise;
            }
          }]);

          return RenderTask;
        }();

        var InternalRenderTask = function InternalRenderTaskClosure() {
          var canvasInRendering = new WeakSet();

          var InternalRenderTask = /*#__PURE__*/function () {
            function InternalRenderTask(_ref26) {
              var callback = _ref26.callback,
                  params = _ref26.params,
                  objs = _ref26.objs,
                  commonObjs = _ref26.commonObjs,
                  operatorList = _ref26.operatorList,
                  pageIndex = _ref26.pageIndex,
                  canvasFactory = _ref26.canvasFactory,
                  webGLContext = _ref26.webGLContext,
                  _ref26$useRequestAnim = _ref26.useRequestAnimationFrame,
                  useRequestAnimationFrame = _ref26$useRequestAnim === void 0 ? false : _ref26$useRequestAnim,
                  _ref26$pdfBug = _ref26.pdfBug,
                  pdfBug = _ref26$pdfBug === void 0 ? false : _ref26$pdfBug;

              _classCallCheck(this, InternalRenderTask);

              this.callback = callback;
              this.params = params;
              this.objs = objs;
              this.commonObjs = commonObjs;
              this.operatorListIdx = null;
              this.operatorList = operatorList;
              this._pageIndex = pageIndex;
              this.canvasFactory = canvasFactory;
              this.webGLContext = webGLContext;
              this._pdfBug = pdfBug;
              this.running = false;
              this.graphicsReadyCallback = null;
              this.graphicsReady = false;
              this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
              this.cancelled = false;
              this.capability = (0, _util.createPromiseCapability)();
              this.task = new RenderTask(this);
              this._cancelBound = this.cancel.bind(this);
              this._continueBound = this._continue.bind(this);
              this._scheduleNextBound = this._scheduleNext.bind(this);
              this._nextBound = this._next.bind(this);
              this._canvas = params.canvasContext.canvas;
            }

            _createClass(InternalRenderTask, [{
              key: "initializeGraphics",
              value: function initializeGraphics(_ref27) {
                var _globalThis$StepperMa;

                var _ref27$transparency = _ref27.transparency,
                    transparency = _ref27$transparency === void 0 ? false : _ref27$transparency,
                    optionalContentConfig = _ref27.optionalContentConfig;

                if (this.cancelled) {
                  return;
                }

                if (this._canvas) {
                  if (canvasInRendering.has(this._canvas)) {
                    throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");
                  }

                  canvasInRendering.add(this._canvas);
                }

                if (this._pdfBug && ((_globalThis$StepperMa = globalThis.StepperManager) === null || _globalThis$StepperMa === void 0 ? void 0 : _globalThis$StepperMa.enabled)) {
                  this.stepper = globalThis.StepperManager.create(this._pageIndex);
                  this.stepper.init(this.operatorList);
                  this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
                }

                var _this$params = this.params,
                    canvasContext = _this$params.canvasContext,
                    viewport = _this$params.viewport,
                    transform = _this$params.transform,
                    imageLayer = _this$params.imageLayer,
                    background = _this$params.background;
                this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);
                this.gfx.beginDrawing({
                  transform: transform,
                  viewport: viewport,
                  transparency: transparency,
                  background: background
                });
                this.operatorListIdx = 0;
                this.graphicsReady = true;

                if (this.graphicsReadyCallback) {
                  this.graphicsReadyCallback();
                }
              }
            }, {
              key: "cancel",
              value: function cancel() {
                var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                this.running = false;
                this.cancelled = true;

                if (this.gfx) {
                  this.gfx.endDrawing();
                }

                if (this._canvas) {
                  canvasInRendering["delete"](this._canvas);
                }

                this.callback(error || new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex + 1), "canvas"));
              }
            }, {
              key: "operatorListChanged",
              value: function operatorListChanged() {
                if (!this.graphicsReady) {
                  if (!this.graphicsReadyCallback) {
                    this.graphicsReadyCallback = this._continueBound;
                  }

                  return;
                }

                if (this.stepper) {
                  this.stepper.updateOperatorList(this.operatorList);
                }

                if (this.running) {
                  return;
                }

                this._continue();
              }
            }, {
              key: "_continue",
              value: function _continue() {
                this.running = true;

                if (this.cancelled) {
                  return;
                }

                if (this.task.onContinue) {
                  this.task.onContinue(this._scheduleNextBound);
                } else {
                  this._scheduleNext();
                }
              }
            }, {
              key: "_scheduleNext",
              value: function _scheduleNext() {
                var _this23 = this;

                if (this._useRequestAnimationFrame) {
                  window.requestAnimationFrame(function () {
                    _this23._nextBound()["catch"](_this23._cancelBound);
                  });
                } else {
                  Promise.resolve().then(this._nextBound)["catch"](this._cancelBound);
                }
              }
            }, {
              key: "_next",
              value: function () {
                var _next2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5() {
                  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if (!this.cancelled) {
                            _context5.next = 2;
                            break;
                          }

                          return _context5.abrupt("return");

                        case 2:
                          this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);

                          if (this.operatorListIdx === this.operatorList.argsArray.length) {
                            this.running = false;

                            if (this.operatorList.lastChunk) {
                              this.gfx.endDrawing();

                              if (this._canvas) {
                                canvasInRendering["delete"](this._canvas);
                              }

                              this.callback();
                            }
                          }

                        case 4:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, this);
                }));

                function _next() {
                  return _next2.apply(this, arguments);
                }

                return _next;
              }()
            }, {
              key: "completed",
              get: function get() {
                return this.capability.promise["catch"](function () {});
              }
            }]);

            return InternalRenderTask;
          }();

          return InternalRenderTask;
        }();

        var version = '2.9.79';
        exports.version = version;
        var build = 'ae48d0758';
        exports.build = build;
        /***/
      },
      /* 6 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FontLoader = exports.FontFaceObject = void 0;

        var _util = __w_pdfjs_require__(2);

        var BaseFontLoader = /*#__PURE__*/function () {
          function BaseFontLoader(_ref28) {
            var docId = _ref28.docId,
                onUnsupportedFeature = _ref28.onUnsupportedFeature,
                _ref28$ownerDocument = _ref28.ownerDocument,
                ownerDocument = _ref28$ownerDocument === void 0 ? globalThis.document : _ref28$ownerDocument;

            _classCallCheck(this, BaseFontLoader);

            if (this.constructor === BaseFontLoader) {
              (0, _util.unreachable)("Cannot initialize BaseFontLoader.");
            }

            this.docId = docId;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this._document = ownerDocument;
            this.nativeFontFaces = [];
            this.styleElement = null;
          }

          _createClass(BaseFontLoader, [{
            key: "addNativeFontFace",
            value: function addNativeFontFace(nativeFontFace) {
              this.nativeFontFaces.push(nativeFontFace);

              this._document.fonts.add(nativeFontFace);
            }
          }, {
            key: "insertRule",
            value: function insertRule(rule) {
              var styleElement = this.styleElement;

              if (!styleElement) {
                styleElement = this.styleElement = this._document.createElement("style");
                styleElement.id = "PDFJS_FONT_STYLE_TAG_".concat(this.docId);

                this._document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
              }

              var styleSheet = styleElement.sheet;
              styleSheet.insertRule(rule, styleSheet.cssRules.length);
            }
          }, {
            key: "clear",
            value: function clear() {
              var _this24 = this;

              this.nativeFontFaces.forEach(function (nativeFontFace) {
                _this24._document.fonts["delete"](nativeFontFace);
              });
              this.nativeFontFaces.length = 0;

              if (this.styleElement) {
                this.styleElement.remove();
                this.styleElement = null;
              }
            }
          }, {
            key: "bind",
            value: function () {
              var _bind = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(font) {
                var _this25 = this;

                var nativeFontFace, rule;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        if (!(font.attached || font.missingFile)) {
                          _context6.next = 2;
                          break;
                        }

                        return _context6.abrupt("return");

                      case 2:
                        font.attached = true;

                        if (!this.isFontLoadingAPISupported) {
                          _context6.next = 19;
                          break;
                        }

                        nativeFontFace = font.createNativeFontFace();

                        if (!nativeFontFace) {
                          _context6.next = 18;
                          break;
                        }

                        this.addNativeFontFace(nativeFontFace);
                        _context6.prev = 7;
                        _context6.next = 10;
                        return nativeFontFace.loaded;

                      case 10:
                        _context6.next = 18;
                        break;

                      case 12:
                        _context6.prev = 12;
                        _context6.t0 = _context6["catch"](7);

                        this._onUnsupportedFeature({
                          featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative
                        });

                        (0, _util.warn)("Failed to load font '".concat(nativeFontFace.family, "': '").concat(_context6.t0, "'."));
                        font.disableFontFace = true;
                        throw _context6.t0;

                      case 18:
                        return _context6.abrupt("return");

                      case 19:
                        rule = font.createFontFaceRule();

                        if (!rule) {
                          _context6.next = 26;
                          break;
                        }

                        this.insertRule(rule);

                        if (!this.isSyncFontLoadingSupported) {
                          _context6.next = 24;
                          break;
                        }

                        return _context6.abrupt("return");

                      case 24:
                        _context6.next = 26;
                        return new Promise(function (resolve) {
                          var request = _this25._queueLoadingCallback(resolve);

                          _this25._prepareFontLoadEvent([rule], [font], request);
                        });

                      case 26:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, this, [[7, 12]]);
              }));

              function bind(_x3) {
                return _bind.apply(this, arguments);
              }

              return bind;
            }()
          }, {
            key: "_queueLoadingCallback",
            value: function _queueLoadingCallback(callback) {
              (0, _util.unreachable)("Abstract method `_queueLoadingCallback`.");
            }
          }, {
            key: "_prepareFontLoadEvent",
            value: function _prepareFontLoadEvent(rules, fontsToLoad, request) {
              (0, _util.unreachable)("Abstract method `_prepareFontLoadEvent`.");
            }
          }, {
            key: "isFontLoadingAPISupported",
            get: function get() {
              var _this$_document;

              return (0, _util.shadow)(this, "isFontLoadingAPISupported", !!((_this$_document = this._document) === null || _this$_document === void 0 ? void 0 : _this$_document.fonts));
            }
          }, {
            key: "isSyncFontLoadingSupported",
            get: function get() {
              (0, _util.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
            }
          }, {
            key: "_loadTestFont",
            get: function get() {
              (0, _util.unreachable)("Abstract method `_loadTestFont`.");
            }
          }]);

          return BaseFontLoader;
        }();

        var FontLoader;
        exports.FontLoader = FontLoader;
        {
          exports.FontLoader = FontLoader = /*#__PURE__*/function (_BaseFontLoader) {
            _inherits(GenericFontLoader, _BaseFontLoader);

            var _super11 = _createSuper(GenericFontLoader);

            function GenericFontLoader(params) {
              var _this26;

              _classCallCheck(this, GenericFontLoader);

              _this26 = _super11.call(this, params);
              _this26.loadingContext = {
                requests: [],
                nextRequestId: 0
              };
              _this26.loadTestFontId = 0;
              return _this26;
            }

            _createClass(GenericFontLoader, [{
              key: "_queueLoadingCallback",
              value: function _queueLoadingCallback(callback) {
                function completeRequest() {
                  (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");
                  request.done = true;

                  while (context.requests.length > 0 && context.requests[0].done) {
                    var otherRequest = context.requests.shift();
                    setTimeout(otherRequest.callback, 0);
                  }
                }

                var context = this.loadingContext;
                var request = {
                  id: "pdfjs-font-loading-".concat(context.nextRequestId++),
                  done: false,
                  complete: completeRequest,
                  callback: callback
                };
                context.requests.push(request);
                return request;
              }
            }, {
              key: "_prepareFontLoadEvent",
              value: function _prepareFontLoadEvent(rules, fonts, request) {
                var _this27 = this;

                function int32(data, offset) {
                  return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
                }

                function spliceString(s, offset, remove, insert) {
                  var chunk1 = s.substring(0, offset);
                  var chunk2 = s.substring(offset + remove);
                  return chunk1 + insert + chunk2;
                }

                var i, ii;

                var canvas = this._document.createElement("canvas");

                canvas.width = 1;
                canvas.height = 1;
                var ctx = canvas.getContext("2d");
                var called = 0;

                function isFontReady(name, callback) {
                  called++;

                  if (called > 30) {
                    (0, _util.warn)("Load test font never loaded.");
                    callback();
                    return;
                  }

                  ctx.font = "30px " + name;
                  ctx.fillText(".", 0, 20);
                  var imageData = ctx.getImageData(0, 0, 1, 1);

                  if (imageData.data[3] > 0) {
                    callback();
                    return;
                  }

                  setTimeout(isFontReady.bind(null, name, callback));
                }

                var loadTestFontId = "lt".concat(Date.now()).concat(this.loadTestFontId++);
                var data = this._loadTestFont;
                var COMMENT_OFFSET = 976;
                data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
                var CFF_CHECKSUM_OFFSET = 16;
                var XXXX_VALUE = 0x58585858;
                var checksum = int32(data, CFF_CHECKSUM_OFFSET);

                for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                  checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
                }

                if (i < loadTestFontId.length) {
                  checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
                }

                data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
                var url = "url(data:font/opentype;base64,".concat(btoa(data), ");");
                var rule = "@font-face {font-family:\"".concat(loadTestFontId, "\";src:").concat(url, "}");
                this.insertRule(rule);
                var names = [];

                for (i = 0, ii = fonts.length; i < ii; i++) {
                  names.push(fonts[i].loadedName);
                }

                names.push(loadTestFontId);

                var div = this._document.createElement("div");

                div.style.visibility = "hidden";
                div.style.width = div.style.height = "10px";
                div.style.position = "absolute";
                div.style.top = div.style.left = "0px";

                for (i = 0, ii = names.length; i < ii; ++i) {
                  var span = this._document.createElement("span");

                  span.textContent = "Hi";
                  span.style.fontFamily = names[i];
                  div.appendChild(span);
                }

                this._document.body.appendChild(div);

                isFontReady(loadTestFontId, function () {
                  _this27._document.body.removeChild(div);

                  request.complete();
                });
              }
            }, {
              key: "isSyncFontLoadingSupported",
              get: function get() {
                var supported = false;

                if (typeof navigator === "undefined") {
                  supported = true;
                } else {
                  var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);

                  if ((m === null || m === void 0 ? void 0 : m[1]) >= 14) {
                    supported = true;
                  }
                }

                return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);
              }
            }, {
              key: "_loadTestFont",
              get: function get() {
                var getLoadTestFont = function getLoadTestFont() {
                  return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                };

                return (0, _util.shadow)(this, "_loadTestFont", getLoadTestFont());
              }
            }]);

            return GenericFontLoader;
          }(BaseFontLoader);
        }

        var FontFaceObject = /*#__PURE__*/function () {
          function FontFaceObject(translatedData, _ref29) {
            var _ref29$isEvalSupporte = _ref29.isEvalSupported,
                isEvalSupported = _ref29$isEvalSupporte === void 0 ? true : _ref29$isEvalSupporte,
                _ref29$disableFontFac = _ref29.disableFontFace,
                disableFontFace = _ref29$disableFontFac === void 0 ? false : _ref29$disableFontFac,
                _ref29$ignoreErrors = _ref29.ignoreErrors,
                ignoreErrors = _ref29$ignoreErrors === void 0 ? false : _ref29$ignoreErrors,
                onUnsupportedFeature = _ref29.onUnsupportedFeature,
                _ref29$fontRegistry = _ref29.fontRegistry,
                fontRegistry = _ref29$fontRegistry === void 0 ? null : _ref29$fontRegistry;

            _classCallCheck(this, FontFaceObject);

            this.compiledGlyphs = Object.create(null);

            for (var i in translatedData) {
              this[i] = translatedData[i];
            }

            this.isEvalSupported = isEvalSupported !== false;
            this.disableFontFace = disableFontFace === true;
            this.ignoreErrors = ignoreErrors === true;
            this._onUnsupportedFeature = onUnsupportedFeature;
            this.fontRegistry = fontRegistry;
          }

          _createClass(FontFaceObject, [{
            key: "createNativeFontFace",
            value: function createNativeFontFace() {
              if (!this.data || this.disableFontFace) {
                return null;
              }

              var nativeFontFace = new FontFace(this.loadedName, this.data, {});

              if (this.fontRegistry) {
                this.fontRegistry.registerFont(this);
              }

              return nativeFontFace;
            }
          }, {
            key: "createFontFaceRule",
            value: function createFontFaceRule() {
              if (!this.data || this.disableFontFace) {
                return null;
              }

              var data = (0, _util.bytesToString)(new Uint8Array(this.data));
              var url = "url(data:".concat(this.mimetype, ";base64,").concat(btoa(data), ");");
              var rule = "@font-face {font-family:\"".concat(this.loadedName, "\";src:").concat(url, "}");

              if (this.fontRegistry) {
                this.fontRegistry.registerFont(this, url);
              }

              return rule;
            }
          }, {
            key: "getPathGenerator",
            value: function getPathGenerator(objs, character) {
              if (this.compiledGlyphs[character] !== undefined) {
                return this.compiledGlyphs[character];
              }

              var cmds, current;

              try {
                cmds = objs.get(this.loadedName + "_path_" + character);
              } catch (ex) {
                if (!this.ignoreErrors) {
                  throw ex;
                }

                this._onUnsupportedFeature({
                  featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath
                });

                (0, _util.warn)("getPathGenerator - ignoring character: \"".concat(ex, "\"."));
                return this.compiledGlyphs[character] = function (c, size) {};
              }

              if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {
                var args,
                    js = "";

                for (var i = 0, ii = cmds.length; i < ii; i++) {
                  current = cmds[i];

                  if (current.args !== undefined) {
                    args = current.args.join(",");
                  } else {
                    args = "";
                  }

                  js += "c." + current.cmd + "(" + args + ");\n";
                }

                return this.compiledGlyphs[character] = new Function("c", "size", js);
              }

              return this.compiledGlyphs[character] = function (c, size) {
                for (var _i4 = 0, _ii = cmds.length; _i4 < _ii; _i4++) {
                  current = cmds[_i4];

                  if (current.cmd === "scale") {
                    current.args = [size, -size];
                  }

                  c[current.cmd].apply(c, current.args);
                }
              };
            }
          }]);

          return FontFaceObject;
        }();

        exports.FontFaceObject = FontFaceObject;
        /***/
      },
      /* 7 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;

        var _display_utils = __w_pdfjs_require__(1);

        var _is_node = __w_pdfjs_require__(4);

        var _util = __w_pdfjs_require__(2);

        var NodeCanvasFactory = function NodeCanvasFactory() {
          _classCallCheck(this, NodeCanvasFactory);

          (0, _util.unreachable)("Not implemented: NodeCanvasFactory");
        };

        exports.NodeCanvasFactory = NodeCanvasFactory;

        var NodeCMapReaderFactory = function NodeCMapReaderFactory() {
          _classCallCheck(this, NodeCMapReaderFactory);

          (0, _util.unreachable)("Not implemented: NodeCMapReaderFactory");
        };

        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;

        if (_is_node.isNodeJS) {
          exports.NodeCanvasFactory = NodeCanvasFactory = /*#__PURE__*/function (_display_utils$BaseCa) {
            _inherits(NodeCanvasFactory, _display_utils$BaseCa);

            var _super12 = _createSuper(NodeCanvasFactory);

            function NodeCanvasFactory() {
              _classCallCheck(this, NodeCanvasFactory);

              return _super12.apply(this, arguments);
            }

            _createClass(NodeCanvasFactory, [{
              key: "create",
              value: function create(width, height) {
                if (width <= 0 || height <= 0) {
                  throw new Error("Invalid canvas size");
                }

                var Canvas = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'canvas'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

                var canvas = Canvas.createCanvas(width, height);
                return {
                  canvas: canvas,
                  context: canvas.getContext("2d")
                };
              }
            }]);

            return NodeCanvasFactory;
          }(_display_utils.BaseCanvasFactory);

          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = /*#__PURE__*/function (_display_utils$BaseCM) {
            _inherits(NodeCMapReaderFactory, _display_utils$BaseCM);

            var _super13 = _createSuper(NodeCMapReaderFactory);

            function NodeCMapReaderFactory() {
              _classCallCheck(this, NodeCMapReaderFactory);

              return _super13.apply(this, arguments);
            }

            _createClass(NodeCMapReaderFactory, [{
              key: "_fetchData",
              value: function _fetchData(url, compressionType) {
                return new Promise(function (resolve, reject) {
                  var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

                  fs.readFile(url, function (error, data) {
                    if (error || !data) {
                      reject(new Error(error));
                      return;
                    }

                    resolve({
                      cMapData: new Uint8Array(data),
                      compressionType: compressionType
                    });
                  });
                });
              }
            }]);

            return NodeCMapReaderFactory;
          }(_display_utils.BaseCMapReaderFactory);
        }
        /***/

      },
      /* 8 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationStorage = void 0;

        var _util = __w_pdfjs_require__(2);

        var AnnotationStorage = /*#__PURE__*/function () {
          function AnnotationStorage() {
            _classCallCheck(this, AnnotationStorage);

            this._storage = new Map();
            this._modified = false;
            this.onSetModified = null;
            this.onResetModified = null;
          }

          _createClass(AnnotationStorage, [{
            key: "getValue",
            value: function getValue(key, defaultValue) {
              var obj = this._storage.get(key);

              return obj !== undefined ? obj : defaultValue;
            }
          }, {
            key: "setValue",
            value: function setValue(key, value) {
              var obj = this._storage.get(key);

              var modified = false;

              if (obj !== undefined) {
                for (var _i5 = 0, _Object$entries = Object.entries(value); _i5 < _Object$entries.length; _i5++) {
                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),
                      entry = _Object$entries$_i[0],
                      val = _Object$entries$_i[1];

                  if (obj[entry] !== val) {
                    modified = true;
                    obj[entry] = val;
                  }
                }
              } else {
                this._storage.set(key, value);

                modified = true;
              }

              if (modified) {
                this._setModified();
              }
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;
            }
          }, {
            key: "_setModified",
            value: function _setModified() {
              if (!this._modified) {
                this._modified = true;

                if (typeof this.onSetModified === "function") {
                  this.onSetModified();
                }
              }
            }
          }, {
            key: "resetModified",
            value: function resetModified() {
              if (this._modified) {
                this._modified = false;

                if (typeof this.onResetModified === "function") {
                  this.onResetModified();
                }
              }
            }
          }, {
            key: "size",
            get: function get() {
              return this._storage.size;
            }
          }, {
            key: "serializable",
            get: function get() {
              return this._storage.size > 0 ? this._storage : null;
            }
          }]);

          return AnnotationStorage;
        }();

        exports.AnnotationStorage = AnnotationStorage;
        /***/
      },
      /* 9 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.apiCompatibilityParams = void 0;

        var _is_node = __w_pdfjs_require__(4);

        var compatibilityParams = Object.create(null);
        {
          (function checkFontFace() {
            if (_is_node.isNodeJS) {
              compatibilityParams.disableFontFace = true;
            }
          })();
        }
        var apiCompatibilityParams = Object.freeze(compatibilityParams);
        exports.apiCompatibilityParams = apiCompatibilityParams;
        /***/
      },
      /* 10 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanvasGraphics = void 0;

        var _util = __w_pdfjs_require__(2);

        var _pattern_helper = __w_pdfjs_require__(11);

        var MIN_FONT_SIZE = 16;
        var MAX_FONT_SIZE = 100;
        var MAX_GROUP_SIZE = 4096;
        var COMPILE_TYPE3_GLYPHS = true;
        var MAX_SIZE_TO_COMPILE = 1000;
        var FULL_CHUNK_HEIGHT = 16;
        var LINEWIDTH_SCALE_FACTOR = 1.000001;

        function addContextCurrentTransform(ctx) {
          if (!ctx.mozCurrentTransform) {
            ctx._originalSave = ctx.save;
            ctx._originalRestore = ctx.restore;
            ctx._originalRotate = ctx.rotate;
            ctx._originalScale = ctx.scale;
            ctx._originalTranslate = ctx.translate;
            ctx._originalTransform = ctx.transform;
            ctx._originalSetTransform = ctx.setTransform;
            ctx._originalResetTransform = ctx.resetTransform;
            ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
            ctx._transformStack = [];

            try {
              var desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), "lineWidth");
              ctx._setLineWidth = desc.set;
              ctx._getLineWidth = desc.get;
              Object.defineProperty(ctx, "lineWidth", {
                set: function setLineWidth(width) {
                  this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);
                },
                get: function getLineWidth() {
                  return this._getLineWidth();
                }
              });
            } catch (_) {}

            Object.defineProperty(ctx, "mozCurrentTransform", {
              get: function getCurrentTransform() {
                return this._transformMatrix;
              }
            });
            Object.defineProperty(ctx, "mozCurrentTransformInverse", {
              get: function getCurrentTransformInverse() {
                var m = this._transformMatrix;
                var a = m[0],
                    b = m[1],
                    c = m[2],
                    d = m[3],
                    e = m[4],
                    f = m[5];
                var ad_bc = a * d - b * c;
                var bc_ad = b * c - a * d;
                return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
              }
            });

            ctx.save = function ctxSave() {
              var old = this._transformMatrix;

              this._transformStack.push(old);

              this._transformMatrix = old.slice(0, 6);

              this._originalSave();
            };

            ctx.restore = function ctxRestore() {
              var prev = this._transformStack.pop();

              if (prev) {
                this._transformMatrix = prev;

                this._originalRestore();
              }
            };

            ctx.translate = function ctxTranslate(x, y) {
              var m = this._transformMatrix;
              m[4] = m[0] * x + m[2] * y + m[4];
              m[5] = m[1] * x + m[3] * y + m[5];

              this._originalTranslate(x, y);
            };

            ctx.scale = function ctxScale(x, y) {
              var m = this._transformMatrix;
              m[0] = m[0] * x;
              m[1] = m[1] * x;
              m[2] = m[2] * y;
              m[3] = m[3] * y;

              this._originalScale(x, y);
            };

            ctx.transform = function ctxTransform(a, b, c, d, e, f) {
              var m = this._transformMatrix;
              this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];

              ctx._originalTransform(a, b, c, d, e, f);
            };

            ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
              this._transformMatrix = [a, b, c, d, e, f];

              ctx._originalSetTransform(a, b, c, d, e, f);
            };

            ctx.resetTransform = function ctxResetTransform() {
              this._transformMatrix = [1, 0, 0, 1, 0, 0];

              ctx._originalResetTransform();
            };

            ctx.rotate = function ctxRotate(angle) {
              var cosValue = Math.cos(angle);
              var sinValue = Math.sin(angle);
              var m = this._transformMatrix;
              this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];

              this._originalRotate(angle);
            };
          }
        }

        var CachedCanvases = function CachedCanvasesClosure() {
          function CachedCanvases(canvasFactory) {
            this.canvasFactory = canvasFactory;
            this.cache = Object.create(null);
          }

          CachedCanvases.prototype = {
            getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {
              var canvasEntry;

              if (this.cache[id] !== undefined) {
                canvasEntry = this.cache[id];
                this.canvasFactory.reset(canvasEntry, width, height);
                canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
              } else {
                canvasEntry = this.canvasFactory.create(width, height);
                this.cache[id] = canvasEntry;
              }

              if (trackTransform) {
                addContextCurrentTransform(canvasEntry.context);
              }

              return canvasEntry;
            },
            clear: function clear() {
              for (var id in this.cache) {
                var canvasEntry = this.cache[id];
                this.canvasFactory.destroy(canvasEntry);
                delete this.cache[id];
              }
            }
          };
          return CachedCanvases;
        }();

        function compileType3Glyph(imgData) {
          var POINT_TO_PROCESS_LIMIT = 1000;
          var width = imgData.width,
              height = imgData.height,
              width1 = width + 1;
          var i, ii, j, j0;
          var points = new Uint8Array(width1 * (height + 1));
          var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
          var lineSize = width + 7 & ~7,
              data0 = imgData.data;
          var data = new Uint8Array(lineSize * height);
          var pos = 0;

          for (i = 0, ii = data0.length; i < ii; i++) {
            var elem = data0[i];
            var mask = 128;

            while (mask > 0) {
              data[pos++] = elem & mask ? 0 : 255;
              mask >>= 1;
            }
          }

          var count = 0;
          pos = 0;

          if (data[pos] !== 0) {
            points[0] = 1;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j] = data[pos] ? 2 : 1;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j] = 2;
            ++count;
          }

          for (i = 1; i < height; i++) {
            pos = i * lineSize;
            j0 = i * width1;

            if (data[pos - lineSize] !== data[pos]) {
              points[j0] = data[pos] ? 1 : 8;
              ++count;
            }

            var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);

            for (j = 1; j < width; j++) {
              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);

              if (POINT_TYPES[sum]) {
                points[j0 + j] = POINT_TYPES[sum];
                ++count;
              }

              pos++;
            }

            if (data[pos - lineSize] !== data[pos]) {
              points[j0 + j] = data[pos] ? 2 : 4;
              ++count;
            }

            if (count > POINT_TO_PROCESS_LIMIT) {
              return null;
            }
          }

          pos = lineSize * (height - 1);
          j0 = i * width1;

          if (data[pos] !== 0) {
            points[j0] = 8;
            ++count;
          }

          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j0 + j] = data[pos] ? 4 : 8;
              ++count;
            }

            pos++;
          }

          if (data[pos] !== 0) {
            points[j0 + j] = 4;
            ++count;
          }

          if (count > POINT_TO_PROCESS_LIMIT) {
            return null;
          }

          var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
          var outlines = [];

          for (i = 0; count && i <= height; i++) {
            var p = i * width1;
            var end = p + width;

            while (p < end && !points[p]) {
              p++;
            }

            if (p === end) {
              continue;
            }

            var coords = [p % width1, i];
            var p0 = p;
            var type = points[p];

            do {
              var step = steps[type];

              do {
                p += step;
              } while (!points[p]);

              var pp = points[p];

              if (pp !== 5 && pp !== 10) {
                type = pp;
                points[p] = 0;
              } else {
                type = pp & 0x33 * type >> 4;
                points[p] &= type >> 2 | type << 2;
              }

              coords.push(p % width1);
              coords.push(p / width1 | 0);

              if (!points[p]) {
                --count;
              }
            } while (p0 !== p);

            outlines.push(coords);
            --i;
          }

          var drawOutline = function drawOutline(c) {
            c.save();
            c.scale(1 / width, -1 / height);
            c.translate(0, -height);
            c.beginPath();

            for (var k = 0, kk = outlines.length; k < kk; k++) {
              var o = outlines[k];
              c.moveTo(o[0], o[1]);

              for (var l = 2, ll = o.length; l < ll; l += 2) {
                c.lineTo(o[l], o[l + 1]);
              }
            }

            c.fill();
            c.beginPath();
            c.restore();
          };

          return drawOutline;
        }

        var CanvasExtraState = function CanvasExtraStateClosure() {
          function CanvasExtraState() {
            this.alphaIsShape = false;
            this.fontSize = 0;
            this.fontSizeScale = 1;
            this.textMatrix = _util.IDENTITY_MATRIX;
            this.textMatrixScale = 1;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.leading = 0;
            this.x = 0;
            this.y = 0;
            this.lineX = 0;
            this.lineY = 0;
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.textHScale = 1;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.textRise = 0;
            this.fillColor = "#000000";
            this.strokeColor = "#000000";
            this.patternFill = false;
            this.fillAlpha = 1;
            this.strokeAlpha = 1;
            this.lineWidth = 1;
            this.activeSMask = null;
            this.resumeSMaskCtx = null;
            this.transferMaps = null;
          }

          CanvasExtraState.prototype = {
            clone: function CanvasExtraState_clone() {
              return Object.create(this);
            },
            setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {
              this.x = x;
              this.y = y;
            }
          };
          return CanvasExtraState;
        }();

        var CanvasGraphics = function CanvasGraphicsClosure() {
          var EXECUTION_TIME = 15;
          var EXECUTION_STEPS = 10;

          function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {
            this.ctx = canvasCtx;
            this.current = new CanvasExtraState();
            this.stateStack = [];
            this.pendingClip = null;
            this.pendingEOFill = false;
            this.res = null;
            this.xobjs = null;
            this.commonObjs = commonObjs;
            this.objs = objs;
            this.canvasFactory = canvasFactory;
            this.webGLContext = webGLContext;
            this.imageLayer = imageLayer;
            this.groupStack = [];
            this.processingType3 = null;
            this.baseTransform = null;
            this.baseTransformStack = [];
            this.groupLevel = 0;
            this.smaskStack = [];
            this.smaskCounter = 0;
            this.tempSMask = null;
            this.contentVisible = true;
            this.markedContentStack = [];
            this.optionalContentConfig = optionalContentConfig;
            this.cachedCanvases = new CachedCanvases(this.canvasFactory);

            if (canvasCtx) {
              addContextCurrentTransform(canvasCtx);
            }

            this._cachedGetSinglePixelWidth = null;
          }

          function putBinaryImageData(ctx, imgData) {
            var transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
              ctx.putImageData(imgData, 0, 0);
              return;
            }

            var height = imgData.height,
                width = imgData.width;
            var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
            var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
            var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
            var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
            var srcPos = 0,
                destPos;
            var src = imgData.data;
            var dest = chunkImgData.data;
            var i, j, thisChunkHeight, elemsInThisChunk;
            var transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;

            if (transferMaps) {
              switch (transferMaps.length) {
                case 1:
                  transferMapRed = transferMaps[0];
                  transferMapGreen = transferMaps[0];
                  transferMapBlue = transferMaps[0];
                  transferMapGray = transferMaps[0];
                  break;

                case 4:
                  transferMapRed = transferMaps[0];
                  transferMapGreen = transferMaps[1];
                  transferMapBlue = transferMaps[2];
                  transferMapGray = transferMaps[3];
                  break;
              }
            }

            if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
              var srcLength = src.byteLength;
              var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
              var dest32DataLength = dest32.length;
              var fullSrcDiff = width + 7 >> 3;
              var white = 0xffffffff;
              var black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;

              if (transferMapGray) {
                if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {
                  var _ref30 = [black, white];
                  white = _ref30[0];
                  black = _ref30[1];
                }
              }

              for (i = 0; i < totalChunks; i++) {
                thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                destPos = 0;

                for (j = 0; j < thisChunkHeight; j++) {
                  var srcDiff = srcLength - srcPos;
                  var k = 0;
                  var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                  var kEndUnrolled = kEnd & ~7;
                  var mask = 0;
                  var srcByte = 0;

                  for (; k < kEndUnrolled; k += 8) {
                    srcByte = src[srcPos++];
                    dest32[destPos++] = srcByte & 128 ? white : black;
                    dest32[destPos++] = srcByte & 64 ? white : black;
                    dest32[destPos++] = srcByte & 32 ? white : black;
                    dest32[destPos++] = srcByte & 16 ? white : black;
                    dest32[destPos++] = srcByte & 8 ? white : black;
                    dest32[destPos++] = srcByte & 4 ? white : black;
                    dest32[destPos++] = srcByte & 2 ? white : black;
                    dest32[destPos++] = srcByte & 1 ? white : black;
                  }

                  for (; k < kEnd; k++) {
                    if (mask === 0) {
                      srcByte = src[srcPos++];
                      mask = 128;
                    }

                    dest32[destPos++] = srcByte & mask ? white : black;
                    mask >>= 1;
                  }
                }

                while (destPos < dest32DataLength) {
                  dest32[destPos++] = 0;
                }

                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
              }
            } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
              var hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
              j = 0;
              elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;

              for (i = 0; i < fullChunks; i++) {
                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                srcPos += elemsInThisChunk;

                if (hasTransferMaps) {
                  for (var _k = 0; _k < elemsInThisChunk; _k += 4) {
                    if (transferMapRed) {
                      dest[_k + 0] = transferMapRed[dest[_k + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k + 1] = transferMapGreen[dest[_k + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k + 2] = transferMapBlue[dest[_k + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, j);
                j += FULL_CHUNK_HEIGHT;
              }

              if (i < totalChunks) {
                elemsInThisChunk = width * partialChunkHeight * 4;
                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));

                if (hasTransferMaps) {
                  for (var _k2 = 0; _k2 < elemsInThisChunk; _k2 += 4) {
                    if (transferMapRed) {
                      dest[_k2 + 0] = transferMapRed[dest[_k2 + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k2 + 1] = transferMapGreen[dest[_k2 + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k2 + 2] = transferMapBlue[dest[_k2 + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, j);
              }
            } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
              var _hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);

              thisChunkHeight = FULL_CHUNK_HEIGHT;
              elemsInThisChunk = width * thisChunkHeight;

              for (i = 0; i < totalChunks; i++) {
                if (i >= fullChunks) {
                  thisChunkHeight = partialChunkHeight;
                  elemsInThisChunk = width * thisChunkHeight;
                }

                destPos = 0;

                for (j = elemsInThisChunk; j--;) {
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = src[srcPos++];
                  dest[destPos++] = 255;
                }

                if (_hasTransferMaps) {
                  for (var _k3 = 0; _k3 < destPos; _k3 += 4) {
                    if (transferMapRed) {
                      dest[_k3 + 0] = transferMapRed[dest[_k3 + 0]];
                    }

                    if (transferMapGreen) {
                      dest[_k3 + 1] = transferMapGreen[dest[_k3 + 1]];
                    }

                    if (transferMapBlue) {
                      dest[_k3 + 2] = transferMapBlue[dest[_k3 + 2]];
                    }
                  }
                }

                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
              }
            } else {
              throw new Error("bad image kind: ".concat(imgData.kind));
            }
          }

          function putBinaryImageMask(ctx, imgData) {
            var height = imgData.height,
                width = imgData.width;
            var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
            var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
            var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
            var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
            var srcPos = 0;
            var src = imgData.data;
            var dest = chunkImgData.data;

            for (var i = 0; i < totalChunks; i++) {
              var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
              var destPos = 3;

              for (var j = 0; j < thisChunkHeight; j++) {
                var elem = void 0,
                    mask = 0;

                for (var k = 0; k < width; k++) {
                  if (!mask) {
                    elem = src[srcPos++];
                    mask = 128;
                  }

                  dest[destPos] = elem & mask ? 0 : 255;
                  destPos += 4;
                  mask >>= 1;
                }
              }

              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          }

          function copyCtxState(sourceCtx, destCtx) {
            var properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];

            for (var i = 0, ii = properties.length; i < ii; i++) {
              var property = properties[i];

              if (sourceCtx[property] !== undefined) {
                destCtx[property] = sourceCtx[property];
              }
            }

            if (sourceCtx.setLineDash !== undefined) {
              destCtx.setLineDash(sourceCtx.getLineDash());
              destCtx.lineDashOffset = sourceCtx.lineDashOffset;
            }
          }

          function resetCtxToDefault(ctx) {
            ctx.strokeStyle = "#000000";
            ctx.fillStyle = "#000000";
            ctx.fillRule = "nonzero";
            ctx.globalAlpha = 1;
            ctx.lineWidth = 1;
            ctx.lineCap = "butt";
            ctx.lineJoin = "miter";
            ctx.miterLimit = 10;
            ctx.globalCompositeOperation = "source-over";
            ctx.font = "10px sans-serif";

            if (ctx.setLineDash !== undefined) {
              ctx.setLineDash([]);
              ctx.lineDashOffset = 0;
            }
          }

          function composeSMaskBackdrop(bytes, r0, g0, b0) {
            var length = bytes.length;

            for (var i = 3; i < length; i += 4) {
              var alpha = bytes[i];

              if (alpha === 0) {
                bytes[i - 3] = r0;
                bytes[i - 2] = g0;
                bytes[i - 1] = b0;
              } else if (alpha < 255) {
                var alpha_ = 255 - alpha;
                bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
                bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
                bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
              }
            }
          }

          function composeSMaskAlpha(maskData, layerData, transferMap) {
            var length = maskData.length;
            var scale = 1 / 255;

            for (var i = 3; i < length; i += 4) {
              var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
              layerData[i] = layerData[i] * alpha * scale | 0;
            }
          }

          function composeSMaskLuminosity(maskData, layerData, transferMap) {
            var length = maskData.length;

            for (var i = 3; i < length; i += 4) {
              var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
              layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
            }
          }

          function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {
            var hasBackdrop = !!backdrop;
            var r0 = hasBackdrop ? backdrop[0] : 0;
            var g0 = hasBackdrop ? backdrop[1] : 0;
            var b0 = hasBackdrop ? backdrop[2] : 0;
            var composeFn;

            if (subtype === "Luminosity") {
              composeFn = composeSMaskLuminosity;
            } else {
              composeFn = composeSMaskAlpha;
            }

            var PIXELS_TO_PROCESS = 1048576;
            var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));

            for (var row = 0; row < height; row += chunkSize) {
              var chunkHeight = Math.min(chunkSize, height - row);
              var maskData = maskCtx.getImageData(0, row, width, chunkHeight);
              var layerData = layerCtx.getImageData(0, row, width, chunkHeight);

              if (hasBackdrop) {
                composeSMaskBackdrop(maskData.data, r0, g0, b0);
              }

              composeFn(maskData.data, layerData.data, transferMap);
              maskCtx.putImageData(layerData, 0, row);
            }
          }

          function composeSMask(ctx, smask, layerCtx, webGLContext) {
            var mask = smask.canvas;
            var maskCtx = smask.context;
            ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);
            var backdrop = smask.backdrop || null;

            if (!smask.transferMap && webGLContext.isEnabled) {
              var composed = webGLContext.composeSMask({
                layer: layerCtx.canvas,
                mask: mask,
                properties: {
                  subtype: smask.subtype,
                  backdrop: backdrop
                }
              });
              ctx.setTransform(1, 0, 0, 1, 0, 0);
              ctx.drawImage(composed, smask.offsetX, smask.offsetY);
              return;
            }

            genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);
            ctx.drawImage(mask, 0, 0);
          }

          var LINE_CAP_STYLES = ["butt", "round", "square"];
          var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
          var NORMAL_CLIP = {};
          var EO_CLIP = {};
          CanvasGraphics.prototype = {
            beginDrawing: function beginDrawing(_ref31) {
              var transform = _ref31.transform,
                  viewport = _ref31.viewport,
                  _ref31$transparency = _ref31.transparency,
                  transparency = _ref31$transparency === void 0 ? false : _ref31$transparency,
                  _ref31$background = _ref31.background,
                  background = _ref31$background === void 0 ? null : _ref31$background;
              var width = this.ctx.canvas.width;
              var height = this.ctx.canvas.height;
              this.ctx.save();
              this.ctx.fillStyle = background || "rgb(255, 255, 255)";
              this.ctx.fillRect(0, 0, width, height);
              this.ctx.restore();

              if (transparency) {
                var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);
                this.compositeCtx = this.ctx;
                this.transparentCanvas = transparentCanvas.canvas;
                this.ctx = transparentCanvas.context;
                this.ctx.save();
                this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
              }

              this.ctx.save();
              resetCtxToDefault(this.ctx);

              if (transform) {
                this.ctx.transform.apply(this.ctx, transform);
              }

              this.ctx.transform.apply(this.ctx, viewport.transform);
              this.baseTransform = this.ctx.mozCurrentTransform.slice();
              this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);

              if (this.imageLayer) {
                this.imageLayer.beginLayout();
              }
            },
            executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
              var argsArray = operatorList.argsArray;
              var fnArray = operatorList.fnArray;
              var i = executionStartIdx || 0;
              var argsArrayLen = argsArray.length;

              if (argsArrayLen === i) {
                return i;
              }

              var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
              var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
              var steps = 0;
              var commonObjs = this.commonObjs;
              var objs = this.objs;
              var fnId;

              while (true) {
                if (stepper !== undefined && i === stepper.nextBreakPoint) {
                  stepper.breakIt(i, continueCallback);
                  return i;
                }

                fnId = fnArray[i];

                if (fnId !== _util.OPS.dependency) {
                  this[fnId].apply(this, argsArray[i]);
                } else {
                  var _iterator17 = _createForOfIteratorHelper(argsArray[i]),
                      _step17;

                  try {
                    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                      var depObjId = _step17.value;
                      var objsPool = depObjId.startsWith("g_") ? commonObjs : objs;

                      if (!objsPool.has(depObjId)) {
                        objsPool.get(depObjId, continueCallback);
                        return i;
                      }
                    }
                  } catch (err) {
                    _iterator17.e(err);
                  } finally {
                    _iterator17.f();
                  }
                }

                i++;

                if (i === argsArrayLen) {
                  return i;
                }

                if (chunkOperations && ++steps > EXECUTION_STEPS) {
                  if (Date.now() > endTime) {
                    continueCallback();
                    return i;
                  }

                  steps = 0;
                }
              }
            },
            endDrawing: function CanvasGraphics_endDrawing() {
              while (this.stateStack.length || this.current.activeSMask !== null) {
                this.restore();
              }

              this.ctx.restore();

              if (this.transparentCanvas) {
                this.ctx = this.compositeCtx;
                this.ctx.save();
                this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                this.ctx.drawImage(this.transparentCanvas, 0, 0);
                this.ctx.restore();
                this.transparentCanvas = null;
              }

              this.cachedCanvases.clear();
              this.webGLContext.clear();

              if (this.imageLayer) {
                this.imageLayer.endLayout();
              }
            },
            setLineWidth: function CanvasGraphics_setLineWidth(width) {
              this.current.lineWidth = width;
              this.ctx.lineWidth = width;
            },
            setLineCap: function CanvasGraphics_setLineCap(style) {
              this.ctx.lineCap = LINE_CAP_STYLES[style];
            },
            setLineJoin: function CanvasGraphics_setLineJoin(style) {
              this.ctx.lineJoin = LINE_JOIN_STYLES[style];
            },
            setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {
              this.ctx.miterLimit = limit;
            },
            setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {
              var ctx = this.ctx;

              if (ctx.setLineDash !== undefined) {
                ctx.setLineDash(dashArray);
                ctx.lineDashOffset = dashPhase;
              }
            },
            setRenderingIntent: function setRenderingIntent(intent) {},
            setFlatness: function setFlatness(flatness) {},
            setGState: function CanvasGraphics_setGState(states) {
              for (var i = 0, ii = states.length; i < ii; i++) {
                var state = states[i];
                var key = state[0];
                var value = state[1];

                switch (key) {
                  case "LW":
                    this.setLineWidth(value);
                    break;

                  case "LC":
                    this.setLineCap(value);
                    break;

                  case "LJ":
                    this.setLineJoin(value);
                    break;

                  case "ML":
                    this.setMiterLimit(value);
                    break;

                  case "D":
                    this.setDash(value[0], value[1]);
                    break;

                  case "RI":
                    this.setRenderingIntent(value);
                    break;

                  case "FL":
                    this.setFlatness(value);
                    break;

                  case "Font":
                    this.setFont(value[0], value[1]);
                    break;

                  case "CA":
                    this.current.strokeAlpha = state[1];
                    break;

                  case "ca":
                    this.current.fillAlpha = state[1];
                    this.ctx.globalAlpha = state[1];
                    break;

                  case "BM":
                    this.ctx.globalCompositeOperation = value;
                    break;

                  case "SMask":
                    if (this.current.activeSMask) {
                      if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {
                        this.suspendSMaskGroup();
                      } else {
                        this.endSMaskGroup();
                      }
                    }

                    this.current.activeSMask = value ? this.tempSMask : null;

                    if (this.current.activeSMask) {
                      this.beginSMaskGroup();
                    }

                    this.tempSMask = null;
                    break;

                  case "TR":
                    this.current.transferMaps = value;
                }
              }
            },
            beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {
              var activeSMask = this.current.activeSMask;
              var drawnWidth = activeSMask.canvas.width;
              var drawnHeight = activeSMask.canvas.height;
              var cacheId = "smaskGroupAt" + this.groupLevel;
              var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
              var currentCtx = this.ctx;
              var currentTransform = currentCtx.mozCurrentTransform;
              this.ctx.save();
              var groupCtx = scratchCanvas.context;
              groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);
              groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);
              groupCtx.transform.apply(groupCtx, currentTransform);
              activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;
              copyCtxState(currentCtx, groupCtx);
              this.ctx = groupCtx;
              this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
              this.groupStack.push(currentCtx);
              this.groupLevel++;
            },
            suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {
              var groupCtx = this.ctx;
              this.groupLevel--;
              this.ctx = this.groupStack.pop();
              composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);
              this.ctx.restore();
              this.ctx.save();
              copyCtxState(groupCtx, this.ctx);
              this.current.resumeSMaskCtx = groupCtx;

              var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);

              this.ctx.transform.apply(this.ctx, deltaTransform);
              groupCtx.save();
              groupCtx.setTransform(1, 0, 0, 1, 0, 0);
              groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);
              groupCtx.restore();
            },
            resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {
              var groupCtx = this.current.resumeSMaskCtx;
              var currentCtx = this.ctx;
              this.ctx = groupCtx;
              this.groupStack.push(currentCtx);
              this.groupLevel++;
            },
            endSMaskGroup: function CanvasGraphics_endSMaskGroup() {
              var groupCtx = this.ctx;
              this.groupLevel--;
              this.ctx = this.groupStack.pop();
              composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);
              this.ctx.restore();
              copyCtxState(groupCtx, this.ctx);

              var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);

              this.ctx.transform.apply(this.ctx, deltaTransform);
            },
            save: function CanvasGraphics_save() {
              this.ctx.save();
              var old = this.current;
              this.stateStack.push(old);
              this.current = old.clone();
              this.current.resumeSMaskCtx = null;
            },
            restore: function CanvasGraphics_restore() {
              if (this.current.resumeSMaskCtx) {
                this.resumeSMaskGroup();
              }

              if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {
                this.endSMaskGroup();
              }

              if (this.stateStack.length !== 0) {
                this.current = this.stateStack.pop();
                this.ctx.restore();
                this.pendingClip = null;
                this._cachedGetSinglePixelWidth = null;
              } else {
                this.current.activeSMask = null;
              }
            },
            transform: function CanvasGraphics_transform(a, b, c, d, e, f) {
              this.ctx.transform(a, b, c, d, e, f);
              this._cachedGetSinglePixelWidth = null;
            },
            constructPath: function CanvasGraphics_constructPath(ops, args) {
              var ctx = this.ctx;
              var current = this.current;
              var x = current.x,
                  y = current.y;

              for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                switch (ops[i] | 0) {
                  case _util.OPS.rectangle:
                    x = args[j++];
                    y = args[j++];
                    var width = args[j++];
                    var height = args[j++];
                    var xw = x + width;
                    var yh = y + height;
                    ctx.moveTo(x, y);

                    if (width === 0 || height === 0) {
                      ctx.lineTo(xw, yh);
                    } else {
                      ctx.lineTo(xw, y);
                      ctx.lineTo(xw, yh);
                      ctx.lineTo(x, yh);
                    }

                    ctx.closePath();
                    break;

                  case _util.OPS.moveTo:
                    x = args[j++];
                    y = args[j++];
                    ctx.moveTo(x, y);
                    break;

                  case _util.OPS.lineTo:
                    x = args[j++];
                    y = args[j++];
                    ctx.lineTo(x, y);
                    break;

                  case _util.OPS.curveTo:
                    x = args[j + 4];
                    y = args[j + 5];
                    ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                    j += 6;
                    break;

                  case _util.OPS.curveTo2:
                    ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                    x = args[j + 2];
                    y = args[j + 3];
                    j += 4;
                    break;

                  case _util.OPS.curveTo3:
                    x = args[j + 2];
                    y = args[j + 3];
                    ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                    j += 4;
                    break;

                  case _util.OPS.closePath:
                    ctx.closePath();
                    break;
                }
              }

              current.setCurrentPoint(x, y);
            },
            closePath: function CanvasGraphics_closePath() {
              this.ctx.closePath();
            },
            stroke: function CanvasGraphics_stroke(consumePath) {
              consumePath = typeof consumePath !== "undefined" ? consumePath : true;
              var ctx = this.ctx;
              var strokeColor = this.current.strokeColor;
              ctx.globalAlpha = this.current.strokeAlpha;

              if (this.contentVisible) {
                if (_typeof(strokeColor) === "object" && (strokeColor === null || strokeColor === void 0 ? void 0 : strokeColor.getPattern)) {
                  ctx.save();
                  var transform = ctx.mozCurrentTransform;

                  var scale = _util.Util.singularValueDecompose2dScale(transform)[0];

                  ctx.strokeStyle = strokeColor.getPattern(ctx, this);
                  var lineWidth = this.getSinglePixelWidth();
                  var scaledLineWidth = this.current.lineWidth * scale;

                  if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {
                    ctx.resetTransform();
                    ctx.lineWidth = Math.round(this._combinedScaleFactor);
                  } else {
                    ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);
                  }

                  ctx.stroke();
                  ctx.restore();
                } else {
                  var _lineWidth = this.getSinglePixelWidth();

                  if (_lineWidth < 0 && -_lineWidth >= this.current.lineWidth) {
                    ctx.save();
                    ctx.resetTransform();
                    ctx.lineWidth = Math.round(this._combinedScaleFactor);
                    ctx.stroke();
                    ctx.restore();
                  } else {
                    ctx.lineWidth = Math.max(_lineWidth, this.current.lineWidth);
                    ctx.stroke();
                  }
                }
              }

              if (consumePath) {
                this.consumePath();
              }

              ctx.globalAlpha = this.current.fillAlpha;
            },
            closeStroke: function CanvasGraphics_closeStroke() {
              this.closePath();
              this.stroke();
            },
            fill: function CanvasGraphics_fill(consumePath) {
              consumePath = typeof consumePath !== "undefined" ? consumePath : true;
              var ctx = this.ctx;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var needRestore = false;

              if (isPatternFill) {
                ctx.save();

                if (this.baseTransform) {
                  ctx.setTransform.apply(ctx, this.baseTransform);
                }

                ctx.fillStyle = fillColor.getPattern(ctx, this);
                needRestore = true;
              }

              if (this.contentVisible) {
                if (this.pendingEOFill) {
                  ctx.fill("evenodd");
                  this.pendingEOFill = false;
                } else {
                  ctx.fill();
                }
              }

              if (needRestore) {
                ctx.restore();
              }

              if (consumePath) {
                this.consumePath();
              }
            },
            eoFill: function CanvasGraphics_eoFill() {
              this.pendingEOFill = true;
              this.fill();
            },
            fillStroke: function CanvasGraphics_fillStroke() {
              this.fill(false);
              this.stroke(false);
              this.consumePath();
            },
            eoFillStroke: function CanvasGraphics_eoFillStroke() {
              this.pendingEOFill = true;
              this.fillStroke();
            },
            closeFillStroke: function CanvasGraphics_closeFillStroke() {
              this.closePath();
              this.fillStroke();
            },
            closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {
              this.pendingEOFill = true;
              this.closePath();
              this.fillStroke();
            },
            endPath: function CanvasGraphics_endPath() {
              this.consumePath();
            },
            clip: function CanvasGraphics_clip() {
              this.pendingClip = NORMAL_CLIP;
            },
            eoClip: function CanvasGraphics_eoClip() {
              this.pendingClip = EO_CLIP;
            },
            beginText: function CanvasGraphics_beginText() {
              this.current.textMatrix = _util.IDENTITY_MATRIX;
              this.current.textMatrixScale = 1;
              this.current.x = this.current.lineX = 0;
              this.current.y = this.current.lineY = 0;
            },
            endText: function CanvasGraphics_endText() {
              var paths = this.pendingTextPaths;
              var ctx = this.ctx;

              if (paths === undefined) {
                ctx.beginPath();
                return;
              }

              ctx.save();
              ctx.beginPath();

              for (var i = 0; i < paths.length; i++) {
                var path = paths[i];
                ctx.setTransform.apply(ctx, path.transform);
                ctx.translate(path.x, path.y);
                path.addToPath(ctx, path.fontSize);
              }

              ctx.restore();
              ctx.clip();
              ctx.beginPath();
              delete this.pendingTextPaths;
            },
            setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {
              this.current.charSpacing = spacing;
            },
            setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {
              this.current.wordSpacing = spacing;
            },
            setHScale: function CanvasGraphics_setHScale(scale) {
              this.current.textHScale = scale / 100;
            },
            setLeading: function CanvasGraphics_setLeading(leading) {
              this.current.leading = -leading;
            },
            setFont: function CanvasGraphics_setFont(fontRefName, size) {
              var fontObj = this.commonObjs.get(fontRefName);
              var current = this.current;

              if (!fontObj) {
                throw new Error("Can't find font for ".concat(fontRefName));
              }

              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;

              if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                (0, _util.warn)("Invalid font matrix for font " + fontRefName);
              }

              if (size < 0) {
                size = -size;
                current.fontDirection = -1;
              } else {
                current.fontDirection = 1;
              }

              this.current.font = fontObj;
              this.current.fontSize = size;

              if (fontObj.isType3Font) {
                return;
              }

              var name = fontObj.loadedName || "sans-serif";
              var bold = "normal";

              if (fontObj.black) {
                bold = "900";
              } else if (fontObj.bold) {
                bold = "bold";
              }

              var italic = fontObj.italic ? "italic" : "normal";
              var typeface = "\"".concat(name, "\", ").concat(fontObj.fallbackName);
              var browserFontSize = size;

              if (size < MIN_FONT_SIZE) {
                browserFontSize = MIN_FONT_SIZE;
              } else if (size > MAX_FONT_SIZE) {
                browserFontSize = MAX_FONT_SIZE;
              }

              this.current.fontSizeScale = size / browserFontSize;
              this.ctx.font = "".concat(italic, " ").concat(bold, " ").concat(browserFontSize, "px ").concat(typeface);
            },
            setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {
              this.current.textRenderingMode = mode;
            },
            setTextRise: function CanvasGraphics_setTextRise(rise) {
              this.current.textRise = rise;
            },
            moveText: function CanvasGraphics_moveText(x, y) {
              this.current.x = this.current.lineX += x;
              this.current.y = this.current.lineY += y;
            },
            setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {
              this.setLeading(-y);
              this.moveText(x, y);
            },
            setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {
              this.current.textMatrix = [a, b, c, d, e, f];
              this.current.textMatrixScale = Math.hypot(a, b);
              this.current.x = this.current.lineX = 0;
              this.current.y = this.current.lineY = 0;
            },
            nextLine: function CanvasGraphics_nextLine() {
              this.moveText(0, this.current.leading);
            },
            paintChar: function paintChar(character, x, y, patternTransform, resetLineWidthToOne) {
              var ctx = this.ctx;
              var current = this.current;
              var font = current.font;
              var textRenderingMode = current.textRenderingMode;
              var fontSize = current.fontSize / current.fontSizeScale;
              var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
              var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
              var patternFill = current.patternFill && !font.missingFile;
              var addToPath;

              if (font.disableFontFace || isAddToPathSet || patternFill) {
                addToPath = font.getPathGenerator(this.commonObjs, character);
              }

              if (font.disableFontFace || patternFill) {
                ctx.save();
                ctx.translate(x, y);
                ctx.beginPath();
                addToPath(ctx, fontSize);

                if (patternTransform) {
                  ctx.setTransform.apply(ctx, patternTransform);
                }

                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.fill();
                }

                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  if (resetLineWidthToOne) {
                    ctx.resetTransform();
                    ctx.lineWidth = Math.round(this._combinedScaleFactor);
                  }

                  ctx.stroke();
                }

                ctx.restore();
              } else {
                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.fillText(character, x, y);
                }

                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  if (resetLineWidthToOne) {
                    ctx.save();
                    ctx.moveTo(x, y);
                    ctx.resetTransform();
                    ctx.lineWidth = Math.round(this._combinedScaleFactor);
                    ctx.strokeText(character, 0, 0);
                    ctx.restore();
                  } else {
                    ctx.strokeText(character, x, y);
                  }
                }
              }

              if (isAddToPathSet) {
                var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
                paths.push({
                  transform: ctx.mozCurrentTransform,
                  x: x,
                  y: y,
                  fontSize: fontSize,
                  addToPath: addToPath
                });
              }
            },

            get isFontSubpixelAAEnabled() {
              var _this$cachedCanvases$ = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10),
                  ctx = _this$cachedCanvases$.context;

              ctx.scale(1.5, 1);
              ctx.fillText("I", 0, 10);
              var data = ctx.getImageData(0, 0, 10, 10).data;
              var enabled = false;

              for (var i = 3; i < data.length; i += 4) {
                if (data[i] > 0 && data[i] < 255) {
                  enabled = true;
                  break;
                }
              }

              return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);
            },

            showText: function CanvasGraphics_showText(glyphs) {
              var current = this.current;
              var font = current.font;

              if (font.isType3Font) {
                return this.showType3Text(glyphs);
              }

              var fontSize = current.fontSize;

              if (fontSize === 0) {
                return undefined;
              }

              var ctx = this.ctx;
              var fontSizeScale = current.fontSizeScale;
              var charSpacing = current.charSpacing;
              var wordSpacing = current.wordSpacing;
              var fontDirection = current.fontDirection;
              var textHScale = current.textHScale * fontDirection;
              var glyphsLength = glyphs.length;
              var vertical = font.vertical;
              var spacingDir = vertical ? 1 : -1;
              var defaultVMetrics = font.defaultVMetrics;
              var widthAdvanceScale = fontSize * current.fontMatrix[0];
              var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
              ctx.save();
              var patternTransform;

              if (current.patternFill) {
                ctx.save();
                var pattern = current.fillColor.getPattern(ctx, this);
                patternTransform = ctx.mozCurrentTransform;
                ctx.restore();
                ctx.fillStyle = pattern;
              }

              ctx.transform.apply(ctx, current.textMatrix);
              ctx.translate(current.x, current.y + current.textRise);

              if (fontDirection > 0) {
                ctx.scale(textHScale, -1);
              } else {
                ctx.scale(textHScale, 1);
              }

              var lineWidth = current.lineWidth;
              var resetLineWidthToOne = false;
              var scale = current.textMatrixScale;

              if (scale === 0 || lineWidth === 0) {
                var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  this._cachedGetSinglePixelWidth = null;
                  lineWidth = this.getSinglePixelWidth();
                  resetLineWidthToOne = lineWidth < 0;
                }
              } else {
                lineWidth /= scale;
              }

              if (fontSizeScale !== 1.0) {
                ctx.scale(fontSizeScale, fontSizeScale);
                lineWidth /= fontSizeScale;
              }

              ctx.lineWidth = lineWidth;
              var x = 0,
                  i;

              for (i = 0; i < glyphsLength; ++i) {
                var glyph = glyphs[i];

                if ((0, _util.isNum)(glyph)) {
                  x += spacingDir * glyph * fontSize / 1000;
                  continue;
                }

                var restoreNeeded = false;
                var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                var character = glyph.fontChar;
                var accent = glyph.accent;
                var scaledX = void 0,
                    scaledY = void 0;
                var width = glyph.width;

                if (vertical) {
                  var vmetric = glyph.vmetric || defaultVMetrics;
                  var vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
                  var vy = vmetric[2] * widthAdvanceScale;
                  width = vmetric ? -vmetric[0] : width;
                  scaledX = vx / fontSizeScale;
                  scaledY = (x + vy) / fontSizeScale;
                } else {
                  scaledX = x / fontSizeScale;
                  scaledY = 0;
                }

                if (font.remeasure && width > 0) {
                  var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;

                  if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                    var characterScaleX = width / measuredWidth;
                    restoreNeeded = true;
                    ctx.save();
                    ctx.scale(characterScaleX, 1);
                    scaledX /= characterScaleX;
                  } else if (width !== measuredWidth) {
                    scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;
                  }
                }

                if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
                  if (simpleFillText && !accent) {
                    ctx.fillText(character, scaledX, scaledY);
                  } else {
                    this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);

                    if (accent) {
                      var scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                      var scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                      this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);
                    }
                  }
                }

                var charWidth = void 0;

                if (vertical) {
                  charWidth = width * widthAdvanceScale - spacing * fontDirection;
                } else {
                  charWidth = width * widthAdvanceScale + spacing * fontDirection;
                }

                x += charWidth;

                if (restoreNeeded) {
                  ctx.restore();
                }
              }

              if (vertical) {
                current.y -= x;
              } else {
                current.x += x * textHScale;
              }

              ctx.restore();
            },
            showType3Text: function CanvasGraphics_showType3Text(glyphs) {
              var ctx = this.ctx;
              var current = this.current;
              var font = current.font;
              var fontSize = current.fontSize;
              var fontDirection = current.fontDirection;
              var spacingDir = font.vertical ? 1 : -1;
              var charSpacing = current.charSpacing;
              var wordSpacing = current.wordSpacing;
              var textHScale = current.textHScale * fontDirection;
              var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              var glyphsLength = glyphs.length;
              var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
              var i, glyph, width, spacingLength;

              if (isTextInvisible || fontSize === 0) {
                return;
              }

              this._cachedGetSinglePixelWidth = null;
              ctx.save();
              ctx.transform.apply(ctx, current.textMatrix);
              ctx.translate(current.x, current.y);
              ctx.scale(textHScale, fontDirection);

              for (i = 0; i < glyphsLength; ++i) {
                glyph = glyphs[i];

                if ((0, _util.isNum)(glyph)) {
                  spacingLength = spacingDir * glyph * fontSize / 1000;
                  this.ctx.translate(spacingLength, 0);
                  current.x += spacingLength * textHScale;
                  continue;
                }

                var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                var operatorList = font.charProcOperatorList[glyph.operatorListId];

                if (!operatorList) {
                  (0, _util.warn)("Type3 character \"".concat(glyph.operatorListId, "\" is not available."));
                  continue;
                }

                if (this.contentVisible) {
                  this.processingType3 = glyph;
                  this.save();
                  ctx.scale(fontSize, fontSize);
                  ctx.transform.apply(ctx, fontMatrix);
                  this.executeOperatorList(operatorList);
                  this.restore();
                }

                var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);

                width = transformed[0] * fontSize + spacing;
                ctx.translate(width, 0);
                current.x += width * textHScale;
              }

              ctx.restore();
              this.processingType3 = null;
            },
            setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},
            setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
              this.ctx.rect(llx, lly, urx - llx, ury - lly);
              this.clip();
              this.endPath();
            },
            getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {
              var _this28 = this;

              var pattern;

              if (IR[0] === "TilingPattern") {
                var color = IR[1];
                var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
                var canvasGraphicsFactory = {
                  createCanvasGraphics: function createCanvasGraphics(ctx) {
                    return new CanvasGraphics(ctx, _this28.commonObjs, _this28.objs, _this28.canvasFactory, _this28.webGLContext);
                  }
                };
                pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
              } else {
                pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);
              }

              return pattern;
            },
            setStrokeColorN: function CanvasGraphics_setStrokeColorN() {
              this.current.strokeColor = this.getColorN_Pattern(arguments);
            },
            setFillColorN: function CanvasGraphics_setFillColorN() {
              this.current.fillColor = this.getColorN_Pattern(arguments);
              this.current.patternFill = true;
            },
            setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {
              var color = _util.Util.makeHexColor(r, g, b);

              this.ctx.strokeStyle = color;
              this.current.strokeColor = color;
            },
            setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {
              var color = _util.Util.makeHexColor(r, g, b);

              this.ctx.fillStyle = color;
              this.current.fillColor = color;
              this.current.patternFill = false;
            },
            shadingFill: function CanvasGraphics_shadingFill(patternIR) {
              if (!this.contentVisible) {
                return;
              }

              var ctx = this.ctx;
              this.save();
              var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);
              ctx.fillStyle = pattern.getPattern(ctx, this, true);
              var inv = ctx.mozCurrentTransformInverse;

              if (inv) {
                var canvas = ctx.canvas;
                var width = canvas.width;
                var height = canvas.height;

                var bl = _util.Util.applyTransform([0, 0], inv);

                var br = _util.Util.applyTransform([0, height], inv);

                var ul = _util.Util.applyTransform([width, 0], inv);

                var ur = _util.Util.applyTransform([width, height], inv);

                var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
              } else {
                this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
              }

              this.restore();
            },
            beginInlineImage: function CanvasGraphics_beginInlineImage() {
              (0, _util.unreachable)("Should not call beginInlineImage");
            },
            beginImageData: function CanvasGraphics_beginImageData() {
              (0, _util.unreachable)("Should not call beginImageData");
            },
            paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {
              if (!this.contentVisible) {
                return;
              }

              this.save();
              this.baseTransformStack.push(this.baseTransform);

              if (Array.isArray(matrix) && matrix.length === 6) {
                this.transform.apply(this, matrix);
              }

              this.baseTransform = this.ctx.mozCurrentTransform;

              if (bbox) {
                var width = bbox[2] - bbox[0];
                var height = bbox[3] - bbox[1];
                this.ctx.rect(bbox[0], bbox[1], width, height);
                this.clip();
                this.endPath();
              }
            },
            paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {
              if (!this.contentVisible) {
                return;
              }

              this.restore();
              this.baseTransform = this.baseTransformStack.pop();
            },
            beginGroup: function CanvasGraphics_beginGroup(group) {
              if (!this.contentVisible) {
                return;
              }

              this.save();
              var currentCtx = this.ctx;

              if (!group.isolated) {
                (0, _util.info)("TODO: Support non-isolated groups.");
              }

              if (group.knockout) {
                (0, _util.warn)("Knockout groups not supported.");
              }

              var currentTransform = currentCtx.mozCurrentTransform;

              if (group.matrix) {
                currentCtx.transform.apply(currentCtx, group.matrix);
              }

              if (!group.bbox) {
                throw new Error("Bounding box is required.");
              }

              var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);

              var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
              bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
              var offsetX = Math.floor(bounds[0]);
              var offsetY = Math.floor(bounds[1]);
              var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
              var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
              var scaleX = 1,
                  scaleY = 1;

              if (drawnWidth > MAX_GROUP_SIZE) {
                scaleX = drawnWidth / MAX_GROUP_SIZE;
                drawnWidth = MAX_GROUP_SIZE;
              }

              if (drawnHeight > MAX_GROUP_SIZE) {
                scaleY = drawnHeight / MAX_GROUP_SIZE;
                drawnHeight = MAX_GROUP_SIZE;
              }

              var cacheId = "groupAt" + this.groupLevel;

              if (group.smask) {
                cacheId += "_smask_" + this.smaskCounter++ % 2;
              }

              var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
              var groupCtx = scratchCanvas.context;
              groupCtx.scale(1 / scaleX, 1 / scaleY);
              groupCtx.translate(-offsetX, -offsetY);
              groupCtx.transform.apply(groupCtx, currentTransform);

              if (group.smask) {
                this.smaskStack.push({
                  canvas: scratchCanvas.canvas,
                  context: groupCtx,
                  offsetX: offsetX,
                  offsetY: offsetY,
                  scaleX: scaleX,
                  scaleY: scaleY,
                  subtype: group.smask.subtype,
                  backdrop: group.smask.backdrop,
                  transferMap: group.smask.transferMap || null,
                  startTransformInverse: null
                });
              } else {
                currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                currentCtx.translate(offsetX, offsetY);
                currentCtx.scale(scaleX, scaleY);
              }

              copyCtxState(currentCtx, groupCtx);
              this.ctx = groupCtx;
              this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
              this.groupStack.push(currentCtx);
              this.groupLevel++;
              this.current.activeSMask = null;
            },
            endGroup: function CanvasGraphics_endGroup(group) {
              if (!this.contentVisible) {
                return;
              }

              this.groupLevel--;
              var groupCtx = this.ctx;
              this.ctx = this.groupStack.pop();

              if (this.ctx.imageSmoothingEnabled !== undefined) {
                this.ctx.imageSmoothingEnabled = false;
              } else {
                this.ctx.mozImageSmoothingEnabled = false;
              }

              if (group.smask) {
                this.tempSMask = this.smaskStack.pop();
              } else {
                this.ctx.drawImage(groupCtx.canvas, 0, 0);
              }

              this.restore();
            },
            beginAnnotations: function CanvasGraphics_beginAnnotations() {
              this.save();

              if (this.baseTransform) {
                this.ctx.setTransform.apply(this.ctx, this.baseTransform);
              }
            },
            endAnnotations: function CanvasGraphics_endAnnotations() {
              this.restore();
            },
            beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {
              this.save();
              resetCtxToDefault(this.ctx);
              this.current = new CanvasExtraState();

              if (Array.isArray(rect) && rect.length === 4) {
                var width = rect[2] - rect[0];
                var height = rect[3] - rect[1];
                this.ctx.rect(rect[0], rect[1], width, height);
                this.clip();
                this.endPath();
              }

              this.transform.apply(this, transform);
              this.transform.apply(this, matrix);
            },
            endAnnotation: function CanvasGraphics_endAnnotation() {
              this.restore();
            },
            paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {
              if (!this.contentVisible) {
                return;
              }

              var ctx = this.ctx;
              var width = img.width,
                  height = img.height;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var glyph = this.processingType3;

              if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {
                if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
                  glyph.compiled = compileType3Glyph({
                    data: img.data,
                    width: width,
                    height: height
                  });
                } else {
                  glyph.compiled = null;
                }
              }

              if (glyph === null || glyph === void 0 ? void 0 : glyph.compiled) {
                glyph.compiled(ctx);
                return;
              }

              var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
              var maskCtx = maskCanvas.context;
              maskCtx.save();
              putBinaryImageMask(maskCtx, img);
              maskCtx.globalCompositeOperation = "source-in";
              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
              maskCtx.fillRect(0, 0, width, height);
              maskCtx.restore();
              this.paintInlineImageXObject(maskCanvas.canvas);
            },
            paintImageMaskXObjectRepeat: function paintImageMaskXObjectRepeat(imgData, scaleX) {
              var skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
              var skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
              var scaleY = arguments.length > 4 ? arguments[4] : undefined;
              var positions = arguments.length > 5 ? arguments[5] : undefined;

              if (!this.contentVisible) {
                return;
              }

              var width = imgData.width;
              var height = imgData.height;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
              var maskCtx = maskCanvas.context;
              maskCtx.save();
              putBinaryImageMask(maskCtx, imgData);
              maskCtx.globalCompositeOperation = "source-in";
              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
              maskCtx.fillRect(0, 0, width, height);
              maskCtx.restore();
              var ctx = this.ctx;

              for (var i = 0, ii = positions.length; i < ii; i += 2) {
                ctx.save();
                ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);
                ctx.scale(1, -1);
                ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                ctx.restore();
              }
            },
            paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {
              if (!this.contentVisible) {
                return;
              }

              var ctx = this.ctx;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;

              for (var i = 0, ii = images.length; i < ii; i++) {
                var image = images[i];
                var width = image.width,
                    height = image.height;
                var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                var maskCtx = maskCanvas.context;
                maskCtx.save();
                putBinaryImageMask(maskCtx, image);
                maskCtx.globalCompositeOperation = "source-in";
                maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;
                maskCtx.fillRect(0, 0, width, height);
                maskCtx.restore();
                ctx.save();
                ctx.transform.apply(ctx, image.transform);
                ctx.scale(1, -1);
                ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                ctx.restore();
              }
            },
            paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {
              if (!this.contentVisible) {
                return;
              }

              var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

              if (!imgData) {
                (0, _util.warn)("Dependent image isn't ready yet");
                return;
              }

              this.paintInlineImageXObject(imgData);
            },
            paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
              if (!this.contentVisible) {
                return;
              }

              var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

              if (!imgData) {
                (0, _util.warn)("Dependent image isn't ready yet");
                return;
              }

              var width = imgData.width;
              var height = imgData.height;
              var map = [];

              for (var i = 0, ii = positions.length; i < ii; i += 2) {
                map.push({
                  transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                  x: 0,
                  y: 0,
                  w: width,
                  h: height
                });
              }

              this.paintInlineImageXObjectGroup(imgData, map);
            },
            paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {
              if (!this.contentVisible) {
                return;
              }

              var width = imgData.width;
              var height = imgData.height;
              var ctx = this.ctx;
              this.save();
              ctx.scale(1 / width, -1 / height);
              var currentTransform = ctx.mozCurrentTransformInverse;
              var widthScale = Math.max(Math.hypot(currentTransform[0], currentTransform[1]), 1);
              var heightScale = Math.max(Math.hypot(currentTransform[2], currentTransform[3]), 1);
              var imgToPaint, tmpCanvas, tmpCtx;

              if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                imgToPaint = imgData;
              } else {
                tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                tmpCtx = tmpCanvas.context;
                putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);
                imgToPaint = tmpCanvas.canvas;
              }

              var paintWidth = width,
                  paintHeight = height;
              var tmpCanvasId = "prescale1";

              while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                var newWidth = paintWidth,
                    newHeight = paintHeight;

                if (widthScale > 2 && paintWidth > 1) {
                  newWidth = Math.ceil(paintWidth / 2);
                  widthScale /= paintWidth / newWidth;
                }

                if (heightScale > 2 && paintHeight > 1) {
                  newHeight = Math.ceil(paintHeight / 2);
                  heightScale /= paintHeight / newHeight;
                }

                tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                tmpCtx = tmpCanvas.context;
                tmpCtx.clearRect(0, 0, newWidth, newHeight);
                tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                imgToPaint = tmpCanvas.canvas;
                paintWidth = newWidth;
                paintHeight = newHeight;
                tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
              }

              ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);

              if (this.imageLayer) {
                var position = this.getCanvasPosition(0, -height);
                this.imageLayer.appendImage({
                  imgData: imgData,
                  left: position[0],
                  top: position[1],
                  width: width / currentTransform[0],
                  height: height / currentTransform[3]
                });
              }

              this.restore();
            },
            paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {
              if (!this.contentVisible) {
                return;
              }

              var ctx = this.ctx;
              var w = imgData.width;
              var h = imgData.height;
              var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
              var tmpCtx = tmpCanvas.context;
              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);

              for (var i = 0, ii = map.length; i < ii; i++) {
                var entry = map[i];
                ctx.save();
                ctx.transform.apply(ctx, entry.transform);
                ctx.scale(1, -1);
                ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);

                if (this.imageLayer) {
                  var position = this.getCanvasPosition(entry.x, entry.y);
                  this.imageLayer.appendImage({
                    imgData: imgData,
                    left: position[0],
                    top: position[1],
                    width: w,
                    height: h
                  });
                }

                ctx.restore();
              }
            },
            paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {
              if (!this.contentVisible) {
                return;
              }

              this.ctx.fillRect(0, 0, 1, 1);
            },
            markPoint: function CanvasGraphics_markPoint(tag) {},
            markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},
            beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {
              this.markedContentStack.push({
                visible: true
              });
            },
            beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {
              if (tag === "OC") {
                this.markedContentStack.push({
                  visible: this.optionalContentConfig.isVisible(properties)
                });
              } else {
                this.markedContentStack.push({
                  visible: true
                });
              }

              this.contentVisible = this.isContentVisible();
            },
            endMarkedContent: function CanvasGraphics_endMarkedContent() {
              this.markedContentStack.pop();
              this.contentVisible = this.isContentVisible();
            },
            beginCompat: function CanvasGraphics_beginCompat() {},
            endCompat: function CanvasGraphics_endCompat() {},
            consumePath: function CanvasGraphics_consumePath() {
              var ctx = this.ctx;

              if (this.pendingClip) {
                if (this.pendingClip === EO_CLIP) {
                  ctx.clip("evenodd");
                } else {
                  ctx.clip();
                }

                this.pendingClip = null;
              }

              ctx.beginPath();
            },
            getSinglePixelWidth: function getSinglePixelWidth() {
              if (this._cachedGetSinglePixelWidth === null) {
                var m = this.ctx.mozCurrentTransform;
                var absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                var sqNorm1 = Math.pow(m[0], 2) + Math.pow(m[2], 2);
                var sqNorm2 = Math.pow(m[1], 2) + Math.pow(m[3], 2);
                var pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;

                if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {
                  this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);
                } else if (absDet > Number.EPSILON) {
                  this._cachedGetSinglePixelWidth = pixelHeight;
                } else {
                  this._cachedGetSinglePixelWidth = 1;
                }
              }

              return this._cachedGetSinglePixelWidth;
            },
            getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {
              var transform = this.ctx.mozCurrentTransform;
              return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
            },
            isContentVisible: function CanvasGraphics_isContentVisible() {
              for (var i = this.markedContentStack.length - 1; i >= 0; i--) {
                if (!this.markedContentStack[i].visible) {
                  return false;
                }
              }

              return true;
            }
          };

          for (var op in _util.OPS) {
            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
          }

          return CanvasGraphics;
        }();

        exports.CanvasGraphics = CanvasGraphics;
        /***/
      },
      /* 11 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getShadingPatternFromIR = getShadingPatternFromIR;
        exports.TilingPattern = void 0;

        var _util = __w_pdfjs_require__(2);

        var ShadingIRs = {};

        function applyBoundingBox(ctx, bbox) {
          if (!bbox || typeof Path2D === "undefined") {
            return;
          }

          var width = bbox[2] - bbox[0];
          var height = bbox[3] - bbox[1];
          var region = new Path2D();
          region.rect(bbox[0], bbox[1], width, height);
          ctx.clip(region);
        }

        ShadingIRs.RadialAxial = {
          fromIR: function RadialAxial_fromIR(raw) {
            var type = raw[1];
            var bbox = raw[2];
            var colorStops = raw[3];
            var p0 = raw[4];
            var p1 = raw[5];
            var r0 = raw[6];
            var r1 = raw[7];
            return {
              getPattern: function RadialAxial_getPattern(ctx) {
                applyBoundingBox(ctx, bbox);
                var grad;

                if (type === "axial") {
                  grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);
                } else if (type === "radial") {
                  grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);
                }

                for (var i = 0, ii = colorStops.length; i < ii; ++i) {
                  var c = colorStops[i];
                  grad.addColorStop(c[0], c[1]);
                }

                return grad;
              }
            };
          }
        };

        var createMeshCanvas = function createMeshCanvasClosure() {
          function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
            var coords = context.coords,
                colors = context.colors;
            var bytes = data.data,
                rowSize = data.width * 4;
            var tmp;

            if (coords[p1 + 1] > coords[p2 + 1]) {
              tmp = p1;
              p1 = p2;
              p2 = tmp;
              tmp = c1;
              c1 = c2;
              c2 = tmp;
            }

            if (coords[p2 + 1] > coords[p3 + 1]) {
              tmp = p2;
              p2 = p3;
              p3 = tmp;
              tmp = c2;
              c2 = c3;
              c3 = tmp;
            }

            if (coords[p1 + 1] > coords[p2 + 1]) {
              tmp = p1;
              p1 = p2;
              p2 = tmp;
              tmp = c1;
              c1 = c2;
              c2 = tmp;
            }

            var x1 = (coords[p1] + context.offsetX) * context.scaleX;
            var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
            var x2 = (coords[p2] + context.offsetX) * context.scaleX;
            var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
            var x3 = (coords[p3] + context.offsetX) * context.scaleX;
            var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;

            if (y1 >= y3) {
              return;
            }

            var c1r = colors[c1],
                c1g = colors[c1 + 1],
                c1b = colors[c1 + 2];
            var c2r = colors[c2],
                c2g = colors[c2 + 1],
                c2b = colors[c2 + 2];
            var c3r = colors[c3],
                c3g = colors[c3 + 1],
                c3b = colors[c3 + 2];
            var minY = Math.round(y1),
                maxY = Math.round(y3);
            var xa, car, cag, cab;
            var xb, cbr, cbg, cbb;

            for (var y = minY; y <= maxY; y++) {
              if (y < y2) {
                var _k4 = void 0;

                if (y < y1) {
                  _k4 = 0;
                } else if (y1 === y2) {
                  _k4 = 1;
                } else {
                  _k4 = (y1 - y) / (y1 - y2);
                }

                xa = x1 - (x1 - x2) * _k4;
                car = c1r - (c1r - c2r) * _k4;
                cag = c1g - (c1g - c2g) * _k4;
                cab = c1b - (c1b - c2b) * _k4;
              } else {
                var _k5 = void 0;

                if (y > y3) {
                  _k5 = 1;
                } else if (y2 === y3) {
                  _k5 = 0;
                } else {
                  _k5 = (y2 - y) / (y2 - y3);
                }

                xa = x2 - (x2 - x3) * _k5;
                car = c2r - (c2r - c3r) * _k5;
                cag = c2g - (c2g - c3g) * _k5;
                cab = c2b - (c2b - c3b) * _k5;
              }

              var k = void 0;

              if (y < y1) {
                k = 0;
              } else if (y > y3) {
                k = 1;
              } else {
                k = (y1 - y) / (y1 - y3);
              }

              xb = x1 - (x1 - x3) * k;
              cbr = c1r - (c1r - c3r) * k;
              cbg = c1g - (c1g - c3g) * k;
              cbb = c1b - (c1b - c3b) * k;
              var x1_ = Math.round(Math.min(xa, xb));
              var x2_ = Math.round(Math.max(xa, xb));
              var j = rowSize * y + x1_ * 4;

              for (var x = x1_; x <= x2_; x++) {
                k = (xa - x) / (xa - xb);

                if (k < 0) {
                  k = 0;
                } else if (k > 1) {
                  k = 1;
                }

                bytes[j++] = car - (car - cbr) * k | 0;
                bytes[j++] = cag - (cag - cbg) * k | 0;
                bytes[j++] = cab - (cab - cbb) * k | 0;
                bytes[j++] = 255;
              }
            }
          }

          function drawFigure(data, figure, context) {
            var ps = figure.coords;
            var cs = figure.colors;
            var i, ii;

            switch (figure.type) {
              case "lattice":
                var verticesPerRow = figure.verticesPerRow;
                var rows = Math.floor(ps.length / verticesPerRow) - 1;
                var cols = verticesPerRow - 1;

                for (i = 0; i < rows; i++) {
                  var q = i * verticesPerRow;

                  for (var j = 0; j < cols; j++, q++) {
                    drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                    drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                  }
                }

                break;

              case "triangles":
                for (i = 0, ii = ps.length; i < ii; i += 3) {
                  drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
                }

                break;

              default:
                throw new Error("illegal figure");
            }
          }

          function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {
            var EXPECTED_SCALE = 1.1;
            var MAX_PATTERN_SIZE = 3000;
            var BORDER_SIZE = 2;
            var offsetX = Math.floor(bounds[0]);
            var offsetY = Math.floor(bounds[1]);
            var boundsWidth = Math.ceil(bounds[2]) - offsetX;
            var boundsHeight = Math.ceil(bounds[3]) - offsetY;
            var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
            var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
            var scaleX = boundsWidth / width;
            var scaleY = boundsHeight / height;
            var context = {
              coords: coords,
              colors: colors,
              offsetX: -offsetX,
              offsetY: -offsetY,
              scaleX: 1 / scaleX,
              scaleY: 1 / scaleY
            };
            var paddedWidth = width + BORDER_SIZE * 2;
            var paddedHeight = height + BORDER_SIZE * 2;
            var canvas, tmpCanvas, i, ii;

            if (webGLContext.isEnabled) {
              canvas = webGLContext.drawFigures({
                width: width,
                height: height,
                backgroundColor: backgroundColor,
                figures: figures,
                context: context
              });
              tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
              tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);
              canvas = tmpCanvas.canvas;
            } else {
              tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
              var tmpCtx = tmpCanvas.context;
              var data = tmpCtx.createImageData(width, height);

              if (backgroundColor) {
                var bytes = data.data;

                for (i = 0, ii = bytes.length; i < ii; i += 4) {
                  bytes[i] = backgroundColor[0];
                  bytes[i + 1] = backgroundColor[1];
                  bytes[i + 2] = backgroundColor[2];
                  bytes[i + 3] = 255;
                }
              }

              for (i = 0; i < figures.length; i++) {
                drawFigure(data, figures[i], context);
              }

              tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
              canvas = tmpCanvas.canvas;
            }

            return {
              canvas: canvas,
              offsetX: offsetX - BORDER_SIZE * scaleX,
              offsetY: offsetY - BORDER_SIZE * scaleY,
              scaleX: scaleX,
              scaleY: scaleY
            };
          }

          return createMeshCanvas;
        }();

        ShadingIRs.Mesh = {
          fromIR: function Mesh_fromIR(raw) {
            var coords = raw[2];
            var colors = raw[3];
            var figures = raw[4];
            var bounds = raw[5];
            var matrix = raw[6];
            var bbox = raw[7];
            var background = raw[8];
            return {
              getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {
                applyBoundingBox(ctx, bbox);
                var scale;

                if (shadingFill) {
                  scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
                } else {
                  scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);

                  if (matrix) {
                    var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);

                    scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
                  }
                }

                var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);

                if (!shadingFill) {
                  ctx.setTransform.apply(ctx, owner.baseTransform);

                  if (matrix) {
                    ctx.transform.apply(ctx, matrix);
                  }
                }

                ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
                return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
              }
            };
          }
        };
        ShadingIRs.Dummy = {
          fromIR: function Dummy_fromIR() {
            return {
              getPattern: function Dummy_fromIR_getPattern() {
                return "hotpink";
              }
            };
          }
        };

        function getShadingPatternFromIR(raw) {
          var shadingIR = ShadingIRs[raw[0]];

          if (!shadingIR) {
            throw new Error("Unknown IR type: ".concat(raw[0]));
          }

          return shadingIR.fromIR(raw);
        }

        var TilingPattern = function TilingPatternClosure() {
          var PaintType = {
            COLORED: 1,
            UNCOLORED: 2
          };
          var MAX_PATTERN_SIZE = 3000;

          function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
            this.operatorList = IR[2];
            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
            this.bbox = IR[4];
            this.xstep = IR[5];
            this.ystep = IR[6];
            this.paintType = IR[7];
            this.tilingType = IR[8];
            this.color = color;
            this.canvasGraphicsFactory = canvasGraphicsFactory;
            this.baseTransform = baseTransform;
            this.ctx = ctx;
          }

          TilingPattern.prototype = {
            createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {
              var operatorList = this.operatorList;
              var bbox = this.bbox;
              var xstep = this.xstep;
              var ystep = this.ystep;
              var paintType = this.paintType;
              var tilingType = this.tilingType;
              var color = this.color;
              var canvasGraphicsFactory = this.canvasGraphicsFactory;
              (0, _util.info)("TilingType: " + tilingType);
              var x0 = bbox[0],
                  y0 = bbox[1],
                  x1 = bbox[2],
                  y1 = bbox[3];

              var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);

              var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);

              var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
              var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
              var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
              var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
              var tmpCtx = tmpCanvas.context;
              var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
              graphics.groupLevel = owner.groupLevel;
              this.setFillAndStrokeStyleToContext(graphics, paintType, color);
              graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
              graphics.transform(1, 0, 0, 1, -x0, -y0);
              this.clipBbox(graphics, bbox, x0, y0, x1, y1);
              graphics.executeOperatorList(operatorList);
              this.ctx.transform(1, 0, 0, 1, x0, y0);
              this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);
              return tmpCanvas.canvas;
            },
            getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {
              step = Math.abs(step);
              var maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);
              var size = Math.ceil(step * scale);

              if (size >= maxSize) {
                size = maxSize;
              } else {
                scale = size / step;
              }

              return {
                scale: scale,
                size: size
              };
            },
            clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {
              if (Array.isArray(bbox) && bbox.length === 4) {
                var bboxWidth = x1 - x0;
                var bboxHeight = y1 - y0;
                graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
                graphics.clip();
                graphics.endPath();
              }
            },
            setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
              var context = graphics.ctx,
                  current = graphics.current;

              switch (paintType) {
                case PaintType.COLORED:
                  var ctx = this.ctx;
                  context.fillStyle = ctx.fillStyle;
                  context.strokeStyle = ctx.strokeStyle;
                  current.fillColor = ctx.fillStyle;
                  current.strokeColor = ctx.strokeStyle;
                  break;

                case PaintType.UNCOLORED:
                  var cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);

                  context.fillStyle = cssColor;
                  context.strokeStyle = cssColor;
                  current.fillColor = cssColor;
                  current.strokeColor = cssColor;
                  break;

                default:
                  throw new _util.FormatError("Unsupported paint type: ".concat(paintType));
              }
            },
            getPattern: function TilingPattern_getPattern(ctx, owner) {
              ctx = this.ctx;
              ctx.setTransform.apply(ctx, this.baseTransform);
              ctx.transform.apply(ctx, this.matrix);
              var temporaryPatternCanvas = this.createPatternCanvas(owner);
              return ctx.createPattern(temporaryPatternCanvas, "repeat");
            }
          };
          return TilingPattern;
        }();

        exports.TilingPattern = TilingPattern;
        /***/
      },
      /* 12 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GlobalWorkerOptions = void 0;
        var GlobalWorkerOptions = Object.create(null);
        exports.GlobalWorkerOptions = GlobalWorkerOptions;
        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;
        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? "" : GlobalWorkerOptions.workerSrc;
        /***/
      },
      /* 13 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MessageHandler = void 0;

        var _util = __w_pdfjs_require__(2);

        var CallbackKind = {
          UNKNOWN: 0,
          DATA: 1,
          ERROR: 2
        };
        var StreamKind = {
          UNKNOWN: 0,
          CANCEL: 1,
          CANCEL_COMPLETE: 2,
          CLOSE: 3,
          ENQUEUE: 4,
          ERROR: 5,
          PULL: 6,
          PULL_COMPLETE: 7,
          START_COMPLETE: 8
        };

        function wrapReason(reason) {
          if (_typeof(reason) !== "object" || reason === null) {
            return reason;
          }

          switch (reason.name) {
            case "AbortException":
              return new _util.AbortException(reason.message);

            case "MissingPDFException":
              return new _util.MissingPDFException(reason.message);

            case "UnexpectedResponseException":
              return new _util.UnexpectedResponseException(reason.message, reason.status);

            case "UnknownErrorException":
              return new _util.UnknownErrorException(reason.message, reason.details);

            default:
              return new _util.UnknownErrorException(reason.message, reason.toString());
          }
        }

        var MessageHandler = /*#__PURE__*/function () {
          function MessageHandler(sourceName, targetName, comObj) {
            var _this29 = this;

            _classCallCheck(this, MessageHandler);

            this.sourceName = sourceName;
            this.targetName = targetName;
            this.comObj = comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.postMessageTransfers = true;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            this.callbackCapabilities = Object.create(null);
            this.actionHandler = Object.create(null);

            this._onComObjOnMessage = function (event) {
              var data = event.data;

              if (data.targetName !== _this29.sourceName) {
                return;
              }

              if (data.stream) {
                _this29._processStreamMessage(data);

                return;
              }

              if (data.callback) {
                var callbackId = data.callbackId;
                var capability = _this29.callbackCapabilities[callbackId];

                if (!capability) {
                  throw new Error("Cannot resolve callback ".concat(callbackId));
                }

                delete _this29.callbackCapabilities[callbackId];

                if (data.callback === CallbackKind.DATA) {
                  capability.resolve(data.data);
                } else if (data.callback === CallbackKind.ERROR) {
                  capability.reject(wrapReason(data.reason));
                } else {
                  throw new Error("Unexpected callback case");
                }

                return;
              }

              var action = _this29.actionHandler[data.action];

              if (!action) {
                throw new Error("Unknown action from worker: ".concat(data.action));
              }

              if (data.callbackId) {
                var cbSourceName = _this29.sourceName;
                var cbTargetName = data.sourceName;
                new Promise(function (resolve) {
                  resolve(action(data.data));
                }).then(function (result) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.DATA,
                    callbackId: data.callbackId,
                    data: result
                  });
                }, function (reason) {
                  comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.ERROR,
                    callbackId: data.callbackId,
                    reason: wrapReason(reason)
                  });
                });
                return;
              }

              if (data.streamId) {
                _this29._createStreamSink(data);

                return;
              }

              action(data.data);
            };

            comObj.addEventListener("message", this._onComObjOnMessage);
          }

          _createClass(MessageHandler, [{
            key: "on",
            value: function on(actionName, handler) {
              var ah = this.actionHandler;

              if (ah[actionName]) {
                throw new Error("There is already an actionName called \"".concat(actionName, "\""));
              }

              ah[actionName] = handler;
            }
          }, {
            key: "send",
            value: function send(actionName, data, transfers) {
              this._postMessage({
                sourceName: this.sourceName,
                targetName: this.targetName,
                action: actionName,
                data: data
              }, transfers);
            }
          }, {
            key: "sendWithPromise",
            value: function sendWithPromise(actionName, data, transfers) {
              var callbackId = this.callbackId++;
              var capability = (0, _util.createPromiseCapability)();
              this.callbackCapabilities[callbackId] = capability;

              try {
                this._postMessage({
                  sourceName: this.sourceName,
                  targetName: this.targetName,
                  action: actionName,
                  callbackId: callbackId,
                  data: data
                }, transfers);
              } catch (ex) {
                capability.reject(ex);
              }

              return capability.promise;
            }
          }, {
            key: "sendWithStream",
            value: function sendWithStream(actionName, data, queueingStrategy, transfers) {
              var _this30 = this;

              var streamId = this.streamId++;
              var sourceName = this.sourceName;
              var targetName = this.targetName;
              var comObj = this.comObj;
              return new ReadableStream({
                start: function start(controller) {
                  var startCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId] = {
                    controller: controller,
                    startCall: startCapability,
                    pullCall: null,
                    cancelCall: null,
                    isClosed: false
                  };

                  _this30._postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    action: actionName,
                    streamId: streamId,
                    data: data,
                    desiredSize: controller.desiredSize
                  }, transfers);

                  return startCapability.promise;
                },
                pull: function pull(controller) {
                  var pullCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId].pullCall = pullCapability;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.PULL,
                    streamId: streamId,
                    desiredSize: controller.desiredSize
                  });
                  return pullCapability.promise;
                },
                cancel: function cancel(reason) {
                  (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");
                  var cancelCapability = (0, _util.createPromiseCapability)();
                  _this30.streamControllers[streamId].cancelCall = cancelCapability;
                  _this30.streamControllers[streamId].isClosed = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.CANCEL,
                    streamId: streamId,
                    reason: wrapReason(reason)
                  });
                  return cancelCapability.promise;
                }
              }, queueingStrategy);
            }
          }, {
            key: "_createStreamSink",
            value: function _createStreamSink(data) {
              var self = this;
              var action = this.actionHandler[data.action];
              var streamId = data.streamId;
              var sourceName = this.sourceName;
              var targetName = data.sourceName;
              var comObj = this.comObj;
              var streamSink = {
                enqueue: function enqueue(chunk) {
                  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                  var transfers = arguments.length > 2 ? arguments[2] : undefined;

                  if (this.isCancelled) {
                    return;
                  }

                  var lastDesiredSize = this.desiredSize;
                  this.desiredSize -= size;

                  if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                    this.sinkCapability = (0, _util.createPromiseCapability)();
                    this.ready = this.sinkCapability.promise;
                  }

                  self._postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.ENQUEUE,
                    streamId: streamId,
                    chunk: chunk
                  }, transfers);
                },
                close: function close() {
                  if (this.isCancelled) {
                    return;
                  }

                  this.isCancelled = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.CLOSE,
                    streamId: streamId
                  });
                  delete self.streamSinks[streamId];
                },
                error: function error(reason) {
                  (0, _util.assert)(reason instanceof Error, "error must have a valid reason");

                  if (this.isCancelled) {
                    return;
                  }

                  this.isCancelled = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.ERROR,
                    streamId: streamId,
                    reason: wrapReason(reason)
                  });
                },
                sinkCapability: (0, _util.createPromiseCapability)(),
                onPull: null,
                onCancel: null,
                isCancelled: false,
                desiredSize: data.desiredSize,
                ready: null
              };
              streamSink.sinkCapability.resolve();
              streamSink.ready = streamSink.sinkCapability.promise;
              this.streamSinks[streamId] = streamSink;
              new Promise(function (resolve) {
                resolve(action(data.data, streamSink));
              }).then(function () {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  success: true
                });
              }, function (reason) {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  reason: wrapReason(reason)
                });
              });
            }
          }, {
            key: "_processStreamMessage",
            value: function _processStreamMessage(data) {
              var streamId = data.streamId;
              var sourceName = this.sourceName;
              var targetName = data.sourceName;
              var comObj = this.comObj;

              switch (data.stream) {
                case StreamKind.START_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].startCall.resolve();
                  } else {
                    this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));
                  }

                  break;

                case StreamKind.PULL_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].pullCall.resolve();
                  } else {
                    this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));
                  }

                  break;

                case StreamKind.PULL:
                  if (!this.streamSinks[streamId]) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                    break;
                  }

                  if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {
                    this.streamSinks[streamId].sinkCapability.resolve();
                  }

                  this.streamSinks[streamId].desiredSize = data.desiredSize;
                  var onPull = this.streamSinks[data.streamId].onPull;
                  new Promise(function (resolve) {
                    resolve(onPull && onPull());
                  }).then(function () {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                  }, function (reason) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.PULL_COMPLETE,
                      streamId: streamId,
                      reason: wrapReason(reason)
                    });
                  });
                  break;

                case StreamKind.ENQUEUE:
                  (0, _util.assert)(this.streamControllers[streamId], "enqueue should have stream controller");

                  if (this.streamControllers[streamId].isClosed) {
                    break;
                  }

                  this.streamControllers[streamId].controller.enqueue(data.chunk);
                  break;

                case StreamKind.CLOSE:
                  (0, _util.assert)(this.streamControllers[streamId], "close should have stream controller");

                  if (this.streamControllers[streamId].isClosed) {
                    break;
                  }

                  this.streamControllers[streamId].isClosed = true;
                  this.streamControllers[streamId].controller.close();

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.ERROR:
                  (0, _util.assert)(this.streamControllers[streamId], "error should have stream controller");
                  this.streamControllers[streamId].controller.error(wrapReason(data.reason));

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.CANCEL_COMPLETE:
                  if (data.success) {
                    this.streamControllers[streamId].cancelCall.resolve();
                  } else {
                    this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));
                  }

                  this._deleteStreamController(streamId);

                  break;

                case StreamKind.CANCEL:
                  if (!this.streamSinks[streamId]) {
                    break;
                  }

                  var onCancel = this.streamSinks[data.streamId].onCancel;
                  new Promise(function (resolve) {
                    resolve(onCancel && onCancel(wrapReason(data.reason)));
                  }).then(function () {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.CANCEL_COMPLETE,
                      streamId: streamId,
                      success: true
                    });
                  }, function (reason) {
                    comObj.postMessage({
                      sourceName: sourceName,
                      targetName: targetName,
                      stream: StreamKind.CANCEL_COMPLETE,
                      streamId: streamId,
                      reason: wrapReason(reason)
                    });
                  });
                  this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));
                  this.streamSinks[streamId].isCancelled = true;
                  delete this.streamSinks[streamId];
                  break;

                default:
                  throw new Error("Unexpected stream case");
              }
            }
          }, {
            key: "_deleteStreamController",
            value: function () {
              var _deleteStreamController2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(streamId) {
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        _context7.next = 2;
                        return Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {
                          return capability && capability.promise;
                        }));

                      case 2:
                        delete this.streamControllers[streamId];

                      case 3:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7, this);
              }));

              function _deleteStreamController(_x4) {
                return _deleteStreamController2.apply(this, arguments);
              }

              return _deleteStreamController;
            }()
          }, {
            key: "_postMessage",
            value: function _postMessage(message, transfers) {
              if (transfers && this.postMessageTransfers) {
                this.comObj.postMessage(message, transfers);
              } else {
                this.comObj.postMessage(message);
              }
            }
          }, {
            key: "destroy",
            value: function destroy() {
              this.comObj.removeEventListener("message", this._onComObjOnMessage);
            }
          }]);

          return MessageHandler;
        }();

        exports.MessageHandler = MessageHandler;
        /***/
      },
      /* 14 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Metadata = void 0;

        var _util = __w_pdfjs_require__(2);

        var Metadata = /*#__PURE__*/function () {
          function Metadata(_ref32) {
            var parsedData = _ref32.parsedData,
                rawData = _ref32.rawData;

            _classCallCheck(this, Metadata);

            this._metadataMap = parsedData;
            this._data = rawData;
          }

          _createClass(Metadata, [{
            key: "getRaw",
            value: function getRaw() {
              return this._data;
            }
          }, {
            key: "get",
            value: function get(name) {
              var _this$_metadataMap$ge;

              return (_this$_metadataMap$ge = this._metadataMap.get(name)) !== null && _this$_metadataMap$ge !== void 0 ? _this$_metadataMap$ge : null;
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return (0, _util.objectFromMap)(this._metadataMap);
            }
          }, {
            key: "has",
            value: function has(name) {
              return this._metadataMap.has(name);
            }
          }]);

          return Metadata;
        }();

        exports.Metadata = Metadata;
        /***/
      },
      /* 15 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OptionalContentConfig = void 0;

        var _util = __w_pdfjs_require__(2);

        var OptionalContentGroup = function OptionalContentGroup(name, intent) {
          _classCallCheck(this, OptionalContentGroup);

          this.visible = true;
          this.name = name;
          this.intent = intent;
        };

        var OptionalContentConfig = /*#__PURE__*/function () {
          function OptionalContentConfig(data) {
            _classCallCheck(this, OptionalContentConfig);

            this.name = null;
            this.creator = null;
            this._order = null;
            this._groups = new Map();

            if (data === null) {
              return;
            }

            this.name = data.name;
            this.creator = data.creator;
            this._order = data.order;

            var _iterator18 = _createForOfIteratorHelper(data.groups),
                _step18;

            try {
              for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var _group = _step18.value;

                this._groups.set(_group.id, new OptionalContentGroup(_group.name, _group.intent));
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }

            if (data.baseState === "OFF") {
              var _iterator19 = _createForOfIteratorHelper(this._groups),
                  _step19;

              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var group = _step19.value;
                  group.visible = false;
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
            }

            var _iterator20 = _createForOfIteratorHelper(data.on),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var on = _step20.value;
                this._groups.get(on).visible = true;
              }
            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }

            var _iterator21 = _createForOfIteratorHelper(data.off),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var off = _step21.value;
                this._groups.get(off).visible = false;
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }
          }

          _createClass(OptionalContentConfig, [{
            key: "_evaluateVisibilityExpression",
            value: function _evaluateVisibilityExpression(array) {
              var length = array.length;

              if (length < 2) {
                return true;
              }

              var operator = array[0];

              for (var i = 1; i < length; i++) {
                var element = array[i];
                var state = void 0;

                if (Array.isArray(element)) {
                  state = this._evaluateVisibilityExpression(element);
                } else if (this._groups.has(element)) {
                  state = this._groups.get(element).visible;
                } else {
                  (0, _util.warn)("Optional content group not found: ".concat(element));
                  return true;
                }

                switch (operator) {
                  case "And":
                    if (!state) {
                      return false;
                    }

                    break;

                  case "Or":
                    if (state) {
                      return true;
                    }

                    break;

                  case "Not":
                    return !state;

                  default:
                    return true;
                }
              }

              return operator === "And";
            }
          }, {
            key: "isVisible",
            value: function isVisible(group) {
              if (group.type === "OCG") {
                if (!this._groups.has(group.id)) {
                  (0, _util.warn)("Optional content group not found: ".concat(group.id));
                  return true;
                }

                return this._groups.get(group.id).visible;
              } else if (group.type === "OCMD") {
                if (group.expression) {
                  return this._evaluateVisibilityExpression(group.expression);
                }

                if (!group.policy || group.policy === "AnyOn") {
                  var _iterator22 = _createForOfIteratorHelper(group.ids),
                      _step22;

                  try {
                    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                      var id = _step22.value;

                      if (!this._groups.has(id)) {
                        (0, _util.warn)("Optional content group not found: ".concat(id));
                        return true;
                      }

                      if (this._groups.get(id).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _iterator22.e(err);
                  } finally {
                    _iterator22.f();
                  }

                  return false;
                } else if (group.policy === "AllOn") {
                  var _iterator23 = _createForOfIteratorHelper(group.ids),
                      _step23;

                  try {
                    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                      var _id = _step23.value;

                      if (!this._groups.has(_id)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id));
                        return true;
                      }

                      if (!this._groups.get(_id).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator23.e(err);
                  } finally {
                    _iterator23.f();
                  }

                  return true;
                } else if (group.policy === "AnyOff") {
                  var _iterator24 = _createForOfIteratorHelper(group.ids),
                      _step24;

                  try {
                    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                      var _id2 = _step24.value;

                      if (!this._groups.has(_id2)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id2));
                        return true;
                      }

                      if (!this._groups.get(_id2).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _iterator24.e(err);
                  } finally {
                    _iterator24.f();
                  }

                  return false;
                } else if (group.policy === "AllOff") {
                  var _iterator25 = _createForOfIteratorHelper(group.ids),
                      _step25;

                  try {
                    for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                      var _id3 = _step25.value;

                      if (!this._groups.has(_id3)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id3));
                        return true;
                      }

                      if (this._groups.get(_id3).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator25.e(err);
                  } finally {
                    _iterator25.f();
                  }

                  return true;
                }

                (0, _util.warn)("Unknown optional content policy ".concat(group.policy, "."));
                return true;
              }

              (0, _util.warn)("Unknown group type ".concat(group.type, "."));
              return true;
            }
          }, {
            key: "setVisibility",
            value: function setVisibility(id) {
              var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

              if (!this._groups.has(id)) {
                (0, _util.warn)("Optional content group not found: ".concat(id));
                return;
              }

              this._groups.get(id).visible = !!visible;
            }
          }, {
            key: "getOrder",
            value: function getOrder() {
              if (!this._groups.size) {
                return null;
              }

              if (this._order) {
                return this._order.slice();
              }

              return Array.from(this._groups.keys());
            }
          }, {
            key: "getGroups",
            value: function getGroups() {
              return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;
            }
          }, {
            key: "getGroup",
            value: function getGroup(id) {
              return this._groups.get(id) || null;
            }
          }]);

          return OptionalContentConfig;
        }();

        exports.OptionalContentConfig = OptionalContentConfig;
        /***/
      },
      /* 16 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFDataTransportStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var PDFDataTransportStream = /*#__PURE__*/function () {
          function PDFDataTransportStream(params, pdfDataRangeTransport) {
            var _this31 = this;

            _classCallCheck(this, PDFDataTransportStream);

            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
            this._queuedChunks = [];
            this._progressiveDone = params.progressiveDone || false;
            this._contentDispositionFilename = params.contentDispositionFilename || null;
            var initialData = params.initialData;

            if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {
              var buffer = new Uint8Array(initialData).buffer;

              this._queuedChunks.push(buffer);
            }

            this._pdfDataRangeTransport = pdfDataRangeTransport;
            this._isStreamingSupported = !params.disableStream;
            this._isRangeSupported = !params.disableRange;
            this._contentLength = params.length;
            this._fullRequestReader = null;
            this._rangeReaders = [];

            this._pdfDataRangeTransport.addRangeListener(function (begin, chunk) {
              _this31._onReceiveData({
                begin: begin,
                chunk: chunk
              });
            });

            this._pdfDataRangeTransport.addProgressListener(function (loaded, total) {
              _this31._onProgress({
                loaded: loaded,
                total: total
              });
            });

            this._pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {
              _this31._onReceiveData({
                chunk: chunk
              });
            });

            this._pdfDataRangeTransport.addProgressiveDoneListener(function () {
              _this31._onProgressiveDone();
            });

            this._pdfDataRangeTransport.transportReady();
          }

          _createClass(PDFDataTransportStream, [{
            key: "_onReceiveData",
            value: function _onReceiveData(args) {
              var buffer = new Uint8Array(args.chunk).buffer;

              if (args.begin === undefined) {
                if (this._fullRequestReader) {
                  this._fullRequestReader._enqueue(buffer);
                } else {
                  this._queuedChunks.push(buffer);
                }
              } else {
                var found = this._rangeReaders.some(function (rangeReader) {
                  if (rangeReader._begin !== args.begin) {
                    return false;
                  }

                  rangeReader._enqueue(buffer);

                  return true;
                });

                (0, _util.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
              }
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (evt.total === undefined) {
                var firstReader = this._rangeReaders[0];

                if (firstReader === null || firstReader === void 0 ? void 0 : firstReader.onProgress) {
                  firstReader.onProgress({
                    loaded: evt.loaded
                  });
                }
              } else {
                var fullReader = this._fullRequestReader;

                if (fullReader === null || fullReader === void 0 ? void 0 : fullReader.onProgress) {
                  fullReader.onProgress({
                    loaded: evt.loaded,
                    total: evt.total
                  });
                }
              }
            }
          }, {
            key: "_onProgressiveDone",
            value: function _onProgressiveDone() {
              if (this._fullRequestReader) {
                this._fullRequestReader.progressiveDone();
              }

              this._progressiveDone = true;
            }
          }, {
            key: "_removeRangeReader",
            value: function _removeRangeReader(reader) {
              var i = this._rangeReaders.indexOf(reader);

              if (i >= 0) {
                this._rangeReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
              var queuedChunks = this._queuedChunks;
              this._queuedChunks = null;
              return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var reader = new PDFDataTransportStreamRangeReader(this, begin, end);

              this._pdfDataRangeTransport.requestDataRange(begin, end);

              this._rangeReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var readers = this._rangeReaders.slice(0);

              readers.forEach(function (rangeReader) {
                rangeReader.cancel(reason);
              });

              this._pdfDataRangeTransport.abort();
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea, _this$_fullRequestRea2;

              return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;
            }
          }]);

          return PDFDataTransportStream;
        }();

        exports.PDFDataTransportStream = PDFDataTransportStream;

        var PDFDataTransportStreamReader = /*#__PURE__*/function () {
          function PDFDataTransportStreamReader(stream, queuedChunks) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            _classCallCheck(this, PDFDataTransportStreamReader);

            this._stream = stream;
            this._done = progressiveDone || false;
            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
            this._queuedChunks = queuedChunks || [];
            this._loaded = 0;

            var _iterator26 = _createForOfIteratorHelper(this._queuedChunks),
                _step26;

            try {
              for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                var chunk = _step26.value;
                this._loaded += chunk.byteLength;
              }
            } catch (err) {
              _iterator26.e(err);
            } finally {
              _iterator26.f();
            }

            this._requests = [];
            this._headersReady = Promise.resolve();
            stream._fullRequestReader = this;
            this.onProgress = null;
          }

          _createClass(PDFDataTransportStreamReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }

              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();

                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunks.push(chunk);
              }

              this._loaded += chunk.byteLength;
            }
          }, {
            key: "read",
            value: function () {
              var _read = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8() {
                var chunk, requestCapability;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        if (!(this._queuedChunks.length > 0)) {
                          _context8.next = 3;
                          break;
                        }

                        chunk = this._queuedChunks.shift();
                        return _context8.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 3:
                        if (!this._done) {
                          _context8.next = 5;
                          break;
                        }

                        return _context8.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 5:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context8.abrupt("return", requestCapability.promise);

                      case 8:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, this);
              }));

              function read() {
                return _read.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];
            }
          }, {
            key: "progressiveDone",
            value: function progressiveDone() {
              if (this._done) {
                return;
              }

              this._done = true;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReady;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._stream._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._stream._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._stream._contentLength;
            }
          }]);

          return PDFDataTransportStreamReader;
        }();

        var PDFDataTransportStreamRangeReader = /*#__PURE__*/function () {
          function PDFDataTransportStreamRangeReader(stream, begin, end) {
            _classCallCheck(this, PDFDataTransportStreamRangeReader);

            this._stream = stream;
            this._begin = begin;
            this._end = end;
            this._queuedChunk = null;
            this._requests = [];
            this._done = false;
            this.onProgress = null;
          }

          _createClass(PDFDataTransportStreamRangeReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }

              if (this._requests.length === 0) {
                this._queuedChunk = chunk;
              } else {
                var requestsCapability = this._requests.shift();

                requestsCapability.resolve({
                  value: chunk,
                  done: false
                });

                this._requests.forEach(function (requestCapability) {
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                });

                this._requests = [];
              }

              this._done = true;

              this._stream._removeRangeReader(this);
            }
          }, {
            key: "read",
            value: function () {
              var _read2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9() {
                var chunk, requestCapability;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        if (!this._queuedChunk) {
                          _context9.next = 4;
                          break;
                        }

                        chunk = this._queuedChunk;
                        this._queuedChunk = null;
                        return _context9.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 4:
                        if (!this._done) {
                          _context9.next = 6;
                          break;
                        }

                        return _context9.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 6:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context9.abrupt("return", requestCapability.promise);

                      case 9:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this);
              }));

              function read() {
                return _read2.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];

              this._stream._removeRangeReader(this);
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }]);

          return PDFDataTransportStreamRangeReader;
        }();
        /***/

      },
      /* 17 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.WebGLContext = void 0;

        var _util = __w_pdfjs_require__(2);

        var WebGLContext = /*#__PURE__*/function () {
          function WebGLContext(_ref33) {
            var _ref33$enable = _ref33.enable,
                enable = _ref33$enable === void 0 ? false : _ref33$enable;

            _classCallCheck(this, WebGLContext);

            this._enabled = enable === true;
          }

          _createClass(WebGLContext, [{
            key: "composeSMask",
            value: function composeSMask(_ref34) {
              var layer = _ref34.layer,
                  mask = _ref34.mask,
                  properties = _ref34.properties;
              return WebGLUtils.composeSMask(layer, mask, properties);
            }
          }, {
            key: "drawFigures",
            value: function drawFigures(_ref35) {
              var width = _ref35.width,
                  height = _ref35.height,
                  backgroundColor = _ref35.backgroundColor,
                  figures = _ref35.figures,
                  context = _ref35.context;
              return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);
            }
          }, {
            key: "clear",
            value: function clear() {
              WebGLUtils.cleanup();
            }
          }, {
            key: "isEnabled",
            get: function get() {
              var enabled = this._enabled;

              if (enabled) {
                enabled = WebGLUtils.tryInitGL();
              }

              return (0, _util.shadow)(this, "isEnabled", enabled);
            }
          }]);

          return WebGLContext;
        }();

        exports.WebGLContext = WebGLContext;

        var WebGLUtils = function WebGLUtilsClosure() {
          function loadShader(gl, code, shaderType) {
            var shader = gl.createShader(shaderType);
            gl.shaderSource(shader, code);
            gl.compileShader(shader);
            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

            if (!compiled) {
              var errorMsg = gl.getShaderInfoLog(shader);
              throw new Error("Error during shader compilation: " + errorMsg);
            }

            return shader;
          }

          function createVertexShader(gl, code) {
            return loadShader(gl, code, gl.VERTEX_SHADER);
          }

          function createFragmentShader(gl, code) {
            return loadShader(gl, code, gl.FRAGMENT_SHADER);
          }

          function createProgram(gl, shaders) {
            var program = gl.createProgram();

            for (var i = 0, ii = shaders.length; i < ii; ++i) {
              gl.attachShader(program, shaders[i]);
            }

            gl.linkProgram(program);
            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);

            if (!linked) {
              var errorMsg = gl.getProgramInfoLog(program);
              throw new Error("Error during program linking: " + errorMsg);
            }

            return program;
          }

          function createTexture(gl, image, textureId) {
            gl.activeTexture(textureId);
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            return texture;
          }

          var currentGL, currentCanvas;

          function generateGL() {
            if (currentGL) {
              return;
            }

            currentCanvas = document.createElement("canvas");
            currentGL = currentCanvas.getContext("webgl", {
              premultipliedalpha: false
            });
          }

          var smaskVertexShaderCode = "\
  attribute vec2 a_position;                                    \
  attribute vec2 a_texCoord;                                    \
                                                                \
  uniform vec2 u_resolution;                                    \
                                                                \
  varying vec2 v_texCoord;                                      \
                                                                \
  void main() {                                                 \
    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \
    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
                                                                \
    v_texCoord = a_texCoord;                                    \
  }                                                             ";
          var smaskFragmentShaderCode = "\
  precision mediump float;                                      \
                                                                \
  uniform vec4 u_backdrop;                                      \
  uniform int u_subtype;                                        \
  uniform sampler2D u_image;                                    \
  uniform sampler2D u_mask;                                     \
                                                                \
  varying vec2 v_texCoord;                                      \
                                                                \
  void main() {                                                 \
    vec4 imageColor = texture2D(u_image, v_texCoord);           \
    vec4 maskColor = texture2D(u_mask, v_texCoord);             \
    if (u_backdrop.a > 0.0) {                                   \
      maskColor.rgb = maskColor.rgb * maskColor.a +             \
                      u_backdrop.rgb * (1.0 - maskColor.a);     \
    }                                                           \
    float lum;                                                  \
    if (u_subtype == 0) {                                       \
      lum = maskColor.a;                                        \
    } else {                                                    \
      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \
            maskColor.b * 0.11;                                 \
    }                                                           \
    imageColor.a *= lum;                                        \
    imageColor.rgb *= imageColor.a;                             \
    gl_FragColor = imageColor;                                  \
  }                                                             ";
          var smaskCache = null;

          function initSmaskGL() {
            generateGL();
            var canvas = currentCanvas;
            currentCanvas = null;
            var gl = currentGL;
            currentGL = null;
            var vertexShader = createVertexShader(gl, smaskVertexShaderCode);
            var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);
            var program = createProgram(gl, [vertexShader, fragmentShader]);
            gl.useProgram(program);
            var cache = {};
            cache.gl = gl;
            cache.canvas = canvas;
            cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");
            cache.positionLocation = gl.getAttribLocation(program, "a_position");
            cache.backdropLocation = gl.getUniformLocation(program, "u_backdrop");
            cache.subtypeLocation = gl.getUniformLocation(program, "u_subtype");
            var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");
            var texLayerLocation = gl.getUniformLocation(program, "u_image");
            var texMaskLocation = gl.getUniformLocation(program, "u_mask");
            var texCoordBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);
            gl.enableVertexAttribArray(texCoordLocation);
            gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);
            gl.uniform1i(texLayerLocation, 0);
            gl.uniform1i(texMaskLocation, 1);
            smaskCache = cache;
          }

          function composeSMask(layer, mask, properties) {
            var width = layer.width,
                height = layer.height;

            if (!smaskCache) {
              initSmaskGL();
            }

            var cache = smaskCache,
                canvas = cache.canvas,
                gl = cache.gl;
            canvas.width = width;
            canvas.height = height;
            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
            gl.uniform2f(cache.resolutionLocation, width, height);

            if (properties.backdrop) {
              gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);
            } else {
              gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);
            }

            gl.uniform1i(cache.subtypeLocation, properties.subtype === "Luminosity" ? 1 : 0);
            var texture = createTexture(gl, layer, gl.TEXTURE0);
            var maskTexture = createTexture(gl, mask, gl.TEXTURE1);
            var buffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);
            gl.enableVertexAttribArray(cache.positionLocation);
            gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
            gl.clearColor(0, 0, 0, 0);
            gl.enable(gl.BLEND);
            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.drawArrays(gl.TRIANGLES, 0, 6);
            gl.flush();
            gl.deleteTexture(texture);
            gl.deleteTexture(maskTexture);
            gl.deleteBuffer(buffer);
            return canvas;
          }

          var figuresVertexShaderCode = "\
  attribute vec2 a_position;                                    \
  attribute vec3 a_color;                                       \
                                                                \
  uniform vec2 u_resolution;                                    \
  uniform vec2 u_scale;                                         \
  uniform vec2 u_offset;                                        \
                                                                \
  varying vec4 v_color;                                         \
                                                                \
  void main() {                                                 \
    vec2 position = (a_position + u_offset) * u_scale;          \
    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \
    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \
                                                                \
    v_color = vec4(a_color / 255.0, 1.0);                       \
  }                                                             ";
          var figuresFragmentShaderCode = "\
  precision mediump float;                                      \
                                                                \
  varying vec4 v_color;                                         \
                                                                \
  void main() {                                                 \
    gl_FragColor = v_color;                                     \
  }                                                             ";
          var figuresCache = null;

          function initFiguresGL() {
            generateGL();
            var canvas = currentCanvas;
            currentCanvas = null;
            var gl = currentGL;
            currentGL = null;
            var vertexShader = createVertexShader(gl, figuresVertexShaderCode);
            var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);
            var program = createProgram(gl, [vertexShader, fragmentShader]);
            gl.useProgram(program);
            var cache = {};
            cache.gl = gl;
            cache.canvas = canvas;
            cache.resolutionLocation = gl.getUniformLocation(program, "u_resolution");
            cache.scaleLocation = gl.getUniformLocation(program, "u_scale");
            cache.offsetLocation = gl.getUniformLocation(program, "u_offset");
            cache.positionLocation = gl.getAttribLocation(program, "a_position");
            cache.colorLocation = gl.getAttribLocation(program, "a_color");
            figuresCache = cache;
          }

          function drawFigures(width, height, backgroundColor, figures, context) {
            if (!figuresCache) {
              initFiguresGL();
            }

            var cache = figuresCache,
                canvas = cache.canvas,
                gl = cache.gl;
            canvas.width = width;
            canvas.height = height;
            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
            gl.uniform2f(cache.resolutionLocation, width, height);
            var count = 0;

            for (var i = 0, ii = figures.length; i < ii; i++) {
              switch (figures[i].type) {
                case "lattice":
                  var rows = figures[i].coords.length / figures[i].verticesPerRow | 0;
                  count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;
                  break;

                case "triangles":
                  count += figures[i].coords.length;
                  break;
              }
            }

            var coords = new Float32Array(count * 2);
            var colors = new Uint8Array(count * 3);
            var coordsMap = context.coords,
                colorsMap = context.colors;
            var pIndex = 0,
                cIndex = 0;

            for (var _i6 = 0, _ii2 = figures.length; _i6 < _ii2; _i6++) {
              var figure = figures[_i6],
                  ps = figure.coords,
                  cs = figure.colors;

              switch (figure.type) {
                case "lattice":
                  var cols = figure.verticesPerRow;

                  var _rows = ps.length / cols | 0;

                  for (var row = 1; row < _rows; row++) {
                    var offset = row * cols + 1;

                    for (var col = 1; col < cols; col++, offset++) {
                      coords[pIndex] = coordsMap[ps[offset - cols - 1]];
                      coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];
                      coords[pIndex + 2] = coordsMap[ps[offset - cols]];
                      coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];
                      coords[pIndex + 4] = coordsMap[ps[offset - 1]];
                      coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];
                      colors[cIndex] = colorsMap[cs[offset - cols - 1]];
                      colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];
                      colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];
                      colors[cIndex + 3] = colorsMap[cs[offset - cols]];
                      colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];
                      colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];
                      colors[cIndex + 6] = colorsMap[cs[offset - 1]];
                      colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];
                      colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];
                      coords[pIndex + 6] = coords[pIndex + 2];
                      coords[pIndex + 7] = coords[pIndex + 3];
                      coords[pIndex + 8] = coords[pIndex + 4];
                      coords[pIndex + 9] = coords[pIndex + 5];
                      coords[pIndex + 10] = coordsMap[ps[offset]];
                      coords[pIndex + 11] = coordsMap[ps[offset] + 1];
                      colors[cIndex + 9] = colors[cIndex + 3];
                      colors[cIndex + 10] = colors[cIndex + 4];
                      colors[cIndex + 11] = colors[cIndex + 5];
                      colors[cIndex + 12] = colors[cIndex + 6];
                      colors[cIndex + 13] = colors[cIndex + 7];
                      colors[cIndex + 14] = colors[cIndex + 8];
                      colors[cIndex + 15] = colorsMap[cs[offset]];
                      colors[cIndex + 16] = colorsMap[cs[offset] + 1];
                      colors[cIndex + 17] = colorsMap[cs[offset] + 2];
                      pIndex += 12;
                      cIndex += 18;
                    }
                  }

                  break;

                case "triangles":
                  for (var j = 0, jj = ps.length; j < jj; j++) {
                    coords[pIndex] = coordsMap[ps[j]];
                    coords[pIndex + 1] = coordsMap[ps[j] + 1];
                    colors[cIndex] = colorsMap[cs[j]];
                    colors[cIndex + 1] = colorsMap[cs[j] + 1];
                    colors[cIndex + 2] = colorsMap[cs[j] + 2];
                    pIndex += 2;
                    cIndex += 3;
                  }

                  break;
              }
            }

            if (backgroundColor) {
              gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);
            } else {
              gl.clearColor(0, 0, 0, 0);
            }

            gl.clear(gl.COLOR_BUFFER_BIT);
            var coordsBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);
            gl.enableVertexAttribArray(cache.positionLocation);
            gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);
            var colorsBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
            gl.enableVertexAttribArray(cache.colorLocation);
            gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);
            gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);
            gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);
            gl.drawArrays(gl.TRIANGLES, 0, count);
            gl.flush();
            gl.deleteBuffer(coordsBuffer);
            gl.deleteBuffer(colorsBuffer);
            return canvas;
          }

          return {
            tryInitGL: function tryInitGL() {
              try {
                generateGL();
                return !!currentGL;
              } catch (ex) {}

              return false;
            },
            composeSMask: composeSMask,
            drawFigures: drawFigures,
            cleanup: function cleanup() {
              var _smaskCache, _figuresCache;

              if ((_smaskCache = smaskCache) === null || _smaskCache === void 0 ? void 0 : _smaskCache.canvas) {
                smaskCache.canvas.width = 0;
                smaskCache.canvas.height = 0;
              }

              if ((_figuresCache = figuresCache) === null || _figuresCache === void 0 ? void 0 : _figuresCache.canvas) {
                figuresCache.canvas.width = 0;
                figuresCache.canvas.height = 0;
              }

              smaskCache = null;
              figuresCache = null;
            }
          };
        }();
        /***/

      },
      /* 18 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationLayer = void 0;

        var _display_utils = __w_pdfjs_require__(1);

        var _util = __w_pdfjs_require__(2);

        var _annotation_storage = __w_pdfjs_require__(8);

        var _scripting_utils = __w_pdfjs_require__(19);

        var AnnotationElementFactory = /*#__PURE__*/function () {
          function AnnotationElementFactory() {
            _classCallCheck(this, AnnotationElementFactory);
          }

          _createClass(AnnotationElementFactory, null, [{
            key: "create",
            value: function create(parameters) {
              var subtype = parameters.data.annotationType;

              switch (subtype) {
                case _util.AnnotationType.LINK:
                  return new LinkAnnotationElement(parameters);

                case _util.AnnotationType.TEXT:
                  return new TextAnnotationElement(parameters);

                case _util.AnnotationType.WIDGET:
                  var fieldType = parameters.data.fieldType;

                  switch (fieldType) {
                    case "Tx":
                      return new TextWidgetAnnotationElement(parameters);

                    case "Btn":
                      if (parameters.data.radioButton) {
                        return new RadioButtonWidgetAnnotationElement(parameters);
                      } else if (parameters.data.checkBox) {
                        return new CheckboxWidgetAnnotationElement(parameters);
                      }

                      return new PushButtonWidgetAnnotationElement(parameters);

                    case "Ch":
                      return new ChoiceWidgetAnnotationElement(parameters);
                  }

                  return new WidgetAnnotationElement(parameters);

                case _util.AnnotationType.POPUP:
                  return new PopupAnnotationElement(parameters);

                case _util.AnnotationType.FREETEXT:
                  return new FreeTextAnnotationElement(parameters);

                case _util.AnnotationType.LINE:
                  return new LineAnnotationElement(parameters);

                case _util.AnnotationType.SQUARE:
                  return new SquareAnnotationElement(parameters);

                case _util.AnnotationType.CIRCLE:
                  return new CircleAnnotationElement(parameters);

                case _util.AnnotationType.POLYLINE:
                  return new PolylineAnnotationElement(parameters);

                case _util.AnnotationType.CARET:
                  return new CaretAnnotationElement(parameters);

                case _util.AnnotationType.INK:
                  return new InkAnnotationElement(parameters);

                case _util.AnnotationType.POLYGON:
                  return new PolygonAnnotationElement(parameters);

                case _util.AnnotationType.HIGHLIGHT:
                  return new HighlightAnnotationElement(parameters);

                case _util.AnnotationType.UNDERLINE:
                  return new UnderlineAnnotationElement(parameters);

                case _util.AnnotationType.SQUIGGLY:
                  return new SquigglyAnnotationElement(parameters);

                case _util.AnnotationType.STRIKEOUT:
                  return new StrikeOutAnnotationElement(parameters);

                case _util.AnnotationType.STAMP:
                  return new StampAnnotationElement(parameters);

                case _util.AnnotationType.FILEATTACHMENT:
                  return new FileAttachmentAnnotationElement(parameters);

                default:
                  return new AnnotationElement(parameters);
              }
            }
          }]);

          return AnnotationElementFactory;
        }();

        var AnnotationElement = /*#__PURE__*/function () {
          function AnnotationElement(parameters) {
            var _ref36 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref36$isRenderable = _ref36.isRenderable,
                isRenderable = _ref36$isRenderable === void 0 ? false : _ref36$isRenderable,
                _ref36$ignoreBorder = _ref36.ignoreBorder,
                ignoreBorder = _ref36$ignoreBorder === void 0 ? false : _ref36$ignoreBorder,
                _ref36$createQuadrila = _ref36.createQuadrilaterals,
                createQuadrilaterals = _ref36$createQuadrila === void 0 ? false : _ref36$createQuadrila;

            _classCallCheck(this, AnnotationElement);

            this.isRenderable = isRenderable;
            this.data = parameters.data;
            this.layer = parameters.layer;
            this.page = parameters.page;
            this.viewport = parameters.viewport;
            this.linkService = parameters.linkService;
            this.downloadManager = parameters.downloadManager;
            this.imageResourcesPath = parameters.imageResourcesPath;
            this.renderInteractiveForms = parameters.renderInteractiveForms;
            this.svgFactory = parameters.svgFactory;
            this.annotationStorage = parameters.annotationStorage;
            this.enableScripting = parameters.enableScripting;
            this.hasJSActions = parameters.hasJSActions;
            this._mouseState = parameters.mouseState;

            if (isRenderable) {
              this.container = this._createContainer(ignoreBorder);
            }

            if (createQuadrilaterals) {
              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);
            }
          }

          _createClass(AnnotationElement, [{
            key: "_createContainer",
            value: function _createContainer() {
              var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              var data = this.data,
                  page = this.page,
                  viewport = this.viewport;
              var container = document.createElement("section");
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              container.setAttribute("data-annotation-id", data.id);

              var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);

              container.style.transform = "matrix(".concat(viewport.transform.join(","), ")");
              container.style.transformOrigin = "".concat(-rect[0], "px ").concat(-rect[1], "px");

              if (!ignoreBorder && data.borderStyle.width > 0) {
                container.style.borderWidth = "".concat(data.borderStyle.width, "px");

                if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {
                  width = width - 2 * data.borderStyle.width;
                  height = height - 2 * data.borderStyle.width;
                }

                var horizontalRadius = data.borderStyle.horizontalCornerRadius;
                var verticalRadius = data.borderStyle.verticalCornerRadius;

                if (horizontalRadius > 0 || verticalRadius > 0) {
                  var radius = "".concat(horizontalRadius, "px / ").concat(verticalRadius, "px");
                  container.style.borderRadius = radius;
                }

                switch (data.borderStyle.style) {
                  case _util.AnnotationBorderStyleType.SOLID:
                    container.style.borderStyle = "solid";
                    break;

                  case _util.AnnotationBorderStyleType.DASHED:
                    container.style.borderStyle = "dashed";
                    break;

                  case _util.AnnotationBorderStyleType.BEVELED:
                    (0, _util.warn)("Unimplemented border style: beveled");
                    break;

                  case _util.AnnotationBorderStyleType.INSET:
                    (0, _util.warn)("Unimplemented border style: inset");
                    break;

                  case _util.AnnotationBorderStyleType.UNDERLINE:
                    container.style.borderBottomStyle = "solid";
                    break;

                  default:
                    break;
                }

                if (data.color) {
                  container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
                } else {
                  container.style.borderWidth = 0;
                }
              }

              container.style.left = "".concat(rect[0], "px");
              container.style.top = "".concat(rect[1], "px");
              container.style.width = "".concat(width, "px");
              container.style.height = "".concat(height, "px");
              return container;
            }
          }, {
            key: "_createQuadrilaterals",
            value: function _createQuadrilaterals() {
              var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (!this.data.quadPoints) {
                return null;
              }

              var quadrilaterals = [];
              var savedRect = this.data.rect;

              var _iterator27 = _createForOfIteratorHelper(this.data.quadPoints),
                  _step27;

              try {
                for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                  var quadPoint = _step27.value;
                  this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];
                  quadrilaterals.push(this._createContainer(ignoreBorder));
                }
              } catch (err) {
                _iterator27.e(err);
              } finally {
                _iterator27.f();
              }

              this.data.rect = savedRect;
              return quadrilaterals;
            }
          }, {
            key: "_createPopup",
            value: function _createPopup(trigger, data) {
              var container = this.container;

              if (this.quadrilaterals) {
                trigger = trigger || this.quadrilaterals;
                container = this.quadrilaterals[0];
              }

              if (!trigger) {
                trigger = document.createElement("div");
                trigger.style.height = container.style.height;
                trigger.style.width = container.style.width;
                container.appendChild(trigger);
              }

              var popupElement = new PopupElement({
                container: container,
                trigger: trigger,
                color: data.color,
                title: data.title,
                modificationDate: data.modificationDate,
                contents: data.contents,
                hideWrapper: true
              });
              var popup = popupElement.render();
              popup.style.left = container.style.width;
              container.appendChild(popup);
            }
          }, {
            key: "_renderQuadrilaterals",
            value: function _renderQuadrilaterals(className) {
              this.quadrilaterals.forEach(function (quadrilateral) {
                quadrilateral.className = className;
              });
              return this.quadrilaterals;
            }
          }, {
            key: "render",
            value: function render() {
              (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");
            }
          }]);

          return AnnotationElement;
        }();

        var LinkAnnotationElement = /*#__PURE__*/function (_AnnotationElement) {
          _inherits(LinkAnnotationElement, _AnnotationElement);

          var _super14 = _createSuper(LinkAnnotationElement);

          function LinkAnnotationElement(parameters) {
            _classCallCheck(this, LinkAnnotationElement);

            var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions["Mouse Up"] || parameters.data.actions["Mouse Down"]));
            return _super14.call(this, parameters, {
              isRenderable: isRenderable,
              createQuadrilaterals: true
            });
          }

          _createClass(LinkAnnotationElement, [{
            key: "render",
            value: function render() {
              var data = this.data,
                  linkService = this.linkService;
              var link = document.createElement("a");

              if (data.url) {
                (0, _display_utils.addLinkAttributes)(link, {
                  url: data.url,
                  target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,
                  rel: linkService.externalLinkRel,
                  enabled: linkService.externalLinkEnabled
                });
              } else if (data.action) {
                this._bindNamedAction(link, data.action);
              } else if (data.dest) {
                this._bindLink(link, data.dest);
              } else if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                this._bindJSAction(link, data);
              } else {
                this._bindLink(link, "");
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("linkAnnotation").map(function (quadrilateral, index) {
                  var linkElement = index === 0 ? link : link.cloneNode();
                  quadrilateral.appendChild(linkElement);
                  return quadrilateral;
                });
              }

              this.container.className = "linkAnnotation";
              this.container.appendChild(link);
              return this.container;
            }
          }, {
            key: "_bindLink",
            value: function _bindLink(link, destination) {
              var _this32 = this;

              link.href = this.linkService.getDestinationHash(destination);

              link.onclick = function () {
                if (destination) {
                  _this32.linkService.goToDestination(destination);
                }

                return false;
              };

              if (destination || destination === "") {
                link.className = "internalLink";
              }
            }
          }, {
            key: "_bindNamedAction",
            value: function _bindNamedAction(link, action) {
              var _this33 = this;

              link.href = this.linkService.getAnchorUrl("");

              link.onclick = function () {
                _this33.linkService.executeNamedAction(action);

                return false;
              };

              link.className = "internalLink";
            }
          }, {
            key: "_bindJSAction",
            value: function _bindJSAction(link, data) {
              var _this34 = this;

              link.href = this.linkService.getAnchorUrl("");
              var map = new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);

              var _loop = function _loop() {
                var name = _Object$keys[_i7];
                var jsName = map.get(name);

                if (!jsName) {
                  return "continue";
                }

                link[jsName] = function () {
                  var _this34$linkService$e;

                  (_this34$linkService$e = _this34.linkService.eventBus) === null || _this34$linkService$e === void 0 ? void 0 : _this34$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this34,
                    detail: {
                      id: data.id,
                      name: name
                    }
                  });
                  return false;
                };
              };

              for (var _i7 = 0, _Object$keys = Object.keys(data.actions); _i7 < _Object$keys.length; _i7++) {
                var _ret = _loop();

                if (_ret === "continue") continue;
              }

              link.className = "internalLink";
            }
          }]);

          return LinkAnnotationElement;
        }(AnnotationElement);

        var TextAnnotationElement = /*#__PURE__*/function (_AnnotationElement2) {
          _inherits(TextAnnotationElement, _AnnotationElement2);

          var _super15 = _createSuper(TextAnnotationElement);

          function TextAnnotationElement(parameters) {
            _classCallCheck(this, TextAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super15.call(this, parameters, {
              isRenderable: isRenderable
            });
          }

          _createClass(TextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "textAnnotation";
              var image = document.createElement("img");
              image.style.height = this.container.style.height;
              image.style.width = this.container.style.width;
              image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
              image.alt = "[{{type}} Annotation]";
              image.dataset.l10nId = "text_annotation_type";
              image.dataset.l10nArgs = JSON.stringify({
                type: this.data.name
              });

              if (!this.data.hasPopup) {
                this._createPopup(image, this.data);
              }

              this.container.appendChild(image);
              return this.container;
            }
          }]);

          return TextAnnotationElement;
        }(AnnotationElement);

        var WidgetAnnotationElement = /*#__PURE__*/function (_AnnotationElement3) {
          _inherits(WidgetAnnotationElement, _AnnotationElement3);

          var _super16 = _createSuper(WidgetAnnotationElement);

          function WidgetAnnotationElement() {
            _classCallCheck(this, WidgetAnnotationElement);

            return _super16.apply(this, arguments);
          }

          _createClass(WidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              if (this.data.alternativeText) {
                this.container.title = this.data.alternativeText;
              }

              return this.container;
            }
          }, {
            key: "_getKeyModifier",
            value: function _getKeyModifier(event) {
              return navigator.platform.includes("Win") && event.ctrlKey || navigator.platform.includes("Mac") && event.metaKey;
            }
          }, {
            key: "_setEventListener",
            value: function _setEventListener(element, baseName, eventName, valueGetter) {
              var _this35 = this;

              if (baseName.includes("mouse")) {
                element.addEventListener(baseName, function (event) {
                  var _this35$linkService$e;

                  (_this35$linkService$e = _this35.linkService.eventBus) === null || _this35$linkService$e === void 0 ? void 0 : _this35$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this35,
                    detail: {
                      id: _this35.data.id,
                      name: eventName,
                      value: valueGetter(event),
                      shift: event.shiftKey,
                      modifier: _this35._getKeyModifier(event)
                    }
                  });
                });
              } else {
                element.addEventListener(baseName, function (event) {
                  var _this35$linkService$e2;

                  (_this35$linkService$e2 = _this35.linkService.eventBus) === null || _this35$linkService$e2 === void 0 ? void 0 : _this35$linkService$e2.dispatch("dispatcheventinsandbox", {
                    source: _this35,
                    detail: {
                      id: _this35.data.id,
                      name: eventName,
                      value: event.target.checked
                    }
                  });
                });
              }
            }
          }, {
            key: "_setEventListeners",
            value: function _setEventListeners(element, names, getter) {
              var _iterator28 = _createForOfIteratorHelper(names),
                  _step28;

              try {
                for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                  var _this$data$actions;

                  var _step28$value = _slicedToArray(_step28.value, 2),
                      baseName = _step28$value[0],
                      eventName = _step28$value[1];

                  if (eventName === "Action" || ((_this$data$actions = this.data.actions) === null || _this$data$actions === void 0 ? void 0 : _this$data$actions[eventName])) {
                    this._setEventListener(element, baseName, eventName, getter);
                  }
                }
              } catch (err) {
                _iterator28.e(err);
              } finally {
                _iterator28.f();
              }
            }
          }, {
            key: "_setColor",
            value: function _setColor(event) {
              var detail = event.detail,
                  target = event.target;
              var style = target.style;

              for (var _i8 = 0, _arr2 = ["bgColor", "fillColor", "fgColor", "textColor", "borderColor", "strokeColor"]; _i8 < _arr2.length; _i8++) {
                var name = _arr2[_i8];
                var color = detail[name];

                if (!color) {
                  continue;
                }

                color = _scripting_utils.ColorConverters["".concat(color[0], "_HTML")](color.slice(1));

                switch (name) {
                  case "bgColor":
                  case "fillColor":
                    style.backgroundColor = color;
                    break;

                  case "fgColor":
                  case "textColor":
                    style.color = color;
                    break;

                  case "borderColor":
                  case "strokeColor":
                    style.borderColor = color;
                    break;
                }
              }
            }
          }]);

          return WidgetAnnotationElement;
        }(AnnotationElement);

        var TextWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem) {
          _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);

          var _super17 = _createSuper(TextWidgetAnnotationElement);

          function TextWidgetAnnotationElement(parameters) {
            _classCallCheck(this, TextWidgetAnnotationElement);

            var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
            return _super17.call(this, parameters, {
              isRenderable: isRenderable
            });
          }

          _createClass(TextWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this36 = this;

              var storage = this.annotationStorage;
              var id = this.data.id;
              this.container.className = "textWidgetAnnotation";
              var element = null;

              if (this.renderInteractiveForms) {
                var storedData = storage.getValue(id, {
                  value: this.data.fieldValue,
                  valueAsString: this.data.fieldValue
                });
                var textContent = storedData.valueAsString || storedData.value || "";
                var elementData = {
                  userValue: null,
                  formattedValue: null,
                  beforeInputSelectionRange: null,
                  beforeInputValue: null
                };

                if (this.data.multiLine) {
                  element = document.createElement("textarea");
                  element.textContent = textContent;
                } else {
                  element = document.createElement("input");
                  element.type = "text";
                  element.setAttribute("value", textContent);
                }

                elementData.userValue = textContent;
                element.setAttribute("id", id);
                element.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: event.target.value
                  });
                });

                var blurListener = function blurListener(event) {
                  if (elementData.formattedValue) {
                    event.target.value = elementData.formattedValue;
                  }

                  event.target.scrollLeft = 0;
                  elementData.beforeInputSelectionRange = null;
                };

                if (this.enableScripting && this.hasJSActions) {
                  var _this$data$actions2;

                  element.addEventListener("focus", function (event) {
                    if (elementData.userValue) {
                      event.target.value = elementData.userValue;
                    }
                  });
                  element.addEventListener("updatefromsandbox", function (event) {
                    var detail = event.detail;
                    var actions = {
                      value: function value() {
                        elementData.userValue = detail.value || "";
                        storage.setValue(id, {
                          value: elementData.userValue.toString()
                        });

                        if (!elementData.formattedValue) {
                          event.target.value = elementData.userValue;
                        }
                      },
                      valueAsString: function valueAsString() {
                        elementData.formattedValue = detail.valueAsString || "";

                        if (event.target !== document.activeElement) {
                          event.target.value = elementData.formattedValue;
                        }

                        storage.setValue(id, {
                          formattedValue: elementData.formattedValue
                        });
                      },
                      focus: function focus() {
                        setTimeout(function () {
                          return event.target.focus({
                            preventScroll: false
                          });
                        }, 0);
                      },
                      userName: function userName() {
                        event.target.title = detail.userName;
                      },
                      hidden: function hidden() {
                        event.target.style.visibility = detail.hidden ? "hidden" : "visible";
                        storage.setValue(id, {
                          hidden: detail.hidden
                        });
                      },
                      editable: function editable() {
                        event.target.disabled = !detail.editable;
                      },
                      selRange: function selRange() {
                        var _detail$selRange = _slicedToArray(detail.selRange, 2),
                            selStart = _detail$selRange[0],
                            selEnd = _detail$selRange[1];

                        if (selStart >= 0 && selEnd < event.target.value.length) {
                          event.target.setSelectionRange(selStart, selEnd);
                        }
                      }
                    };
                    Object.keys(detail).filter(function (name) {
                      return name in actions;
                    }).forEach(function (name) {
                      return actions[name]();
                    });

                    _this36._setColor(event);
                  });
                  element.addEventListener("keydown", function (event) {
                    var _this36$linkService$e;

                    elementData.beforeInputValue = event.target.value;
                    var commitKey = -1;

                    if (event.key === "Escape") {
                      commitKey = 0;
                    } else if (event.key === "Enter") {
                      commitKey = 2;
                    } else if (event.key === "Tab") {
                      commitKey = 3;
                    }

                    if (commitKey === -1) {
                      return;
                    }

                    elementData.userValue = event.target.value;
                    (_this36$linkService$e = _this36.linkService.eventBus) === null || _this36$linkService$e === void 0 ? void 0 : _this36$linkService$e.dispatch("dispatcheventinsandbox", {
                      source: _this36,
                      detail: {
                        id: id,
                        name: "Keystroke",
                        value: event.target.value,
                        willCommit: true,
                        commitKey: commitKey,
                        selStart: event.target.selectionStart,
                        selEnd: event.target.selectionEnd
                      }
                    });
                  });
                  var _blurListener = blurListener;
                  blurListener = null;
                  element.addEventListener("blur", function (event) {
                    if (_this36._mouseState.isDown) {
                      var _this36$linkService$e2;

                      elementData.userValue = event.target.value;
                      (_this36$linkService$e2 = _this36.linkService.eventBus) === null || _this36$linkService$e2 === void 0 ? void 0 : _this36$linkService$e2.dispatch("dispatcheventinsandbox", {
                        source: _this36,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: event.target.value,
                          willCommit: true,
                          commitKey: 1,
                          selStart: event.target.selectionStart,
                          selEnd: event.target.selectionEnd
                        }
                      });
                    }

                    _blurListener(event);
                  });
                  element.addEventListener("mousedown", function (event) {
                    elementData.beforeInputValue = event.target.value;
                    elementData.beforeInputSelectionRange = null;
                  });
                  element.addEventListener("keyup", function (event) {
                    if (event.target.selectionStart === event.target.selectionEnd) {
                      elementData.beforeInputSelectionRange = null;
                    }
                  });
                  element.addEventListener("select", function (event) {
                    elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];
                  });

                  if ((_this$data$actions2 = this.data.actions) === null || _this$data$actions2 === void 0 ? void 0 : _this$data$actions2.Keystroke) {
                    element.addEventListener("input", function (event) {
                      var _this36$linkService$e3;

                      var selStart = -1;
                      var selEnd = -1;

                      if (elementData.beforeInputSelectionRange) {
                        var _elementData$beforeIn = _slicedToArray(elementData.beforeInputSelectionRange, 2);

                        selStart = _elementData$beforeIn[0];
                        selEnd = _elementData$beforeIn[1];
                      }

                      (_this36$linkService$e3 = _this36.linkService.eventBus) === null || _this36$linkService$e3 === void 0 ? void 0 : _this36$linkService$e3.dispatch("dispatcheventinsandbox", {
                        source: _this36,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: elementData.beforeInputValue,
                          change: event.data,
                          willCommit: false,
                          selStart: selStart,
                          selEnd: selEnd
                        }
                      });
                    });
                  }

                  this._setEventListeners(element, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                    return event.target.value;
                  });
                }

                if (blurListener) {
                  element.addEventListener("blur", blurListener);
                }

                element.disabled = this.data.readOnly;
                element.name = this.data.fieldName;

                if (this.data.maxLen !== null) {
                  element.maxLength = this.data.maxLen;
                }

                if (this.data.comb) {
                  var fieldWidth = this.data.rect[2] - this.data.rect[0];
                  var combWidth = fieldWidth / this.data.maxLen;
                  element.classList.add("comb");
                  element.style.letterSpacing = "calc(".concat(combWidth, "px - 1ch)");
                }
              } else {
                element = document.createElement("div");
                element.textContent = this.data.fieldValue;
                element.style.verticalAlign = "middle";
                element.style.display = "table-cell";
              }

              this._setTextStyle(element);

              this.container.appendChild(element);
              return this.container;
            }
          }, {
            key: "_setTextStyle",
            value: function _setTextStyle(element) {
              var TEXT_ALIGNMENT = ["left", "center", "right"];
              var _this$data$defaultApp = this.data.defaultAppearanceData,
                  fontSize = _this$data$defaultApp.fontSize,
                  fontColor = _this$data$defaultApp.fontColor;
              var style = element.style;

              if (fontSize) {
                style.fontSize = "".concat(fontSize, "px");
              }

              style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);

              if (this.data.textAlignment !== null) {
                style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
              }
            }
          }]);

          return TextWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var CheckboxWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem2) {
          _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem2);

          var _super18 = _createSuper(CheckboxWidgetAnnotationElement);

          function CheckboxWidgetAnnotationElement(parameters) {
            _classCallCheck(this, CheckboxWidgetAnnotationElement);

            return _super18.call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            });
          }

          _createClass(CheckboxWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this37 = this;

              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.fieldValue && (data.exportValue && data.exportValue === data.fieldValue || !data.exportValue && data.fieldValue !== "Off")
              }).value;
              this.container.className = "buttonWidgetAnnotation checkBox";
              var element = document.createElement("input");
              element.disabled = data.readOnly;
              element.type = "checkbox";
              element.name = this.data.fieldName;

              if (value) {
                element.setAttribute("checked", true);
              }

              element.setAttribute("id", id);
              element.addEventListener("change", function (event) {
                var name = event.target.name;

                var _iterator29 = _createForOfIteratorHelper(document.getElementsByName(name)),
                    _step29;

                try {
                  for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
                    var checkbox = _step29.value;

                    if (checkbox !== event.target) {
                      checkbox.checked = false;
                      storage.setValue(checkbox.parentNode.getAttribute("data-annotation-id"), {
                        value: false
                      });
                    }
                  }
                } catch (err) {
                  _iterator29.e(err);
                } finally {
                  _iterator29.f();
                }

                storage.setValue(id, {
                  value: event.target.checked
                });
              });

              if (this.enableScripting && this.hasJSActions) {
                element.addEventListener("updatefromsandbox", function (event) {
                  var detail = event.detail;
                  var actions = {
                    value: function value() {
                      event.target.checked = detail.value !== "Off";
                      storage.setValue(id, {
                        value: event.target.checked
                      });
                    },
                    focus: function focus() {
                      setTimeout(function () {
                        return event.target.focus({
                          preventScroll: false
                        });
                      }, 0);
                    },
                    hidden: function hidden() {
                      event.target.style.visibility = detail.hidden ? "hidden" : "visible";
                      storage.setValue(id, {
                        hidden: detail.hidden
                      });
                    },
                    editable: function editable() {
                      event.target.disabled = !detail.editable;
                    }
                  };
                  Object.keys(detail).filter(function (name) {
                    return name in actions;
                  }).forEach(function (name) {
                    return actions[name]();
                  });

                  _this37._setColor(event);
                });

                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }

              this.container.appendChild(element);
              return this.container;
            }
          }]);

          return CheckboxWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var RadioButtonWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem3) {
          _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem3);

          var _super19 = _createSuper(RadioButtonWidgetAnnotationElement);

          function RadioButtonWidgetAnnotationElement(parameters) {
            _classCallCheck(this, RadioButtonWidgetAnnotationElement);

            return _super19.call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            });
          }

          _createClass(RadioButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this38 = this;

              this.container.className = "buttonWidgetAnnotation radioButton";
              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.fieldValue === data.buttonValue
              }).value;
              var element = document.createElement("input");
              element.disabled = data.readOnly;
              element.type = "radio";
              element.name = data.fieldName;

              if (value) {
                element.setAttribute("checked", true);
              }

              element.setAttribute("id", id);
              element.addEventListener("change", function (event) {
                var target = event.target;

                var _iterator30 = _createForOfIteratorHelper(document.getElementsByName(target.name)),
                    _step30;

                try {
                  for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                    var radio = _step30.value;

                    if (radio !== target) {
                      storage.setValue(radio.getAttribute("id"), {
                        value: false
                      });
                    }
                  }
                } catch (err) {
                  _iterator30.e(err);
                } finally {
                  _iterator30.f();
                }

                storage.setValue(id, {
                  value: target.checked
                });
              });

              if (this.enableScripting && this.hasJSActions) {
                var pdfButtonValue = data.buttonValue;
                element.addEventListener("updatefromsandbox", function (event) {
                  var detail = event.detail;
                  var actions = {
                    value: function value() {
                      var checked = pdfButtonValue === detail.value;

                      var _iterator31 = _createForOfIteratorHelper(document.getElementsByName(event.target.name)),
                          _step31;

                      try {
                        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                          var radio = _step31.value;
                          var radioId = radio.getAttribute("id");
                          radio.checked = radioId === id && checked;
                          storage.setValue(radioId, {
                            value: radio.checked
                          });
                        }
                      } catch (err) {
                        _iterator31.e(err);
                      } finally {
                        _iterator31.f();
                      }
                    },
                    focus: function focus() {
                      setTimeout(function () {
                        return event.target.focus({
                          preventScroll: false
                        });
                      }, 0);
                    },
                    hidden: function hidden() {
                      event.target.style.visibility = detail.hidden ? "hidden" : "visible";
                      storage.setValue(id, {
                        hidden: detail.hidden
                      });
                    },
                    editable: function editable() {
                      event.target.disabled = !detail.editable;
                    }
                  };
                  Object.keys(detail).filter(function (name) {
                    return name in actions;
                  }).forEach(function (name) {
                    return actions[name]();
                  });

                  _this38._setColor(event);
                });

                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }

              this.container.appendChild(element);
              return this.container;
            }
          }]);

          return RadioButtonWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var PushButtonWidgetAnnotationElement = /*#__PURE__*/function (_LinkAnnotationElemen) {
          _inherits(PushButtonWidgetAnnotationElement, _LinkAnnotationElemen);

          var _super20 = _createSuper(PushButtonWidgetAnnotationElement);

          function PushButtonWidgetAnnotationElement() {
            _classCallCheck(this, PushButtonWidgetAnnotationElement);

            return _super20.apply(this, arguments);
          }

          _createClass(PushButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var container = _get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype), "render", this).call(this);

              container.className = "buttonWidgetAnnotation pushButton";

              if (this.data.alternativeText) {
                container.title = this.data.alternativeText;
              }

              return container;
            }
          }]);

          return PushButtonWidgetAnnotationElement;
        }(LinkAnnotationElement);

        var ChoiceWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem4) {
          _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem4);

          var _super21 = _createSuper(ChoiceWidgetAnnotationElement);

          function ChoiceWidgetAnnotationElement(parameters) {
            _classCallCheck(this, ChoiceWidgetAnnotationElement);

            return _super21.call(this, parameters, {
              isRenderable: parameters.renderInteractiveForms
            });
          }

          _createClass(ChoiceWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this39 = this;

              this.container.className = "choiceWidgetAnnotation";
              var storage = this.annotationStorage;
              var id = this.data.id;
              storage.getValue(id, {
                value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined
              });
              var selectElement = document.createElement("select");
              selectElement.disabled = this.data.readOnly;
              selectElement.name = this.data.fieldName;
              selectElement.setAttribute("id", id);

              if (!this.data.combo) {
                selectElement.size = this.data.options.length;

                if (this.data.multiSelect) {
                  selectElement.multiple = true;
                }
              }

              var _iterator32 = _createForOfIteratorHelper(this.data.options),
                  _step32;

              try {
                for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                  var option = _step32.value;
                  var optionElement = document.createElement("option");
                  optionElement.textContent = option.displayValue;
                  optionElement.value = option.exportValue;

                  if (this.data.fieldValue.includes(option.exportValue)) {
                    optionElement.setAttribute("selected", true);
                  }

                  selectElement.appendChild(optionElement);
                }
              } catch (err) {
                _iterator32.e(err);
              } finally {
                _iterator32.f();
              }

              var getValue = function getValue(event, isExport) {
                var name = isExport ? "value" : "textContent";
                var options = event.target.options;

                if (!event.target.multiple) {
                  return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
                }

                return Array.prototype.filter.call(options, function (option) {
                  return option.selected;
                }).map(function (option) {
                  return option[name];
                });
              };

              var getItems = function getItems(event) {
                var options = event.target.options;
                return Array.prototype.map.call(options, function (option) {
                  return {
                    displayValue: option.textContent,
                    exportValue: option.value
                  };
                });
              };

              if (this.enableScripting && this.hasJSActions) {
                selectElement.addEventListener("updatefromsandbox", function (event) {
                  var detail = event.detail;
                  var actions = {
                    value: function value() {
                      var options = selectElement.options;
                      var value = detail.value;
                      var values = new Set(Array.isArray(value) ? value : [value]);
                      Array.prototype.forEach.call(options, function (option) {
                        option.selected = values.has(option.value);
                      });
                      storage.setValue(id, {
                        value: getValue(event, true)
                      });
                    },
                    multipleSelection: function multipleSelection() {
                      selectElement.multiple = true;
                    },
                    remove: function remove() {
                      var options = selectElement.options;
                      var index = detail.remove;
                      options[index].selected = false;
                      selectElement.remove(index);

                      if (options.length > 0) {
                        var i = Array.prototype.findIndex.call(options, function (option) {
                          return option.selected;
                        });

                        if (i === -1) {
                          options[0].selected = true;
                        }
                      }

                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    clear: function clear() {
                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }

                      storage.setValue(id, {
                        value: null,
                        items: []
                      });
                    },
                    insert: function insert() {
                      var _detail$insert = detail.insert,
                          index = _detail$insert.index,
                          displayValue = _detail$insert.displayValue,
                          exportValue = _detail$insert.exportValue;
                      var optionElement = document.createElement("option");
                      optionElement.textContent = displayValue;
                      optionElement.value = exportValue;
                      selectElement.insertBefore(optionElement, selectElement.children[index]);
                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    items: function items() {
                      var items = detail.items;

                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }

                      var _iterator33 = _createForOfIteratorHelper(items),
                          _step33;

                      try {
                        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                          var item = _step33.value;
                          var displayValue = item.displayValue,
                              exportValue = item.exportValue;
                          var optionElement = document.createElement("option");
                          optionElement.textContent = displayValue;
                          optionElement.value = exportValue;
                          selectElement.appendChild(optionElement);
                        }
                      } catch (err) {
                        _iterator33.e(err);
                      } finally {
                        _iterator33.f();
                      }

                      if (selectElement.options.length > 0) {
                        selectElement.options[0].selected = true;
                      }

                      storage.setValue(id, {
                        value: getValue(event, true),
                        items: getItems(event)
                      });
                    },
                    indices: function indices() {
                      var indices = new Set(detail.indices);
                      var options = event.target.options;
                      Array.prototype.forEach.call(options, function (option, i) {
                        option.selected = indices.has(i);
                      });
                      storage.setValue(id, {
                        value: getValue(event, true)
                      });
                    },
                    focus: function focus() {
                      setTimeout(function () {
                        return event.target.focus({
                          preventScroll: false
                        });
                      }, 0);
                    },
                    hidden: function hidden() {
                      event.target.style.visibility = detail.hidden ? "hidden" : "visible";
                      storage.setValue(id, {
                        hidden: detail.hidden
                      });
                    },
                    editable: function editable() {
                      event.target.disabled = !detail.editable;
                    }
                  };
                  Object.keys(detail).filter(function (name) {
                    return name in actions;
                  }).forEach(function (name) {
                    return actions[name]();
                  });

                  _this39._setColor(event);
                });
                selectElement.addEventListener("input", function (event) {
                  var _this39$linkService$e;

                  var exportValue = getValue(event, true);
                  var value = getValue(event, false);
                  storage.setValue(id, {
                    value: exportValue
                  });
                  (_this39$linkService$e = _this39.linkService.eventBus) === null || _this39$linkService$e === void 0 ? void 0 : _this39$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this39,
                    detail: {
                      id: id,
                      name: "Keystroke",
                      value: value,
                      changeEx: exportValue,
                      willCommit: true,
                      commitKey: 1,
                      keyDown: false
                    }
                  });
                });

                this._setEventListeners(selectElement, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"]], function (event) {
                  return event.target.checked;
                });
              } else {
                selectElement.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: getValue(event)
                  });
                });
              }

              this.container.appendChild(selectElement);
              return this.container;
            }
          }]);

          return ChoiceWidgetAnnotationElement;
        }(WidgetAnnotationElement);

        var PopupAnnotationElement = /*#__PURE__*/function (_AnnotationElement4) {
          _inherits(PopupAnnotationElement, _AnnotationElement4);

          var _super22 = _createSuper(PopupAnnotationElement);

          function PopupAnnotationElement(parameters) {
            _classCallCheck(this, PopupAnnotationElement);

            var isRenderable = !!(parameters.data.title || parameters.data.contents);
            return _super22.call(this, parameters, {
              isRenderable: isRenderable
            });
          }

          _createClass(PopupAnnotationElement, [{
            key: "render",
            value: function render() {
              var IGNORE_TYPES = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];
              this.container.className = "popupAnnotation";

              if (IGNORE_TYPES.includes(this.data.parentType)) {
                return this.container;
              }

              var selector = "[data-annotation-id=\"".concat(this.data.parentId, "\"]");
              var parentElements = this.layer.querySelectorAll(selector);

              if (parentElements.length === 0) {
                return this.container;
              }

              var popup = new PopupElement({
                container: this.container,
                trigger: Array.from(parentElements),
                color: this.data.color,
                title: this.data.title,
                modificationDate: this.data.modificationDate,
                contents: this.data.contents
              });
              var page = this.page;

              var rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);

              var popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];
              var popupTop = rect[1];
              this.container.style.transformOrigin = "".concat(-popupLeft, "px ").concat(-popupTop, "px");
              this.container.style.left = "".concat(popupLeft, "px");
              this.container.style.top = "".concat(popupTop, "px");
              this.container.appendChild(popup.render());
              return this.container;
            }
          }]);

          return PopupAnnotationElement;
        }(AnnotationElement);

        var PopupElement = /*#__PURE__*/function () {
          function PopupElement(parameters) {
            _classCallCheck(this, PopupElement);

            this.container = parameters.container;
            this.trigger = parameters.trigger;
            this.color = parameters.color;
            this.title = parameters.title;
            this.modificationDate = parameters.modificationDate;
            this.contents = parameters.contents;
            this.hideWrapper = parameters.hideWrapper || false;
            this.pinned = false;
          }

          _createClass(PopupElement, [{
            key: "render",
            value: function render() {
              var _this40 = this;

              var BACKGROUND_ENLIGHT = 0.7;
              var wrapper = document.createElement("div");
              wrapper.className = "popupWrapper";
              this.hideElement = this.hideWrapper ? wrapper : this.container;
              this.hideElement.hidden = true;
              var popup = document.createElement("div");
              popup.className = "popup";
              var color = this.color;

              if (color) {
                var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
                var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
                var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
                popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);
              }

              var title = document.createElement("h1");
              title.textContent = this.title;
              popup.appendChild(title);

              var dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);

              if (dateObject) {
                var modificationDate = document.createElement("span");
                modificationDate.textContent = "{{date}}, {{time}}";
                modificationDate.dataset.l10nId = "annotation_date_string";
                modificationDate.dataset.l10nArgs = JSON.stringify({
                  date: dateObject.toLocaleDateString(),
                  time: dateObject.toLocaleTimeString()
                });
                popup.appendChild(modificationDate);
              }

              var contents = this._formatContents(this.contents);

              popup.appendChild(contents);

              if (!Array.isArray(this.trigger)) {
                this.trigger = [this.trigger];
              }

              this.trigger.forEach(function (element) {
                element.addEventListener("click", _this40._toggle.bind(_this40));
                element.addEventListener("mouseover", _this40._show.bind(_this40, false));
                element.addEventListener("mouseout", _this40._hide.bind(_this40, false));
              });
              popup.addEventListener("click", this._hide.bind(this, true));
              wrapper.appendChild(popup);
              return wrapper;
            }
          }, {
            key: "_formatContents",
            value: function _formatContents(contents) {
              var p = document.createElement("p");
              var lines = contents.split(/(?:\r\n?|\n)/);

              for (var i = 0, ii = lines.length; i < ii; ++i) {
                var line = lines[i];
                p.appendChild(document.createTextNode(line));

                if (i < ii - 1) {
                  p.appendChild(document.createElement("br"));
                }
              }

              return p;
            }
          }, {
            key: "_toggle",
            value: function _toggle() {
              if (this.pinned) {
                this._hide(true);
              } else {
                this._show(true);
              }
            }
          }, {
            key: "_show",
            value: function _show() {
              var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

              if (pin) {
                this.pinned = true;
              }

              if (this.hideElement.hidden) {
                this.hideElement.hidden = false;
                this.container.style.zIndex += 1;
              }
            }
          }, {
            key: "_hide",
            value: function _hide() {
              var unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

              if (unpin) {
                this.pinned = false;
              }

              if (!this.hideElement.hidden && !this.pinned) {
                this.hideElement.hidden = true;
                this.container.style.zIndex -= 1;
              }
            }
          }]);

          return PopupElement;
        }();

        var FreeTextAnnotationElement = /*#__PURE__*/function (_AnnotationElement5) {
          _inherits(FreeTextAnnotationElement, _AnnotationElement5);

          var _super23 = _createSuper(FreeTextAnnotationElement);

          function FreeTextAnnotationElement(parameters) {
            _classCallCheck(this, FreeTextAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super23.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(FreeTextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "freeTextAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return FreeTextAnnotationElement;
        }(AnnotationElement);

        var LineAnnotationElement = /*#__PURE__*/function (_AnnotationElement6) {
          _inherits(LineAnnotationElement, _AnnotationElement6);

          var _super24 = _createSuper(LineAnnotationElement);

          function LineAnnotationElement(parameters) {
            _classCallCheck(this, LineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super24.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(LineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "lineAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var line = this.svgFactory.createElement("svg:line");
              line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
              line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
              line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
              line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
              line.setAttribute("stroke-width", data.borderStyle.width || 1);
              line.setAttribute("stroke", "transparent");
              svg.appendChild(line);
              this.container.append(svg);

              this._createPopup(line, data);

              return this.container;
            }
          }]);

          return LineAnnotationElement;
        }(AnnotationElement);

        var SquareAnnotationElement = /*#__PURE__*/function (_AnnotationElement7) {
          _inherits(SquareAnnotationElement, _AnnotationElement7);

          var _super25 = _createSuper(SquareAnnotationElement);

          function SquareAnnotationElement(parameters) {
            _classCallCheck(this, SquareAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super25.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(SquareAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "squareAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var borderWidth = data.borderStyle.width;
              var square = this.svgFactory.createElement("svg:rect");
              square.setAttribute("x", borderWidth / 2);
              square.setAttribute("y", borderWidth / 2);
              square.setAttribute("width", width - borderWidth);
              square.setAttribute("height", height - borderWidth);
              square.setAttribute("stroke-width", borderWidth || 1);
              square.setAttribute("stroke", "transparent");
              square.setAttribute("fill", "none");
              svg.appendChild(square);
              this.container.append(svg);

              this._createPopup(square, data);

              return this.container;
            }
          }]);

          return SquareAnnotationElement;
        }(AnnotationElement);

        var CircleAnnotationElement = /*#__PURE__*/function (_AnnotationElement8) {
          _inherits(CircleAnnotationElement, _AnnotationElement8);

          var _super26 = _createSuper(CircleAnnotationElement);

          function CircleAnnotationElement(parameters) {
            _classCallCheck(this, CircleAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super26.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(CircleAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "circleAnnotation";
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var borderWidth = data.borderStyle.width;
              var circle = this.svgFactory.createElement("svg:ellipse");
              circle.setAttribute("cx", width / 2);
              circle.setAttribute("cy", height / 2);
              circle.setAttribute("rx", width / 2 - borderWidth / 2);
              circle.setAttribute("ry", height / 2 - borderWidth / 2);
              circle.setAttribute("stroke-width", borderWidth || 1);
              circle.setAttribute("stroke", "transparent");
              circle.setAttribute("fill", "none");
              svg.appendChild(circle);
              this.container.append(svg);

              this._createPopup(circle, data);

              return this.container;
            }
          }]);

          return CircleAnnotationElement;
        }(AnnotationElement);

        var PolylineAnnotationElement = /*#__PURE__*/function (_AnnotationElement9) {
          _inherits(PolylineAnnotationElement, _AnnotationElement9);

          var _super27 = _createSuper(PolylineAnnotationElement);

          function PolylineAnnotationElement(parameters) {
            var _this41;

            _classCallCheck(this, PolylineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            _this41 = _super27.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _this41.containerClassName = "polylineAnnotation";
            _this41.svgElementName = "svg:polyline";
            return _this41;
          }

          _createClass(PolylineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = this.containerClassName;
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);
              var points = [];

              var _iterator34 = _createForOfIteratorHelper(data.vertices),
                  _step34;

              try {
                for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                  var coordinate = _step34.value;
                  var x = coordinate.x - data.rect[0];
                  var y = data.rect[3] - coordinate.y;
                  points.push(x + "," + y);
                }
              } catch (err) {
                _iterator34.e(err);
              } finally {
                _iterator34.f();
              }

              points = points.join(" ");
              var polyline = this.svgFactory.createElement(this.svgElementName);
              polyline.setAttribute("points", points);
              polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
              polyline.setAttribute("stroke", "transparent");
              polyline.setAttribute("fill", "none");
              svg.appendChild(polyline);
              this.container.append(svg);

              this._createPopup(polyline, data);

              return this.container;
            }
          }]);

          return PolylineAnnotationElement;
        }(AnnotationElement);

        var PolygonAnnotationElement = /*#__PURE__*/function (_PolylineAnnotationEl) {
          _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);

          var _super28 = _createSuper(PolygonAnnotationElement);

          function PolygonAnnotationElement(parameters) {
            var _this42;

            _classCallCheck(this, PolygonAnnotationElement);

            _this42 = _super28.call(this, parameters);
            _this42.containerClassName = "polygonAnnotation";
            _this42.svgElementName = "svg:polygon";
            return _this42;
          }

          return PolygonAnnotationElement;
        }(PolylineAnnotationElement);

        var CaretAnnotationElement = /*#__PURE__*/function (_AnnotationElement10) {
          _inherits(CaretAnnotationElement, _AnnotationElement10);

          var _super29 = _createSuper(CaretAnnotationElement);

          function CaretAnnotationElement(parameters) {
            _classCallCheck(this, CaretAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super29.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(CaretAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "caretAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return CaretAnnotationElement;
        }(AnnotationElement);

        var InkAnnotationElement = /*#__PURE__*/function (_AnnotationElement11) {
          _inherits(InkAnnotationElement, _AnnotationElement11);

          var _super30 = _createSuper(InkAnnotationElement);

          function InkAnnotationElement(parameters) {
            var _this43;

            _classCallCheck(this, InkAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            _this43 = _super30.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _this43.containerClassName = "inkAnnotation";
            _this43.svgElementName = "svg:polyline";
            return _this43;
          }

          _createClass(InkAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = this.containerClassName;
              var data = this.data;
              var width = data.rect[2] - data.rect[0];
              var height = data.rect[3] - data.rect[1];
              var svg = this.svgFactory.create(width, height);

              var _iterator35 = _createForOfIteratorHelper(data.inkLists),
                  _step35;

              try {
                for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                  var inkList = _step35.value;
                  var points = [];

                  var _iterator36 = _createForOfIteratorHelper(inkList),
                      _step36;

                  try {
                    for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                      var coordinate = _step36.value;
                      var x = coordinate.x - data.rect[0];
                      var y = data.rect[3] - coordinate.y;
                      points.push("".concat(x, ",").concat(y));
                    }
                  } catch (err) {
                    _iterator36.e(err);
                  } finally {
                    _iterator36.f();
                  }

                  points = points.join(" ");
                  var polyline = this.svgFactory.createElement(this.svgElementName);
                  polyline.setAttribute("points", points);
                  polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                  polyline.setAttribute("stroke", "transparent");
                  polyline.setAttribute("fill", "none");

                  this._createPopup(polyline, data);

                  svg.appendChild(polyline);
                }
              } catch (err) {
                _iterator35.e(err);
              } finally {
                _iterator35.f();
              }

              this.container.append(svg);
              return this.container;
            }
          }]);

          return InkAnnotationElement;
        }(AnnotationElement);

        var HighlightAnnotationElement = /*#__PURE__*/function (_AnnotationElement12) {
          _inherits(HighlightAnnotationElement, _AnnotationElement12);

          var _super31 = _createSuper(HighlightAnnotationElement);

          function HighlightAnnotationElement(parameters) {
            _classCallCheck(this, HighlightAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super31.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          _createClass(HighlightAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("highlightAnnotation");
              }

              this.container.className = "highlightAnnotation";
              return this.container;
            }
          }]);

          return HighlightAnnotationElement;
        }(AnnotationElement);

        var UnderlineAnnotationElement = /*#__PURE__*/function (_AnnotationElement13) {
          _inherits(UnderlineAnnotationElement, _AnnotationElement13);

          var _super32 = _createSuper(UnderlineAnnotationElement);

          function UnderlineAnnotationElement(parameters) {
            _classCallCheck(this, UnderlineAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super32.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          _createClass(UnderlineAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("underlineAnnotation");
              }

              this.container.className = "underlineAnnotation";
              return this.container;
            }
          }]);

          return UnderlineAnnotationElement;
        }(AnnotationElement);

        var SquigglyAnnotationElement = /*#__PURE__*/function (_AnnotationElement14) {
          _inherits(SquigglyAnnotationElement, _AnnotationElement14);

          var _super33 = _createSuper(SquigglyAnnotationElement);

          function SquigglyAnnotationElement(parameters) {
            _classCallCheck(this, SquigglyAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super33.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          _createClass(SquigglyAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("squigglyAnnotation");
              }

              this.container.className = "squigglyAnnotation";
              return this.container;
            }
          }]);

          return SquigglyAnnotationElement;
        }(AnnotationElement);

        var StrikeOutAnnotationElement = /*#__PURE__*/function (_AnnotationElement15) {
          _inherits(StrikeOutAnnotationElement, _AnnotationElement15);

          var _super34 = _createSuper(StrikeOutAnnotationElement);

          function StrikeOutAnnotationElement(parameters) {
            _classCallCheck(this, StrikeOutAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super34.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }

          _createClass(StrikeOutAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("strikeoutAnnotation");
              }

              this.container.className = "strikeoutAnnotation";
              return this.container;
            }
          }]);

          return StrikeOutAnnotationElement;
        }(AnnotationElement);

        var StampAnnotationElement = /*#__PURE__*/function (_AnnotationElement16) {
          _inherits(StampAnnotationElement, _AnnotationElement16);

          var _super35 = _createSuper(StampAnnotationElement);

          function StampAnnotationElement(parameters) {
            _classCallCheck(this, StampAnnotationElement);

            var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);
            return _super35.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }

          _createClass(StampAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "stampAnnotation";

              if (!this.data.hasPopup) {
                this._createPopup(null, this.data);
              }

              return this.container;
            }
          }]);

          return StampAnnotationElement;
        }(AnnotationElement);

        var FileAttachmentAnnotationElement = /*#__PURE__*/function (_AnnotationElement17) {
          _inherits(FileAttachmentAnnotationElement, _AnnotationElement17);

          var _super36 = _createSuper(FileAttachmentAnnotationElement);

          function FileAttachmentAnnotationElement(parameters) {
            var _this44$linkService$e;

            var _this44;

            _classCallCheck(this, FileAttachmentAnnotationElement);

            _this44 = _super36.call(this, parameters, {
              isRenderable: true
            });
            var _this44$data$file = _this44.data.file,
                filename = _this44$data$file.filename,
                content = _this44$data$file.content;
            _this44.filename = (0, _display_utils.getFilenameFromUrl)(filename);
            _this44.content = content;
            (_this44$linkService$e = _this44.linkService.eventBus) === null || _this44$linkService$e === void 0 ? void 0 : _this44$linkService$e.dispatch("fileattachmentannotation", {
              source: _assertThisInitialized(_this44),
              id: (0, _util.stringToPDFString)(filename),
              filename: filename,
              content: content
            });
            return _this44;
          }

          _createClass(FileAttachmentAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.className = "fileAttachmentAnnotation";
              var trigger = document.createElement("div");
              trigger.style.height = this.container.style.height;
              trigger.style.width = this.container.style.width;
              trigger.addEventListener("dblclick", this._download.bind(this));

              if (!this.data.hasPopup && (this.data.title || this.data.contents)) {
                this._createPopup(trigger, this.data);
              }

              this.container.appendChild(trigger);
              return this.container;
            }
          }, {
            key: "_download",
            value: function _download() {
              var _this$downloadManager;

              (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(this.container, this.content, this.filename);
            }
          }]);

          return FileAttachmentAnnotationElement;
        }(AnnotationElement);

        var AnnotationLayer = /*#__PURE__*/function () {
          function AnnotationLayer() {
            _classCallCheck(this, AnnotationLayer);
          }

          _createClass(AnnotationLayer, null, [{
            key: "render",
            value: function render(parameters) {
              var sortedAnnotations = [],
                  popupAnnotations = [];

              var _iterator37 = _createForOfIteratorHelper(parameters.annotations),
                  _step37;

              try {
                for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                  var _data3 = _step37.value;

                  if (!_data3) {
                    continue;
                  }

                  if (_data3.annotationType === _util.AnnotationType.POPUP) {
                    popupAnnotations.push(_data3);
                    continue;
                  }

                  sortedAnnotations.push(_data3);
                }
              } catch (err) {
                _iterator37.e(err);
              } finally {
                _iterator37.f();
              }

              if (popupAnnotations.length) {
                sortedAnnotations.push.apply(sortedAnnotations, popupAnnotations);
              }

              for (var _i9 = 0, _sortedAnnotations = sortedAnnotations; _i9 < _sortedAnnotations.length; _i9++) {
                var data = _sortedAnnotations[_i9];
                var element = AnnotationElementFactory.create({
                  data: data,
                  layer: parameters.div,
                  page: parameters.page,
                  viewport: parameters.viewport,
                  linkService: parameters.linkService,
                  downloadManager: parameters.downloadManager,
                  imageResourcesPath: parameters.imageResourcesPath || "",
                  renderInteractiveForms: parameters.renderInteractiveForms !== false,
                  svgFactory: new _display_utils.DOMSVGFactory(),
                  annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),
                  enableScripting: parameters.enableScripting,
                  hasJSActions: parameters.hasJSActions,
                  mouseState: parameters.mouseState || {
                    isDown: false
                  }
                });

                if (element.isRenderable) {
                  var rendered = element.render();

                  if (data.hidden) {
                    rendered.style.visibility = "hidden";
                  }

                  if (Array.isArray(rendered)) {
                    var _iterator38 = _createForOfIteratorHelper(rendered),
                        _step38;

                    try {
                      for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                        var renderedElement = _step38.value;
                        parameters.div.appendChild(renderedElement);
                      }
                    } catch (err) {
                      _iterator38.e(err);
                    } finally {
                      _iterator38.f();
                    }
                  } else {
                    if (element instanceof PopupAnnotationElement) {
                      parameters.div.prepend(rendered);
                    } else {
                      parameters.div.appendChild(rendered);
                    }
                  }
                }
              }
            }
          }, {
            key: "update",
            value: function update(parameters) {
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");

              var _iterator39 = _createForOfIteratorHelper(parameters.annotations),
                  _step39;

              try {
                for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                  var data = _step39.value;
                  var elements = parameters.div.querySelectorAll("[data-annotation-id=\"".concat(data.id, "\"]"));

                  if (elements) {
                    elements.forEach(function (element) {
                      element.style.transform = transform;
                    });
                  }
                }
              } catch (err) {
                _iterator39.e(err);
              } finally {
                _iterator39.f();
              }

              parameters.div.hidden = false;
            }
          }]);

          return AnnotationLayer;
        }();

        exports.AnnotationLayer = AnnotationLayer;
        /***/
      },
      /* 19 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ColorConverters = void 0;

        function makeColorComp(n) {
          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
        }

        var ColorConverters = /*#__PURE__*/function () {
          function ColorConverters() {
            _classCallCheck(this, ColorConverters);
          }

          _createClass(ColorConverters, null, [{
            key: "CMYK_G",
            value: function CMYK_G(_ref37) {
              var _ref38 = _slicedToArray(_ref37, 4),
                  c = _ref38[0],
                  y = _ref38[1],
                  m = _ref38[2],
                  k = _ref38[3];

              return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
            }
          }, {
            key: "G_CMYK",
            value: function G_CMYK(_ref39) {
              var _ref40 = _slicedToArray(_ref39, 1),
                  g = _ref40[0];

              return ["CMYK", 0, 0, 0, 1 - g];
            }
          }, {
            key: "G_RGB",
            value: function G_RGB(_ref41) {
              var _ref42 = _slicedToArray(_ref41, 1),
                  g = _ref42[0];

              return ["RGB", g, g, g];
            }
          }, {
            key: "G_HTML",
            value: function G_HTML(_ref43) {
              var _ref44 = _slicedToArray(_ref43, 1),
                  g = _ref44[0];

              var G = makeColorComp(g);
              return "#".concat(G).concat(G).concat(G);
            }
          }, {
            key: "RGB_G",
            value: function RGB_G(_ref45) {
              var _ref46 = _slicedToArray(_ref45, 3),
                  r = _ref46[0],
                  g = _ref46[1],
                  b = _ref46[2];

              return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
            }
          }, {
            key: "RGB_HTML",
            value: function RGB_HTML(_ref47) {
              var _ref48 = _slicedToArray(_ref47, 3),
                  r = _ref48[0],
                  g = _ref48[1],
                  b = _ref48[2];

              var R = makeColorComp(r);
              var G = makeColorComp(g);
              var B = makeColorComp(b);
              return "#".concat(R).concat(G).concat(B);
            }
          }, {
            key: "T_HTML",
            value: function T_HTML() {
              return "#00000000";
            }
          }, {
            key: "CMYK_RGB",
            value: function CMYK_RGB(_ref49) {
              var _ref50 = _slicedToArray(_ref49, 4),
                  c = _ref50[0],
                  y = _ref50[1],
                  m = _ref50[2],
                  k = _ref50[3];

              return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
            }
          }, {
            key: "CMYK_HTML",
            value: function CMYK_HTML(components) {
              return this.RGB_HTML(this.CMYK_RGB(components));
            }
          }, {
            key: "RGB_CMYK",
            value: function RGB_CMYK(_ref51) {
              var _ref52 = _slicedToArray(_ref51, 3),
                  r = _ref52[0],
                  g = _ref52[1],
                  b = _ref52[2];

              var c = 1 - r;
              var m = 1 - g;
              var y = 1 - b;
              var k = Math.min(c, m, y);
              return ["CMYK", c, m, y, k];
            }
          }]);

          return ColorConverters;
        }();

        exports.ColorConverters = ColorConverters;
        /***/
      },
      /* 20 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.renderTextLayer = void 0;

        var _util = __w_pdfjs_require__(2);

        var renderTextLayer = function renderTextLayerClosure() {
          var MAX_TEXT_DIVS_TO_RENDER = 100000;
          var DEFAULT_FONT_SIZE = 30;
          var DEFAULT_FONT_ASCENT = 0.8;
          var ascentCache = new Map();
          var NonWhitespaceRegexp = /\S/;

          function isAllWhitespace(str) {
            return !NonWhitespaceRegexp.test(str);
          }

          function getAscent(fontFamily, ctx) {
            var cachedAscent = ascentCache.get(fontFamily);

            if (cachedAscent) {
              return cachedAscent;
            }

            ctx.save();
            ctx.font = "".concat(DEFAULT_FONT_SIZE, "px ").concat(fontFamily);
            var metrics = ctx.measureText("");
            var ascent = metrics.fontBoundingBoxAscent;
            var descent = Math.abs(metrics.fontBoundingBoxDescent);

            if (ascent) {
              ctx.restore();
              var ratio = ascent / (ascent + descent);
              ascentCache.set(fontFamily, ratio);
              return ratio;
            }

            ctx.strokeStyle = "red";
            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
            ctx.strokeText("g", 0, 0);
            var pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
            descent = 0;

            for (var i = pixels.length - 1 - 3; i >= 0; i -= 4) {
              if (pixels[i] > 0) {
                descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
                break;
              }
            }

            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
            ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
            pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
            ascent = 0;

            for (var _i10 = 0, ii = pixels.length; _i10 < ii; _i10 += 4) {
              if (pixels[_i10] > 0) {
                ascent = DEFAULT_FONT_SIZE - Math.floor(_i10 / 4 / DEFAULT_FONT_SIZE);
                break;
              }
            }

            ctx.restore();

            if (ascent) {
              var _ratio = ascent / (ascent + descent);

              ascentCache.set(fontFamily, _ratio);
              return _ratio;
            }

            ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
            return DEFAULT_FONT_ASCENT;
          }

          function appendText(task, geom, styles, ctx) {
            var textDiv = document.createElement("span");
            var textDivProperties = {
              angle: 0,
              canvasWidth: 0,
              isWhitespace: false,
              originalTransform: null,
              paddingBottom: 0,
              paddingLeft: 0,
              paddingRight: 0,
              paddingTop: 0,
              scale: 1
            };

            task._textDivs.push(textDiv);

            if (isAllWhitespace(geom.str)) {
              textDivProperties.isWhitespace = true;

              task._textDivProperties.set(textDiv, textDivProperties);

              return;
            }

            var tx = _util.Util.transform(task._viewport.transform, geom.transform);

            var angle = Math.atan2(tx[1], tx[0]);
            var style = styles[geom.fontName];

            if (style.vertical) {
              angle += Math.PI / 2;
            }

            var fontHeight = Math.hypot(tx[2], tx[3]);
            var fontAscent = fontHeight * getAscent(style.fontFamily, ctx);
            var left, top;

            if (angle === 0) {
              left = tx[4];
              top = tx[5] - fontAscent;
            } else {
              left = tx[4] + fontAscent * Math.sin(angle);
              top = tx[5] - fontAscent * Math.cos(angle);
            }

            textDiv.style.left = "".concat(left, "px");
            textDiv.style.top = "".concat(top, "px");
            textDiv.style.fontSize = "".concat(fontHeight, "px");
            textDiv.style.fontFamily = style.fontFamily;
            textDiv.textContent = geom.str;
            textDiv.dir = geom.dir;

            if (task._fontInspectorEnabled) {
              textDiv.dataset.fontName = geom.fontName;
            }

            if (angle !== 0) {
              textDivProperties.angle = angle * (180 / Math.PI);
            }

            var shouldScaleText = false;

            if (geom.str.length > 1) {
              shouldScaleText = true;
            } else if (geom.transform[0] !== geom.transform[3]) {
              var absScaleX = Math.abs(geom.transform[0]),
                  absScaleY = Math.abs(geom.transform[3]);

              if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
                shouldScaleText = true;
              }
            }

            if (shouldScaleText) {
              if (style.vertical) {
                textDivProperties.canvasWidth = geom.height * task._viewport.scale;
              } else {
                textDivProperties.canvasWidth = geom.width * task._viewport.scale;
              }
            }

            task._textDivProperties.set(textDiv, textDivProperties);

            if (task._textContentStream) {
              task._layoutText(textDiv);
            }

            if (task._enhanceTextSelection) {
              var angleCos = 1,
                  angleSin = 0;

              if (angle !== 0) {
                angleCos = Math.cos(angle);
                angleSin = Math.sin(angle);
              }

              var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
              var divHeight = fontHeight;
              var m, b;

              if (angle !== 0) {
                m = [angleCos, angleSin, -angleSin, angleCos, left, top];
                b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
              } else {
                b = [left, top, left + divWidth, top + divHeight];
              }

              task._bounds.push({
                left: b[0],
                top: b[1],
                right: b[2],
                bottom: b[3],
                div: textDiv,
                size: [divWidth, divHeight],
                m: m
              });
            }
          }

          function render(task) {
            if (task._canceled) {
              return;
            }

            var textDivs = task._textDivs;
            var capability = task._capability;
            var textDivsLength = textDivs.length;

            if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
              task._renderingDone = true;
              capability.resolve();
              return;
            }

            if (!task._textContentStream) {
              for (var i = 0; i < textDivsLength; i++) {
                task._layoutText(textDivs[i]);
              }
            }

            task._renderingDone = true;
            capability.resolve();
          }

          function findPositiveMin(ts, offset, count) {
            var result = 0;

            for (var i = 0; i < count; i++) {
              var t = ts[offset++];

              if (t > 0) {
                result = result ? Math.min(t, result) : t;
              }
            }

            return result;
          }

          function expand(task) {
            var bounds = task._bounds;
            var viewport = task._viewport;
            var expanded = expandBounds(viewport.width, viewport.height, bounds);

            var _loop2 = function _loop2(i) {
              var div = bounds[i].div;

              var divProperties = task._textDivProperties.get(div);

              if (divProperties.angle === 0) {
                divProperties.paddingLeft = bounds[i].left - expanded[i].left;
                divProperties.paddingTop = bounds[i].top - expanded[i].top;
                divProperties.paddingRight = expanded[i].right - bounds[i].right;
                divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;

                task._textDivProperties.set(div, divProperties);

                return "continue";
              }

              var e = expanded[i],
                  b = bounds[i];
              var m = b.m,
                  c = m[0],
                  s = m[1];
              var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
              var ts = new Float64Array(64);
              points.forEach(function (p, j) {
                var t = _util.Util.applyTransform(p, m);

                ts[j + 0] = c && (e.left - t[0]) / c;
                ts[j + 4] = s && (e.top - t[1]) / s;
                ts[j + 8] = c && (e.right - t[0]) / c;
                ts[j + 12] = s && (e.bottom - t[1]) / s;
                ts[j + 16] = s && (e.left - t[0]) / -s;
                ts[j + 20] = c && (e.top - t[1]) / c;
                ts[j + 24] = s && (e.right - t[0]) / -s;
                ts[j + 28] = c && (e.bottom - t[1]) / c;
                ts[j + 32] = c && (e.left - t[0]) / -c;
                ts[j + 36] = s && (e.top - t[1]) / -s;
                ts[j + 40] = c && (e.right - t[0]) / -c;
                ts[j + 44] = s && (e.bottom - t[1]) / -s;
                ts[j + 48] = s && (e.left - t[0]) / s;
                ts[j + 52] = c && (e.top - t[1]) / -c;
                ts[j + 56] = s && (e.right - t[0]) / s;
                ts[j + 60] = c && (e.bottom - t[1]) / -c;
              });
              var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
              divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
              divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
              divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
              divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;

              task._textDivProperties.set(div, divProperties);
            };

            for (var i = 0; i < expanded.length; i++) {
              var _ret2 = _loop2(i);

              if (_ret2 === "continue") continue;
            }
          }

          function expandBounds(width, height, boxes) {
            var bounds = boxes.map(function (box, i) {
              return {
                x1: box.left,
                y1: box.top,
                x2: box.right,
                y2: box.bottom,
                index: i,
                x1New: undefined,
                x2New: undefined
              };
            });
            expandBoundsLTR(width, bounds);
            var expanded = new Array(boxes.length);
            bounds.forEach(function (b) {
              var i = b.index;
              expanded[i] = {
                left: b.x1New,
                top: 0,
                right: b.x2New,
                bottom: 0
              };
            });
            boxes.map(function (box, i) {
              var e = expanded[i],
                  b = bounds[i];
              b.x1 = box.top;
              b.y1 = width - e.right;
              b.x2 = box.bottom;
              b.y2 = width - e.left;
              b.index = i;
              b.x1New = undefined;
              b.x2New = undefined;
            });
            expandBoundsLTR(height, bounds);
            bounds.forEach(function (b) {
              var i = b.index;
              expanded[i].top = b.x1New;
              expanded[i].bottom = b.x2New;
            });
            return expanded;
          }

          function expandBoundsLTR(width, bounds) {
            bounds.sort(function (a, b) {
              return a.x1 - b.x1 || a.index - b.index;
            });
            var fakeBoundary = {
              x1: -Infinity,
              y1: -Infinity,
              x2: 0,
              y2: Infinity,
              index: -1,
              x1New: 0,
              x2New: 0
            };
            var horizon = [{
              start: -Infinity,
              end: Infinity,
              boundary: fakeBoundary
            }];
            bounds.forEach(function (boundary) {
              var i = 0;

              while (i < horizon.length && horizon[i].end <= boundary.y1) {
                i++;
              }

              var j = horizon.length - 1;

              while (j >= 0 && horizon[j].start >= boundary.y2) {
                j--;
              }

              var horizonPart, affectedBoundary;
              var q,
                  k,
                  maxXNew = -Infinity;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;
                var xNew = void 0;

                if (affectedBoundary.x2 > boundary.x1) {
                  xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;
                } else if (affectedBoundary.x2New === undefined) {
                  xNew = (affectedBoundary.x2 + boundary.x1) / 2;
                } else {
                  xNew = affectedBoundary.x2New;
                }

                if (xNew > maxXNew) {
                  maxXNew = xNew;
                }
              }

              boundary.x1New = maxXNew;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;

                if (affectedBoundary.x2New === undefined) {
                  if (affectedBoundary.x2 > boundary.x1) {
                    if (affectedBoundary.index > boundary.index) {
                      affectedBoundary.x2New = affectedBoundary.x2;
                    }
                  } else {
                    affectedBoundary.x2New = maxXNew;
                  }
                } else if (affectedBoundary.x2New > maxXNew) {
                  affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);
                }
              }

              var changedHorizon = [];
              var lastBoundary = null;

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;
                var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;

                if (lastBoundary === useBoundary) {
                  changedHorizon[changedHorizon.length - 1].end = horizonPart.end;
                } else {
                  changedHorizon.push({
                    start: horizonPart.start,
                    end: horizonPart.end,
                    boundary: useBoundary
                  });
                  lastBoundary = useBoundary;
                }
              }

              if (horizon[i].start < boundary.y1) {
                changedHorizon[0].start = boundary.y1;
                changedHorizon.unshift({
                  start: horizon[i].start,
                  end: boundary.y1,
                  boundary: horizon[i].boundary
                });
              }

              if (boundary.y2 < horizon[j].end) {
                changedHorizon[changedHorizon.length - 1].end = boundary.y2;
                changedHorizon.push({
                  start: boundary.y2,
                  end: horizon[j].end,
                  boundary: horizon[j].boundary
                });
              }

              for (q = i; q <= j; q++) {
                horizonPart = horizon[q];
                affectedBoundary = horizonPart.boundary;

                if (affectedBoundary.x2New !== undefined) {
                  continue;
                }

                var used = false;

                for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {
                  used = horizon[k].boundary === affectedBoundary;
                }

                for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {
                  used = horizon[k].boundary === affectedBoundary;
                }

                for (k = 0; !used && k < changedHorizon.length; k++) {
                  used = changedHorizon[k].boundary === affectedBoundary;
                }

                if (!used) {
                  affectedBoundary.x2New = maxXNew;
                }
              }

              Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
            });
            horizon.forEach(function (horizonPart) {
              var affectedBoundary = horizonPart.boundary;

              if (affectedBoundary.x2New === undefined) {
                affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
              }
            });
          }

          function TextLayerRenderTask(_ref53) {
            var _globalThis$FontInspe2,
                _this45 = this;

            var textContent = _ref53.textContent,
                textContentStream = _ref53.textContentStream,
                container = _ref53.container,
                viewport = _ref53.viewport,
                textDivs = _ref53.textDivs,
                textContentItemsStr = _ref53.textContentItemsStr,
                enhanceTextSelection = _ref53.enhanceTextSelection;
            this._textContent = textContent;
            this._textContentStream = textContentStream;
            this._container = container;
            this._document = container.ownerDocument;
            this._viewport = viewport;
            this._textDivs = textDivs || [];
            this._textContentItemsStr = textContentItemsStr || [];
            this._enhanceTextSelection = !!enhanceTextSelection;
            this._fontInspectorEnabled = !!((_globalThis$FontInspe2 = globalThis.FontInspector) === null || _globalThis$FontInspe2 === void 0 ? void 0 : _globalThis$FontInspe2.enabled);
            this._reader = null;
            this._layoutTextLastFontSize = null;
            this._layoutTextLastFontFamily = null;
            this._layoutTextCtx = null;
            this._textDivProperties = new WeakMap();
            this._renderingDone = false;
            this._canceled = false;
            this._capability = (0, _util.createPromiseCapability)();
            this._renderTimer = null;
            this._bounds = [];

            this._capability.promise["finally"](function () {
              if (_this45._layoutTextCtx) {
                _this45._layoutTextCtx.canvas.width = 0;
                _this45._layoutTextCtx.canvas.height = 0;
                _this45._layoutTextCtx = null;
              }
            })["catch"](function () {});
          }

          TextLayerRenderTask.prototype = {
            get promise() {
              return this._capability.promise;
            },

            cancel: function TextLayer_cancel() {
              this._canceled = true;

              if (this._reader) {
                this._reader.cancel(new _util.AbortException("TextLayer task cancelled."));

                this._reader = null;
              }

              if (this._renderTimer !== null) {
                clearTimeout(this._renderTimer);
                this._renderTimer = null;
              }

              this._capability.reject(new Error("TextLayer task cancelled."));
            },
            _processItems: function _processItems(items, styleCache) {
              for (var i = 0, len = items.length; i < len; i++) {
                if (items[i].str === undefined) {
                  if (items[i].type === "beginMarkedContentProps" || items[i].type === "beginMarkedContent") {
                    var parent = this._container;
                    this._container = document.createElement("span");

                    this._container.classList.add("markedContent");

                    if (items[i].id !== null) {
                      this._container.setAttribute("id", "".concat(items[i].id));
                    }

                    parent.appendChild(this._container);
                  } else if (items[i].type === "endMarkedContent") {
                    this._container = this._container.parentNode;
                  }

                  continue;
                }

                this._textContentItemsStr.push(items[i].str);

                appendText(this, items[i], styleCache, this._layoutTextCtx);
              }
            },
            _layoutText: function _layoutText(textDiv) {
              var textDivProperties = this._textDivProperties.get(textDiv);

              if (textDivProperties.isWhitespace) {
                return;
              }

              var transform = "";

              if (textDivProperties.canvasWidth !== 0) {
                var _textDiv$style = textDiv.style,
                    fontSize = _textDiv$style.fontSize,
                    fontFamily = _textDiv$style.fontFamily;

                if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
                  this._layoutTextCtx.font = "".concat(fontSize, " ").concat(fontFamily);
                  this._layoutTextLastFontSize = fontSize;
                  this._layoutTextLastFontFamily = fontFamily;
                }

                var _this$_layoutTextCtx$ = this._layoutTextCtx.measureText(textDiv.textContent),
                    width = _this$_layoutTextCtx$.width;

                if (width > 0) {
                  textDivProperties.scale = textDivProperties.canvasWidth / width;
                  transform = "scaleX(".concat(textDivProperties.scale, ")");
                }
              }

              if (textDivProperties.angle !== 0) {
                transform = "rotate(".concat(textDivProperties.angle, "deg) ").concat(transform);
              }

              if (transform.length > 0) {
                if (this._enhanceTextSelection) {
                  textDivProperties.originalTransform = transform;
                }

                textDiv.style.transform = transform;
              }

              this._textDivProperties.set(textDiv, textDivProperties);

              this._container.appendChild(textDiv);
            },
            _render: function TextLayer_render(timeout) {
              var _this46 = this;

              var capability = (0, _util.createPromiseCapability)();
              var styleCache = Object.create(null);

              var canvas = this._document.createElement("canvas");

              canvas.height = canvas.width = DEFAULT_FONT_SIZE;
              canvas.mozOpaque = true;
              this._layoutTextCtx = canvas.getContext("2d", {
                alpha: false
              });

              if (this._textContent) {
                var textItems = this._textContent.items;
                var textStyles = this._textContent.styles;

                this._processItems(textItems, textStyles);

                capability.resolve();
              } else if (this._textContentStream) {
                var pump = function pump() {
                  _this46._reader.read().then(function (_ref54) {
                    var value = _ref54.value,
                        done = _ref54.done;

                    if (done) {
                      capability.resolve();
                      return;
                    }

                    Object.assign(styleCache, value.styles);

                    _this46._processItems(value.items, styleCache);

                    pump();
                  }, capability.reject);
                };

                this._reader = this._textContentStream.getReader();
                pump();
              } else {
                throw new Error('Neither "textContent" nor "textContentStream"' + " parameters specified.");
              }

              capability.promise.then(function () {
                styleCache = null;

                if (!timeout) {
                  render(_this46);
                } else {
                  _this46._renderTimer = setTimeout(function () {
                    render(_this46);
                    _this46._renderTimer = null;
                  }, timeout);
                }
              }, this._capability.reject);
            },
            expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {
              if (!this._enhanceTextSelection || !this._renderingDone) {
                return;
              }

              if (this._bounds !== null) {
                expand(this);
                this._bounds = null;
              }

              var transformBuf = [],
                  paddingBuf = [];

              for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
                var div = this._textDivs[i];

                var divProps = this._textDivProperties.get(div);

                if (divProps.isWhitespace) {
                  continue;
                }

                if (expandDivs) {
                  transformBuf.length = 0;
                  paddingBuf.length = 0;

                  if (divProps.originalTransform) {
                    transformBuf.push(divProps.originalTransform);
                  }

                  if (divProps.paddingTop > 0) {
                    paddingBuf.push("".concat(divProps.paddingTop, "px"));
                    transformBuf.push("translateY(".concat(-divProps.paddingTop, "px)"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingRight > 0) {
                    paddingBuf.push("".concat(divProps.paddingRight / divProps.scale, "px"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingBottom > 0) {
                    paddingBuf.push("".concat(divProps.paddingBottom, "px"));
                  } else {
                    paddingBuf.push(0);
                  }

                  if (divProps.paddingLeft > 0) {
                    paddingBuf.push("".concat(divProps.paddingLeft / divProps.scale, "px"));
                    transformBuf.push("translateX(".concat(-divProps.paddingLeft / divProps.scale, "px)"));
                  } else {
                    paddingBuf.push(0);
                  }

                  div.style.padding = paddingBuf.join(" ");

                  if (transformBuf.length) {
                    div.style.transform = transformBuf.join(" ");
                  }
                } else {
                  div.style.padding = null;
                  div.style.transform = divProps.originalTransform;
                }
              }
            }
          };

          function renderTextLayer(renderParameters) {
            var task = new TextLayerRenderTask({
              textContent: renderParameters.textContent,
              textContentStream: renderParameters.textContentStream,
              container: renderParameters.container,
              viewport: renderParameters.viewport,
              textDivs: renderParameters.textDivs,
              textContentItemsStr: renderParameters.textContentItemsStr,
              enhanceTextSelection: renderParameters.enhanceTextSelection
            });

            task._render(renderParameters.timeout);

            return task;
          }

          return renderTextLayer;
        }();

        exports.renderTextLayer = renderTextLayer;
        /***/
      },
      /* 21 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SVGGraphics = void 0;

        var _util = __w_pdfjs_require__(2);

        var _display_utils = __w_pdfjs_require__(1);

        var _is_node = __w_pdfjs_require__(4);

        var SVGGraphics = function SVGGraphics() {
          throw new Error("Not implemented: SVGGraphics");
        };

        exports.SVGGraphics = SVGGraphics;
        {
          var opListToTree = function opListToTree(opList) {
            var opTree = [];
            var tmp = [];

            var _iterator40 = _createForOfIteratorHelper(opList),
                _step40;

            try {
              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                var opListElement = _step40.value;

                if (opListElement.fn === "save") {
                  opTree.push({
                    fnId: 92,
                    fn: "group",
                    items: []
                  });
                  tmp.push(opTree);
                  opTree = opTree[opTree.length - 1].items;
                  continue;
                }

                if (opListElement.fn === "restore") {
                  opTree = tmp.pop();
                } else {
                  opTree.push(opListElement);
                }
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }

            return opTree;
          };

          var pf = function pf(value) {
            if (Number.isInteger(value)) {
              return value.toString();
            }

            var s = value.toFixed(10);
            var i = s.length - 1;

            if (s[i] !== "0") {
              return s;
            }

            do {
              i--;
            } while (s[i] === "0");

            return s.substring(0, s[i] === "." ? i : i + 1);
          };

          var pm = function pm(m) {
            if (m[4] === 0 && m[5] === 0) {
              if (m[1] === 0 && m[2] === 0) {
                if (m[0] === 1 && m[3] === 1) {
                  return "";
                }

                return "scale(".concat(pf(m[0]), " ").concat(pf(m[3]), ")");
              }

              if (m[0] === m[3] && m[1] === -m[2]) {
                var a = Math.acos(m[0]) * 180 / Math.PI;
                return "rotate(".concat(pf(a), ")");
              }
            } else {
              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                return "translate(".concat(pf(m[4]), " ").concat(pf(m[5]), ")");
              }
            }

            return "matrix(".concat(pf(m[0]), " ").concat(pf(m[1]), " ").concat(pf(m[2]), " ").concat(pf(m[3]), " ").concat(pf(m[4]), " ") + "".concat(pf(m[5]), ")");
          };

          var SVG_DEFAULTS = {
            fontStyle: "normal",
            fontWeight: "normal",
            fillColor: "#000000"
          };
          var XML_NS = "http://www.w3.org/XML/1998/namespace";
          var XLINK_NS = "http://www.w3.org/1999/xlink";
          var LINE_CAP_STYLES = ["butt", "round", "square"];
          var LINE_JOIN_STYLES = ["miter", "round", "bevel"];

          var convertImgDataToPng = function () {
            var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
            var CHUNK_WRAPPER_SIZE = 12;
            var crcTable = new Int32Array(256);

            for (var i = 0; i < 256; i++) {
              var c = i;

              for (var h = 0; h < 8; h++) {
                if (c & 1) {
                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;
                } else {
                  c = c >> 1 & 0x7fffffff;
                }
              }

              crcTable[i] = c;
            }

            function crc32(data, start, end) {
              var crc = -1;

              for (var _i11 = start; _i11 < end; _i11++) {
                var a = (crc ^ data[_i11]) & 0xff;
                var b = crcTable[a];
                crc = crc >>> 8 ^ b;
              }

              return crc ^ -1;
            }

            function writePngChunk(type, body, data, offset) {
              var p = offset;
              var len = body.length;
              data[p] = len >> 24 & 0xff;
              data[p + 1] = len >> 16 & 0xff;
              data[p + 2] = len >> 8 & 0xff;
              data[p + 3] = len & 0xff;
              p += 4;
              data[p] = type.charCodeAt(0) & 0xff;
              data[p + 1] = type.charCodeAt(1) & 0xff;
              data[p + 2] = type.charCodeAt(2) & 0xff;
              data[p + 3] = type.charCodeAt(3) & 0xff;
              p += 4;
              data.set(body, p);
              p += body.length;
              var crc = crc32(data, offset + 4, p);
              data[p] = crc >> 24 & 0xff;
              data[p + 1] = crc >> 16 & 0xff;
              data[p + 2] = crc >> 8 & 0xff;
              data[p + 3] = crc & 0xff;
            }

            function adler32(data, start, end) {
              var a = 1;
              var b = 0;

              for (var _i12 = start; _i12 < end; ++_i12) {
                a = (a + (data[_i12] & 0xff)) % 65521;
                b = (b + a) % 65521;
              }

              return b << 16 | a;
            }

            function deflateSync(literals) {
              if (!_is_node.isNodeJS) {
                return deflateSyncUncompressed(literals);
              }

              try {
                var input;

                if (parseInt(process.versions.node) >= 8) {
                  input = literals;
                } else {
                  input = Buffer.from(literals);
                }

                var output = __webpack_require__(/*! zlib */ "./node_modules/browserify-zlib/lib/index.js").deflateSync(input, {
                  level: 9
                });

                return output instanceof Uint8Array ? output : new Uint8Array(output);
              } catch (e) {
                (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
              }

              return deflateSyncUncompressed(literals);
            }

            function deflateSyncUncompressed(literals) {
              var len = literals.length;
              var maxBlockLength = 0xffff;
              var deflateBlocks = Math.ceil(len / maxBlockLength);
              var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
              var pi = 0;
              idat[pi++] = 0x78;
              idat[pi++] = 0x9c;
              var pos = 0;

              while (len > maxBlockLength) {
                idat[pi++] = 0x00;
                idat[pi++] = 0xff;
                idat[pi++] = 0xff;
                idat[pi++] = 0x00;
                idat[pi++] = 0x00;
                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                pi += maxBlockLength;
                pos += maxBlockLength;
                len -= maxBlockLength;
              }

              idat[pi++] = 0x01;
              idat[pi++] = len & 0xff;
              idat[pi++] = len >> 8 & 0xff;
              idat[pi++] = ~len & 0xffff & 0xff;
              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
              idat.set(literals.subarray(pos), pi);
              pi += literals.length - pos;
              var adler = adler32(literals, 0, literals.length);
              idat[pi++] = adler >> 24 & 0xff;
              idat[pi++] = adler >> 16 & 0xff;
              idat[pi++] = adler >> 8 & 0xff;
              idat[pi++] = adler & 0xff;
              return idat;
            }

            function encode(imgData, kind, forceDataSchema, isMask) {
              var width = imgData.width;
              var height = imgData.height;
              var bitDepth, colorType, lineSize;
              var bytes = imgData.data;

              switch (kind) {
                case _util.ImageKind.GRAYSCALE_1BPP:
                  colorType = 0;
                  bitDepth = 1;
                  lineSize = width + 7 >> 3;
                  break;

                case _util.ImageKind.RGB_24BPP:
                  colorType = 2;
                  bitDepth = 8;
                  lineSize = width * 3;
                  break;

                case _util.ImageKind.RGBA_32BPP:
                  colorType = 6;
                  bitDepth = 8;
                  lineSize = width * 4;
                  break;

                default:
                  throw new Error("invalid format");
              }

              var literals = new Uint8Array((1 + lineSize) * height);
              var offsetLiterals = 0,
                  offsetBytes = 0;

              for (var y = 0; y < height; ++y) {
                literals[offsetLiterals++] = 0;
                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                offsetBytes += lineSize;
                offsetLiterals += lineSize;
              }

              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {
                offsetLiterals = 0;

                for (var _y = 0; _y < height; _y++) {
                  offsetLiterals++;

                  for (var _i13 = 0; _i13 < lineSize; _i13++) {
                    literals[offsetLiterals++] ^= 0xff;
                  }
                }
              }

              var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
              var idat = deflateSync(literals);
              var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
              var data = new Uint8Array(pngLength);
              var offset = 0;
              data.set(PNG_HEADER, offset);
              offset += PNG_HEADER.length;
              writePngChunk("IHDR", ihdr, data, offset);
              offset += CHUNK_WRAPPER_SIZE + ihdr.length;
              writePngChunk("IDATA", idat, data, offset);
              offset += CHUNK_WRAPPER_SIZE + idat.length;
              writePngChunk("IEND", new Uint8Array(0), data, offset);
              return (0, _util.createObjectURL)(data, "image/png", forceDataSchema);
            }

            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {
              var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
              return encode(imgData, kind, forceDataSchema, isMask);
            };
          }();

          var SVGExtraState = /*#__PURE__*/function () {
            function SVGExtraState() {
              _classCallCheck(this, SVGExtraState);

              this.fontSizeScale = 1;
              this.fontWeight = SVG_DEFAULTS.fontWeight;
              this.fontSize = 0;
              this.textMatrix = _util.IDENTITY_MATRIX;
              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
              this.leading = 0;
              this.textRenderingMode = _util.TextRenderingMode.FILL;
              this.textMatrixScale = 1;
              this.x = 0;
              this.y = 0;
              this.lineX = 0;
              this.lineY = 0;
              this.charSpacing = 0;
              this.wordSpacing = 0;
              this.textHScale = 1;
              this.textRise = 0;
              this.fillColor = SVG_DEFAULTS.fillColor;
              this.strokeColor = "#000000";
              this.fillAlpha = 1;
              this.strokeAlpha = 1;
              this.lineWidth = 1;
              this.lineJoin = "";
              this.lineCap = "";
              this.miterLimit = 0;
              this.dashArray = [];
              this.dashPhase = 0;
              this.dependencies = [];
              this.activeClipUrl = null;
              this.clipGroup = null;
              this.maskId = "";
            }

            _createClass(SVGExtraState, [{
              key: "clone",
              value: function clone() {
                return Object.create(this);
              }
            }, {
              key: "setCurrentPoint",
              value: function setCurrentPoint(x, y) {
                this.x = x;
                this.y = y;
              }
            }]);

            return SVGExtraState;
          }();

          var clipCount = 0;
          var maskCount = 0;
          var shadingCount = 0;

          exports.SVGGraphics = SVGGraphics = /*#__PURE__*/function () {
            function SVGGraphics(commonObjs, objs) {
              var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              _classCallCheck(this, SVGGraphics);

              this.svgFactory = new _display_utils.DOMSVGFactory();
              this.current = new SVGExtraState();
              this.transformMatrix = _util.IDENTITY_MATRIX;
              this.transformStack = [];
              this.extraStack = [];
              this.commonObjs = commonObjs;
              this.objs = objs;
              this.pendingClip = null;
              this.pendingEOFill = false;
              this.embedFonts = false;
              this.embeddedFonts = Object.create(null);
              this.cssStyle = null;
              this.forceDataSchema = !!forceDataSchema;
              this._operatorIdMapping = [];

              for (var op in _util.OPS) {
                this._operatorIdMapping[_util.OPS[op]] = op;
              }
            }

            _createClass(SVGGraphics, [{
              key: "save",
              value: function save() {
                this.transformStack.push(this.transformMatrix);
                var old = this.current;
                this.extraStack.push(old);
                this.current = old.clone();
              }
            }, {
              key: "restore",
              value: function restore() {
                this.transformMatrix = this.transformStack.pop();
                this.current = this.extraStack.pop();
                this.pendingClip = null;
                this.tgrp = null;
              }
            }, {
              key: "group",
              value: function group(items) {
                this.save();
                this.executeOpTree(items);
                this.restore();
              }
            }, {
              key: "loadDependencies",
              value: function loadDependencies(operatorList) {
                var _this47 = this;

                var fnArray = operatorList.fnArray;
                var argsArray = operatorList.argsArray;

                for (var i = 0, ii = fnArray.length; i < ii; i++) {
                  if (fnArray[i] !== _util.OPS.dependency) {
                    continue;
                  }

                  var _iterator41 = _createForOfIteratorHelper(argsArray[i]),
                      _step41;

                  try {
                    var _loop3 = function _loop3() {
                      var obj = _step41.value;
                      var objsPool = obj.startsWith("g_") ? _this47.commonObjs : _this47.objs;
                      var promise = new Promise(function (resolve) {
                        objsPool.get(obj, resolve);
                      });

                      _this47.current.dependencies.push(promise);
                    };

                    for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                      _loop3();
                    }
                  } catch (err) {
                    _iterator41.e(err);
                  } finally {
                    _iterator41.f();
                  }
                }

                return Promise.all(this.current.dependencies);
              }
            }, {
              key: "transform",
              value: function transform(a, b, c, d, e, f) {
                var transformMatrix = [a, b, c, d, e, f];
                this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
                this.tgrp = null;
              }
            }, {
              key: "getSVG",
              value: function getSVG(operatorList, viewport) {
                var _this48 = this;

                this.viewport = viewport;

                var svgElement = this._initialize(viewport);

                return this.loadDependencies(operatorList).then(function () {
                  _this48.transformMatrix = _util.IDENTITY_MATRIX;

                  _this48.executeOpTree(_this48.convertOpList(operatorList));

                  return svgElement;
                });
              }
            }, {
              key: "convertOpList",
              value: function convertOpList(operatorList) {
                var operatorIdMapping = this._operatorIdMapping;
                var argsArray = operatorList.argsArray;
                var fnArray = operatorList.fnArray;
                var opList = [];

                for (var i = 0, ii = fnArray.length; i < ii; i++) {
                  var fnId = fnArray[i];
                  opList.push({
                    fnId: fnId,
                    fn: operatorIdMapping[fnId],
                    args: argsArray[i]
                  });
                }

                return opListToTree(opList);
              }
            }, {
              key: "executeOpTree",
              value: function executeOpTree(opTree) {
                var _iterator42 = _createForOfIteratorHelper(opTree),
                    _step42;

                try {
                  for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
                    var opTreeElement = _step42.value;
                    var fn = opTreeElement.fn;
                    var fnId = opTreeElement.fnId;
                    var args = opTreeElement.args;

                    switch (fnId | 0) {
                      case _util.OPS.beginText:
                        this.beginText();
                        break;

                      case _util.OPS.dependency:
                        break;

                      case _util.OPS.setLeading:
                        this.setLeading(args);
                        break;

                      case _util.OPS.setLeadingMoveText:
                        this.setLeadingMoveText(args[0], args[1]);
                        break;

                      case _util.OPS.setFont:
                        this.setFont(args);
                        break;

                      case _util.OPS.showText:
                        this.showText(args[0]);
                        break;

                      case _util.OPS.showSpacedText:
                        this.showText(args[0]);
                        break;

                      case _util.OPS.endText:
                        this.endText();
                        break;

                      case _util.OPS.moveText:
                        this.moveText(args[0], args[1]);
                        break;

                      case _util.OPS.setCharSpacing:
                        this.setCharSpacing(args[0]);
                        break;

                      case _util.OPS.setWordSpacing:
                        this.setWordSpacing(args[0]);
                        break;

                      case _util.OPS.setHScale:
                        this.setHScale(args[0]);
                        break;

                      case _util.OPS.setTextMatrix:
                        this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;

                      case _util.OPS.setTextRise:
                        this.setTextRise(args[0]);
                        break;

                      case _util.OPS.setTextRenderingMode:
                        this.setTextRenderingMode(args[0]);
                        break;

                      case _util.OPS.setLineWidth:
                        this.setLineWidth(args[0]);
                        break;

                      case _util.OPS.setLineJoin:
                        this.setLineJoin(args[0]);
                        break;

                      case _util.OPS.setLineCap:
                        this.setLineCap(args[0]);
                        break;

                      case _util.OPS.setMiterLimit:
                        this.setMiterLimit(args[0]);
                        break;

                      case _util.OPS.setFillRGBColor:
                        this.setFillRGBColor(args[0], args[1], args[2]);
                        break;

                      case _util.OPS.setStrokeRGBColor:
                        this.setStrokeRGBColor(args[0], args[1], args[2]);
                        break;

                      case _util.OPS.setStrokeColorN:
                        this.setStrokeColorN(args);
                        break;

                      case _util.OPS.setFillColorN:
                        this.setFillColorN(args);
                        break;

                      case _util.OPS.shadingFill:
                        this.shadingFill(args[0]);
                        break;

                      case _util.OPS.setDash:
                        this.setDash(args[0], args[1]);
                        break;

                      case _util.OPS.setRenderingIntent:
                        this.setRenderingIntent(args[0]);
                        break;

                      case _util.OPS.setFlatness:
                        this.setFlatness(args[0]);
                        break;

                      case _util.OPS.setGState:
                        this.setGState(args[0]);
                        break;

                      case _util.OPS.fill:
                        this.fill();
                        break;

                      case _util.OPS.eoFill:
                        this.eoFill();
                        break;

                      case _util.OPS.stroke:
                        this.stroke();
                        break;

                      case _util.OPS.fillStroke:
                        this.fillStroke();
                        break;

                      case _util.OPS.eoFillStroke:
                        this.eoFillStroke();
                        break;

                      case _util.OPS.clip:
                        this.clip("nonzero");
                        break;

                      case _util.OPS.eoClip:
                        this.clip("evenodd");
                        break;

                      case _util.OPS.paintSolidColorImageMask:
                        this.paintSolidColorImageMask();
                        break;

                      case _util.OPS.paintImageXObject:
                        this.paintImageXObject(args[0]);
                        break;

                      case _util.OPS.paintInlineImageXObject:
                        this.paintInlineImageXObject(args[0]);
                        break;

                      case _util.OPS.paintImageMaskXObject:
                        this.paintImageMaskXObject(args[0]);
                        break;

                      case _util.OPS.paintFormXObjectBegin:
                        this.paintFormXObjectBegin(args[0], args[1]);
                        break;

                      case _util.OPS.paintFormXObjectEnd:
                        this.paintFormXObjectEnd();
                        break;

                      case _util.OPS.closePath:
                        this.closePath();
                        break;

                      case _util.OPS.closeStroke:
                        this.closeStroke();
                        break;

                      case _util.OPS.closeFillStroke:
                        this.closeFillStroke();
                        break;

                      case _util.OPS.closeEOFillStroke:
                        this.closeEOFillStroke();
                        break;

                      case _util.OPS.nextLine:
                        this.nextLine();
                        break;

                      case _util.OPS.transform:
                        this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;

                      case _util.OPS.constructPath:
                        this.constructPath(args[0], args[1]);
                        break;

                      case _util.OPS.endPath:
                        this.endPath();
                        break;

                      case 92:
                        this.group(opTreeElement.items);
                        break;

                      default:
                        (0, _util.warn)("Unimplemented operator ".concat(fn));
                        break;
                    }
                  }
                } catch (err) {
                  _iterator42.e(err);
                } finally {
                  _iterator42.f();
                }
              }
            }, {
              key: "setWordSpacing",
              value: function setWordSpacing(wordSpacing) {
                this.current.wordSpacing = wordSpacing;
              }
            }, {
              key: "setCharSpacing",
              value: function setCharSpacing(charSpacing) {
                this.current.charSpacing = charSpacing;
              }
            }, {
              key: "nextLine",
              value: function nextLine() {
                this.moveText(0, this.current.leading);
              }
            }, {
              key: "setTextMatrix",
              value: function setTextMatrix(a, b, c, d, e, f) {
                var current = this.current;
                current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
                current.textMatrixScale = Math.hypot(a, b);
                current.x = current.lineX = 0;
                current.y = current.lineY = 0;
                current.xcoords = [];
                current.ycoords = [];
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
                current.txtElement = this.svgFactory.createElement("svg:text");
                current.txtElement.appendChild(current.tspan);
              }
            }, {
              key: "beginText",
              value: function beginText() {
                var current = this.current;
                current.x = current.lineX = 0;
                current.y = current.lineY = 0;
                current.textMatrix = _util.IDENTITY_MATRIX;
                current.lineMatrix = _util.IDENTITY_MATRIX;
                current.textMatrixScale = 1;
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.txtElement = this.svgFactory.createElement("svg:text");
                current.txtgrp = this.svgFactory.createElement("svg:g");
                current.xcoords = [];
                current.ycoords = [];
              }
            }, {
              key: "moveText",
              value: function moveText(x, y) {
                var current = this.current;
                current.x = current.lineX += x;
                current.y = current.lineY += y;
                current.xcoords = [];
                current.ycoords = [];
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
              }
            }, {
              key: "showText",
              value: function showText(glyphs) {
                var current = this.current;
                var font = current.font;
                var fontSize = current.fontSize;

                if (fontSize === 0) {
                  return;
                }

                var fontSizeScale = current.fontSizeScale;
                var charSpacing = current.charSpacing;
                var wordSpacing = current.wordSpacing;
                var fontDirection = current.fontDirection;
                var textHScale = current.textHScale * fontDirection;
                var vertical = font.vertical;
                var spacingDir = vertical ? 1 : -1;
                var defaultVMetrics = font.defaultVMetrics;
                var widthAdvanceScale = fontSize * current.fontMatrix[0];
                var x = 0;

                var _iterator43 = _createForOfIteratorHelper(glyphs),
                    _step43;

                try {
                  for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                    var glyph = _step43.value;

                    if (glyph === null) {
                      x += fontDirection * wordSpacing;
                      continue;
                    } else if ((0, _util.isNum)(glyph)) {
                      x += spacingDir * glyph * fontSize / 1000;
                      continue;
                    }

                    var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                    var character = glyph.fontChar;
                    var scaledX = void 0,
                        scaledY = void 0;
                    var width = glyph.width;

                    if (vertical) {
                      var vx = void 0;
                      var vmetric = glyph.vmetric || defaultVMetrics;
                      vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                      vx = -vx * widthAdvanceScale;
                      var vy = vmetric[2] * widthAdvanceScale;
                      width = vmetric ? -vmetric[0] : width;
                      scaledX = vx / fontSizeScale;
                      scaledY = (x + vy) / fontSizeScale;
                    } else {
                      scaledX = x / fontSizeScale;
                      scaledY = 0;
                    }

                    if (glyph.isInFont || font.missingFile) {
                      current.xcoords.push(current.x + scaledX);

                      if (vertical) {
                        current.ycoords.push(-current.y + scaledY);
                      }

                      current.tspan.textContent += character;
                    } else {}

                    var charWidth = void 0;

                    if (vertical) {
                      charWidth = width * widthAdvanceScale - spacing * fontDirection;
                    } else {
                      charWidth = width * widthAdvanceScale + spacing * fontDirection;
                    }

                    x += charWidth;
                  }
                } catch (err) {
                  _iterator43.e(err);
                } finally {
                  _iterator43.f();
                }

                current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));

                if (vertical) {
                  current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
                } else {
                  current.tspan.setAttributeNS(null, "y", pf(-current.y));
                }

                if (vertical) {
                  current.y -= x;
                } else {
                  current.x += x * textHScale;
                }

                current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));

                if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                  current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
                }

                if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                  current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
                }

                var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;

                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                    current.tspan.setAttributeNS(null, "fill", current.fillColor);
                  }

                  if (current.fillAlpha < 1) {
                    current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                  }
                } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {
                  current.tspan.setAttributeNS(null, "fill", "transparent");
                } else {
                  current.tspan.setAttributeNS(null, "fill", "none");
                }

                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  var lineWidthScale = 1 / (current.textMatrixScale || 1);

                  this._setStrokeAttributes(current.tspan, lineWidthScale);
                }

                var textMatrix = current.textMatrix;

                if (current.textRise !== 0) {
                  textMatrix = textMatrix.slice();
                  textMatrix[5] += current.textRise;
                }

                current.txtElement.setAttributeNS(null, "transform", "".concat(pm(textMatrix), " scale(").concat(pf(textHScale), ", -1)"));
                current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
                current.txtElement.appendChild(current.tspan);
                current.txtgrp.appendChild(current.txtElement);

                this._ensureTransformGroup().appendChild(current.txtElement);
              }
            }, {
              key: "setLeadingMoveText",
              value: function setLeadingMoveText(x, y) {
                this.setLeading(-y);
                this.moveText(x, y);
              }
            }, {
              key: "addFontStyle",
              value: function addFontStyle(fontObj) {
                if (!fontObj.data) {
                  throw new Error("addFontStyle: No font data available, " + 'ensure that the "fontExtraProperties" API parameter is set.');
                }

                if (!this.cssStyle) {
                  this.cssStyle = this.svgFactory.createElement("svg:style");
                  this.cssStyle.setAttributeNS(null, "type", "text/css");
                  this.defs.appendChild(this.cssStyle);
                }

                var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
                this.cssStyle.textContent += "@font-face { font-family: \"".concat(fontObj.loadedName, "\";") + " src: url(".concat(url, "); }\n");
              }
            }, {
              key: "setFont",
              value: function setFont(details) {
                var current = this.current;
                var fontObj = this.commonObjs.get(details[0]);
                var size = details[1];
                current.font = fontObj;

                if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                  this.addFontStyle(fontObj);
                  this.embeddedFonts[fontObj.loadedName] = fontObj;
                }

                current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                var bold = "normal";

                if (fontObj.black) {
                  bold = "900";
                } else if (fontObj.bold) {
                  bold = "bold";
                }

                var italic = fontObj.italic ? "italic" : "normal";

                if (size < 0) {
                  size = -size;
                  current.fontDirection = -1;
                } else {
                  current.fontDirection = 1;
                }

                current.fontSize = size;
                current.fontFamily = fontObj.loadedName;
                current.fontWeight = bold;
                current.fontStyle = italic;
                current.tspan = this.svgFactory.createElement("svg:tspan");
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
                current.xcoords = [];
                current.ycoords = [];
              }
            }, {
              key: "endText",
              value: function endText() {
                var _current$txtElement;

                var current = this.current;

                if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && ((_current$txtElement = current.txtElement) === null || _current$txtElement === void 0 ? void 0 : _current$txtElement.hasChildNodes())) {
                  current.element = current.txtElement;
                  this.clip("nonzero");
                  this.endPath();
                }
              }
            }, {
              key: "setLineWidth",
              value: function setLineWidth(width) {
                if (width > 0) {
                  this.current.lineWidth = width;
                }
              }
            }, {
              key: "setLineCap",
              value: function setLineCap(style) {
                this.current.lineCap = LINE_CAP_STYLES[style];
              }
            }, {
              key: "setLineJoin",
              value: function setLineJoin(style) {
                this.current.lineJoin = LINE_JOIN_STYLES[style];
              }
            }, {
              key: "setMiterLimit",
              value: function setMiterLimit(limit) {
                this.current.miterLimit = limit;
              }
            }, {
              key: "setStrokeAlpha",
              value: function setStrokeAlpha(strokeAlpha) {
                this.current.strokeAlpha = strokeAlpha;
              }
            }, {
              key: "setStrokeRGBColor",
              value: function setStrokeRGBColor(r, g, b) {
                this.current.strokeColor = _util.Util.makeHexColor(r, g, b);
              }
            }, {
              key: "setFillAlpha",
              value: function setFillAlpha(fillAlpha) {
                this.current.fillAlpha = fillAlpha;
              }
            }, {
              key: "setFillRGBColor",
              value: function setFillRGBColor(r, g, b) {
                this.current.fillColor = _util.Util.makeHexColor(r, g, b);
                this.current.tspan = this.svgFactory.createElement("svg:tspan");
                this.current.xcoords = [];
                this.current.ycoords = [];
              }
            }, {
              key: "setStrokeColorN",
              value: function setStrokeColorN(args) {
                this.current.strokeColor = this._makeColorN_Pattern(args);
              }
            }, {
              key: "setFillColorN",
              value: function setFillColorN(args) {
                this.current.fillColor = this._makeColorN_Pattern(args);
              }
            }, {
              key: "shadingFill",
              value: function shadingFill(args) {
                var width = this.viewport.width;
                var height = this.viewport.height;

                var inv = _util.Util.inverseTransform(this.transformMatrix);

                var bl = _util.Util.applyTransform([0, 0], inv);

                var br = _util.Util.applyTransform([0, height], inv);

                var ul = _util.Util.applyTransform([width, 0], inv);

                var ur = _util.Util.applyTransform([width, height], inv);

                var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", x0);
                rect.setAttributeNS(null, "y", y0);
                rect.setAttributeNS(null, "width", x1 - x0);
                rect.setAttributeNS(null, "height", y1 - y0);
                rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));

                if (this.current.fillAlpha < 1) {
                  rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
                }

                this._ensureTransformGroup().appendChild(rect);
              }
            }, {
              key: "_makeColorN_Pattern",
              value: function _makeColorN_Pattern(args) {
                if (args[0] === "TilingPattern") {
                  return this._makeTilingPattern(args);
                }

                return this._makeShadingPattern(args);
              }
            }, {
              key: "_makeTilingPattern",
              value: function _makeTilingPattern(args) {
                var color = args[1];
                var operatorList = args[2];
                var matrix = args[3] || _util.IDENTITY_MATRIX;

                var _args$ = _slicedToArray(args[4], 4),
                    x0 = _args$[0],
                    y0 = _args$[1],
                    x1 = _args$[2],
                    y1 = _args$[3];

                var xstep = args[5];
                var ystep = args[6];
                var paintType = args[7];
                var tilingId = "shading".concat(shadingCount++);

                var _util$Util$applyTrans = _util.Util.applyTransform([x0, y0], matrix),
                    _util$Util$applyTrans2 = _slicedToArray(_util$Util$applyTrans, 2),
                    tx0 = _util$Util$applyTrans2[0],
                    ty0 = _util$Util$applyTrans2[1];

                var _util$Util$applyTrans3 = _util.Util.applyTransform([x1, y1], matrix),
                    _util$Util$applyTrans4 = _slicedToArray(_util$Util$applyTrans3, 2),
                    tx1 = _util$Util$applyTrans4[0],
                    ty1 = _util$Util$applyTrans4[1];

                var _util$Util$singularVa = _util.Util.singularValueDecompose2dScale(matrix),
                    _util$Util$singularVa2 = _slicedToArray(_util$Util$singularVa, 2),
                    xscale = _util$Util$singularVa2[0],
                    yscale = _util$Util$singularVa2[1];

                var txstep = xstep * xscale;
                var tystep = ystep * yscale;
                var tiling = this.svgFactory.createElement("svg:pattern");
                tiling.setAttributeNS(null, "id", tilingId);
                tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
                tiling.setAttributeNS(null, "width", txstep);
                tiling.setAttributeNS(null, "height", tystep);
                tiling.setAttributeNS(null, "x", "".concat(tx0));
                tiling.setAttributeNS(null, "y", "".concat(ty0));
                var svg = this.svg;
                var transformMatrix = this.transformMatrix;
                var fillColor = this.current.fillColor;
                var strokeColor = this.current.strokeColor;
                var bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
                this.svg = bbox;
                this.transformMatrix = matrix;

                if (paintType === 2) {
                  var _util$Util;

                  var cssColor = (_util$Util = _util.Util).makeHexColor.apply(_util$Util, _toConsumableArray(color));

                  this.current.fillColor = cssColor;
                  this.current.strokeColor = cssColor;
                }

                this.executeOpTree(this.convertOpList(operatorList));
                this.svg = svg;
                this.transformMatrix = transformMatrix;
                this.current.fillColor = fillColor;
                this.current.strokeColor = strokeColor;
                tiling.appendChild(bbox.childNodes[0]);
                this.defs.appendChild(tiling);
                return "url(#".concat(tilingId, ")");
              }
            }, {
              key: "_makeShadingPattern",
              value: function _makeShadingPattern(args) {
                switch (args[0]) {
                  case "RadialAxial":
                    var shadingId = "shading".concat(shadingCount++);
                    var colorStops = args[3];
                    var gradient;

                    switch (args[1]) {
                      case "axial":
                        var point0 = args[4];
                        var point1 = args[5];
                        gradient = this.svgFactory.createElement("svg:linearGradient");
                        gradient.setAttributeNS(null, "id", shadingId);
                        gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                        gradient.setAttributeNS(null, "x1", point0[0]);
                        gradient.setAttributeNS(null, "y1", point0[1]);
                        gradient.setAttributeNS(null, "x2", point1[0]);
                        gradient.setAttributeNS(null, "y2", point1[1]);
                        break;

                      case "radial":
                        var focalPoint = args[4];
                        var circlePoint = args[5];
                        var focalRadius = args[6];
                        var circleRadius = args[7];
                        gradient = this.svgFactory.createElement("svg:radialGradient");
                        gradient.setAttributeNS(null, "id", shadingId);
                        gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                        gradient.setAttributeNS(null, "cx", circlePoint[0]);
                        gradient.setAttributeNS(null, "cy", circlePoint[1]);
                        gradient.setAttributeNS(null, "r", circleRadius);
                        gradient.setAttributeNS(null, "fx", focalPoint[0]);
                        gradient.setAttributeNS(null, "fy", focalPoint[1]);
                        gradient.setAttributeNS(null, "fr", focalRadius);
                        break;

                      default:
                        throw new Error("Unknown RadialAxial type: ".concat(args[1]));
                    }

                    var _iterator44 = _createForOfIteratorHelper(colorStops),
                        _step44;

                    try {
                      for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                        var colorStop = _step44.value;
                        var stop = this.svgFactory.createElement("svg:stop");
                        stop.setAttributeNS(null, "offset", colorStop[0]);
                        stop.setAttributeNS(null, "stop-color", colorStop[1]);
                        gradient.appendChild(stop);
                      }
                    } catch (err) {
                      _iterator44.e(err);
                    } finally {
                      _iterator44.f();
                    }

                    this.defs.appendChild(gradient);
                    return "url(#".concat(shadingId, ")");

                  case "Mesh":
                    (0, _util.warn)("Unimplemented pattern Mesh");
                    return null;

                  case "Dummy":
                    return "hotpink";

                  default:
                    throw new Error("Unknown IR type: ".concat(args[0]));
                }
              }
            }, {
              key: "setDash",
              value: function setDash(dashArray, dashPhase) {
                this.current.dashArray = dashArray;
                this.current.dashPhase = dashPhase;
              }
            }, {
              key: "constructPath",
              value: function constructPath(ops, args) {
                var current = this.current;
                var x = current.x,
                    y = current.y;
                var d = [];
                var j = 0;

                var _iterator45 = _createForOfIteratorHelper(ops),
                    _step45;

                try {
                  for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
                    var op = _step45.value;

                    switch (op | 0) {
                      case _util.OPS.rectangle:
                        x = args[j++];
                        y = args[j++];
                        var width = args[j++];
                        var height = args[j++];
                        var xw = x + width;
                        var yh = y + height;
                        d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                        break;

                      case _util.OPS.moveTo:
                        x = args[j++];
                        y = args[j++];
                        d.push("M", pf(x), pf(y));
                        break;

                      case _util.OPS.lineTo:
                        x = args[j++];
                        y = args[j++];
                        d.push("L", pf(x), pf(y));
                        break;

                      case _util.OPS.curveTo:
                        x = args[j + 4];
                        y = args[j + 5];
                        d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                        j += 6;
                        break;

                      case _util.OPS.curveTo2:
                        d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                        x = args[j + 2];
                        y = args[j + 3];
                        j += 4;
                        break;

                      case _util.OPS.curveTo3:
                        x = args[j + 2];
                        y = args[j + 3];
                        d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                        j += 4;
                        break;

                      case _util.OPS.closePath:
                        d.push("Z");
                        break;
                    }
                  }
                } catch (err) {
                  _iterator45.e(err);
                } finally {
                  _iterator45.f();
                }

                d = d.join(" ");

                if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {
                  d = current.path.getAttributeNS(null, "d") + d;
                } else {
                  current.path = this.svgFactory.createElement("svg:path");

                  this._ensureTransformGroup().appendChild(current.path);
                }

                current.path.setAttributeNS(null, "d", d);
                current.path.setAttributeNS(null, "fill", "none");
                current.element = current.path;
                current.setCurrentPoint(x, y);
              }
            }, {
              key: "endPath",
              value: function endPath() {
                var current = this.current;
                current.path = null;

                if (!this.pendingClip) {
                  return;
                }

                if (!current.element) {
                  this.pendingClip = null;
                  return;
                }

                var clipId = "clippath".concat(clipCount++);
                var clipPath = this.svgFactory.createElement("svg:clipPath");
                clipPath.setAttributeNS(null, "id", clipId);
                clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
                var clipElement = current.element.cloneNode(true);

                if (this.pendingClip === "evenodd") {
                  clipElement.setAttributeNS(null, "clip-rule", "evenodd");
                } else {
                  clipElement.setAttributeNS(null, "clip-rule", "nonzero");
                }

                this.pendingClip = null;
                clipPath.appendChild(clipElement);
                this.defs.appendChild(clipPath);

                if (current.activeClipUrl) {
                  current.clipGroup = null;
                  this.extraStack.forEach(function (prev) {
                    prev.clipGroup = null;
                  });
                  clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
                }

                current.activeClipUrl = "url(#".concat(clipId, ")");
                this.tgrp = null;
              }
            }, {
              key: "clip",
              value: function clip(type) {
                this.pendingClip = type;
              }
            }, {
              key: "closePath",
              value: function closePath() {
                var current = this.current;

                if (current.path) {
                  var d = "".concat(current.path.getAttributeNS(null, "d"), "Z");
                  current.path.setAttributeNS(null, "d", d);
                }
              }
            }, {
              key: "setLeading",
              value: function setLeading(leading) {
                this.current.leading = -leading;
              }
            }, {
              key: "setTextRise",
              value: function setTextRise(textRise) {
                this.current.textRise = textRise;
              }
            }, {
              key: "setTextRenderingMode",
              value: function setTextRenderingMode(textRenderingMode) {
                this.current.textRenderingMode = textRenderingMode;
              }
            }, {
              key: "setHScale",
              value: function setHScale(scale) {
                this.current.textHScale = scale / 100;
              }
            }, {
              key: "setRenderingIntent",
              value: function setRenderingIntent(intent) {}
            }, {
              key: "setFlatness",
              value: function setFlatness(flatness) {}
            }, {
              key: "setGState",
              value: function setGState(states) {
                var _iterator46 = _createForOfIteratorHelper(states),
                    _step46;

                try {
                  for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                    var _step46$value = _slicedToArray(_step46.value, 2),
                        key = _step46$value[0],
                        value = _step46$value[1];

                    switch (key) {
                      case "LW":
                        this.setLineWidth(value);
                        break;

                      case "LC":
                        this.setLineCap(value);
                        break;

                      case "LJ":
                        this.setLineJoin(value);
                        break;

                      case "ML":
                        this.setMiterLimit(value);
                        break;

                      case "D":
                        this.setDash(value[0], value[1]);
                        break;

                      case "RI":
                        this.setRenderingIntent(value);
                        break;

                      case "FL":
                        this.setFlatness(value);
                        break;

                      case "Font":
                        this.setFont(value);
                        break;

                      case "CA":
                        this.setStrokeAlpha(value);
                        break;

                      case "ca":
                        this.setFillAlpha(value);
                        break;

                      default:
                        (0, _util.warn)("Unimplemented graphic state operator ".concat(key));
                        break;
                    }
                  }
                } catch (err) {
                  _iterator46.e(err);
                } finally {
                  _iterator46.f();
                }
              }
            }, {
              key: "fill",
              value: function fill() {
                var current = this.current;

                if (current.element) {
                  current.element.setAttributeNS(null, "fill", current.fillColor);
                  current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                  this.endPath();
                }
              }
            }, {
              key: "stroke",
              value: function stroke() {
                var current = this.current;

                if (current.element) {
                  this._setStrokeAttributes(current.element);

                  current.element.setAttributeNS(null, "fill", "none");
                  this.endPath();
                }
              }
            }, {
              key: "_setStrokeAttributes",
              value: function _setStrokeAttributes(element) {
                var lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                var current = this.current;
                var dashArray = current.dashArray;

                if (lineWidthScale !== 1 && dashArray.length > 0) {
                  dashArray = dashArray.map(function (value) {
                    return lineWidthScale * value;
                  });
                }

                element.setAttributeNS(null, "stroke", current.strokeColor);
                element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
                element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
                element.setAttributeNS(null, "stroke-linecap", current.lineCap);
                element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
                element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
                element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
                element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
              }
            }, {
              key: "eoFill",
              value: function eoFill() {
                if (this.current.element) {
                  this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                }

                this.fill();
              }
            }, {
              key: "fillStroke",
              value: function fillStroke() {
                this.stroke();
                this.fill();
              }
            }, {
              key: "eoFillStroke",
              value: function eoFillStroke() {
                if (this.current.element) {
                  this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                }

                this.fillStroke();
              }
            }, {
              key: "closeStroke",
              value: function closeStroke() {
                this.closePath();
                this.stroke();
              }
            }, {
              key: "closeFillStroke",
              value: function closeFillStroke() {
                this.closePath();
                this.fillStroke();
              }
            }, {
              key: "closeEOFillStroke",
              value: function closeEOFillStroke() {
                this.closePath();
                this.eoFillStroke();
              }
            }, {
              key: "paintSolidColorImageMask",
              value: function paintSolidColorImageMask() {
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", "0");
                rect.setAttributeNS(null, "y", "0");
                rect.setAttributeNS(null, "width", "1px");
                rect.setAttributeNS(null, "height", "1px");
                rect.setAttributeNS(null, "fill", this.current.fillColor);

                this._ensureTransformGroup().appendChild(rect);
              }
            }, {
              key: "paintImageXObject",
              value: function paintImageXObject(objId) {
                var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);

                if (!imgData) {
                  (0, _util.warn)("Dependent image with object ID ".concat(objId, " is not ready yet"));
                  return;
                }

                this.paintInlineImageXObject(imgData);
              }
            }, {
              key: "paintInlineImageXObject",
              value: function paintInlineImageXObject(imgData, mask) {
                var width = imgData.width;
                var height = imgData.height;
                var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
                var cliprect = this.svgFactory.createElement("svg:rect");
                cliprect.setAttributeNS(null, "x", "0");
                cliprect.setAttributeNS(null, "y", "0");
                cliprect.setAttributeNS(null, "width", pf(width));
                cliprect.setAttributeNS(null, "height", pf(height));
                this.current.element = cliprect;
                this.clip("nonzero");
                var imgEl = this.svgFactory.createElement("svg:image");
                imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
                imgEl.setAttributeNS(null, "x", "0");
                imgEl.setAttributeNS(null, "y", pf(-height));
                imgEl.setAttributeNS(null, "width", pf(width) + "px");
                imgEl.setAttributeNS(null, "height", pf(height) + "px");
                imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / width), " ").concat(pf(-1 / height), ")"));

                if (mask) {
                  mask.appendChild(imgEl);
                } else {
                  this._ensureTransformGroup().appendChild(imgEl);
                }
              }
            }, {
              key: "paintImageMaskXObject",
              value: function paintImageMaskXObject(imgData) {
                var current = this.current;
                var width = imgData.width;
                var height = imgData.height;
                var fillColor = current.fillColor;
                current.maskId = "mask".concat(maskCount++);
                var mask = this.svgFactory.createElement("svg:mask");
                mask.setAttributeNS(null, "id", current.maskId);
                var rect = this.svgFactory.createElement("svg:rect");
                rect.setAttributeNS(null, "x", "0");
                rect.setAttributeNS(null, "y", "0");
                rect.setAttributeNS(null, "width", pf(width));
                rect.setAttributeNS(null, "height", pf(height));
                rect.setAttributeNS(null, "fill", fillColor);
                rect.setAttributeNS(null, "mask", "url(#".concat(current.maskId, ")"));
                this.defs.appendChild(mask);

                this._ensureTransformGroup().appendChild(rect);

                this.paintInlineImageXObject(imgData, mask);
              }
            }, {
              key: "paintFormXObjectBegin",
              value: function paintFormXObjectBegin(matrix, bbox) {
                if (Array.isArray(matrix) && matrix.length === 6) {
                  this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                }

                if (bbox) {
                  var width = bbox[2] - bbox[0];
                  var height = bbox[3] - bbox[1];
                  var cliprect = this.svgFactory.createElement("svg:rect");
                  cliprect.setAttributeNS(null, "x", bbox[0]);
                  cliprect.setAttributeNS(null, "y", bbox[1]);
                  cliprect.setAttributeNS(null, "width", pf(width));
                  cliprect.setAttributeNS(null, "height", pf(height));
                  this.current.element = cliprect;
                  this.clip("nonzero");
                  this.endPath();
                }
              }
            }, {
              key: "paintFormXObjectEnd",
              value: function paintFormXObjectEnd() {}
            }, {
              key: "_initialize",
              value: function _initialize(viewport) {
                var svg = this.svgFactory.create(viewport.width, viewport.height);
                var definitions = this.svgFactory.createElement("svg:defs");
                svg.appendChild(definitions);
                this.defs = definitions;
                var rootGroup = this.svgFactory.createElement("svg:g");
                rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
                svg.appendChild(rootGroup);
                this.svg = rootGroup;
                return svg;
              }
            }, {
              key: "_ensureClipGroup",
              value: function _ensureClipGroup() {
                if (!this.current.clipGroup) {
                  var clipGroup = this.svgFactory.createElement("svg:g");
                  clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                  this.svg.appendChild(clipGroup);
                  this.current.clipGroup = clipGroup;
                }

                return this.current.clipGroup;
              }
            }, {
              key: "_ensureTransformGroup",
              value: function _ensureTransformGroup() {
                if (!this.tgrp) {
                  this.tgrp = this.svgFactory.createElement("svg:g");
                  this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));

                  if (this.current.activeClipUrl) {
                    this._ensureClipGroup().appendChild(this.tgrp);
                  } else {
                    this.svg.appendChild(this.tgrp);
                  }
                }

                return this.tgrp;
              }
            }]);

            return SVGGraphics;
          }();
        }
        /***/
      },
      /* 22 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaLayer = void 0;

        var XfaLayer = /*#__PURE__*/function () {
          function XfaLayer() {
            _classCallCheck(this, XfaLayer);
          }

          _createClass(XfaLayer, null, [{
            key: "setAttributes",
            value: function setAttributes(html, attrs) {
              for (var _i14 = 0, _Object$entries2 = Object.entries(attrs); _i14 < _Object$entries2.length; _i14++) {
                var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i14], 2),
                    key = _Object$entries2$_i[0],
                    value = _Object$entries2$_i[1];

                if (value === null || value === undefined) {
                  continue;
                }

                if (key !== "style") {
                  html.setAttribute(key, value);
                } else {
                  Object.assign(html.style, value);
                }
              }
            }
          }, {
            key: "render",
            value: function render(parameters) {
              var root = parameters.xfa;
              var rootHtml = document.createElement(root.name);

              if (root.attributes) {
                XfaLayer.setAttributes(rootHtml, root.attributes);
              }

              var stack = [[root, -1, rootHtml]];
              var rootDiv = parameters.div;
              rootDiv.appendChild(rootHtml);
              var coeffs = parameters.viewport.transform.join(",");
              rootDiv.style.transform = "matrix(".concat(coeffs, ")");
              rootDiv.setAttribute("class", "xfaLayer xfaFont");

              while (stack.length > 0) {
                var _stack = _slicedToArray(stack[stack.length - 1], 3),
                    parent = _stack[0],
                    i = _stack[1],
                    html = _stack[2];

                if (i + 1 === parent.children.length) {
                  stack.pop();
                  continue;
                }

                var child = parent.children[++stack[stack.length - 1][1]];

                if (child === null) {
                  continue;
                }

                var name = child.name;

                if (name === "#text") {
                  html.appendChild(document.createTextNode(child.value));
                  continue;
                }

                var childHtml = document.createElement(name);
                html.appendChild(childHtml);

                if (child.attributes) {
                  XfaLayer.setAttributes(childHtml, child.attributes);
                }

                if (child.children && child.children.length > 0) {
                  stack.push([child, -1, childHtml]);
                } else if (child.value) {
                  childHtml.appendChild(document.createTextNode(child.value));
                }
              }
            }
          }, {
            key: "update",
            value: function update(parameters) {
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
              parameters.div.style.transform = transform;
              parameters.div.hidden = false;
            }
          }]);

          return XfaLayer;
        }();

        exports.XfaLayer = XfaLayer;
        /***/
      },
      /* 23 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNodeStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(24);

        ;

        var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

        var http = __webpack_require__(/*! http */ "./node_modules/stream-http/index.js");

        var https = __webpack_require__(/*! https */ "./node_modules/https-browserify/index.js");

        var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

        var fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;

        function parseUrl(sourceUrl) {
          var parsedUrl = url.parse(sourceUrl);

          if (parsedUrl.protocol === "file:" || parsedUrl.host) {
            return parsedUrl;
          }

          if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
            return url.parse("file:///".concat(sourceUrl));
          }

          if (!parsedUrl.host) {
            parsedUrl.protocol = "file:";
          }

          return parsedUrl;
        }

        var PDFNodeStream = /*#__PURE__*/function () {
          function PDFNodeStream(source) {
            _classCallCheck(this, PDFNodeStream);

            this.source = source;
            this.url = parseUrl(source.url);
            this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
            this.isFsUrl = this.url.protocol === "file:";
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFNodeStream, [{
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
              this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(start, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);

              this._rangeRequestReaders.push(rangeReader);

              return rangeReader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var readers = this._rangeRequestReaders.slice(0);

              readers.forEach(function (reader) {
                reader.cancel(reason);
              });
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea3, _this$_fullRequestRea4;

              return (_this$_fullRequestRea3 = (_this$_fullRequestRea4 = this._fullRequestReader) === null || _this$_fullRequestRea4 === void 0 ? void 0 : _this$_fullRequestRea4._loaded) !== null && _this$_fullRequestRea3 !== void 0 ? _this$_fullRequestRea3 : 0;
            }
          }]);

          return PDFNodeStream;
        }();

        exports.PDFNodeStream = PDFNodeStream;

        var BaseFullReader = /*#__PURE__*/function () {
          function BaseFullReader(stream) {
            _classCallCheck(this, BaseFullReader);

            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            var source = stream.source;
            this._contentLength = source.length;
            this._loaded = 0;
            this._filename = null;
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._headersCapability = (0, _util.createPromiseCapability)();
          }

          _createClass(BaseFullReader, [{
            key: "read",
            value: function () {
              var _read3 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee10() {
                var chunk, buffer;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        _context10.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        if (!this._done) {
                          _context10.next = 4;
                          break;
                        }

                        return _context10.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 4:
                        if (!this._storedError) {
                          _context10.next = 6;
                          break;
                        }

                        throw this._storedError;

                      case 6:
                        chunk = this._readableStream.read();

                        if (!(chunk === null)) {
                          _context10.next = 10;
                          break;
                        }

                        this._readCapability = (0, _util.createPromiseCapability)();
                        return _context10.abrupt("return", this.read());

                      case 10:
                        this._loaded += chunk.length;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded,
                            total: this._contentLength
                          });
                        }

                        buffer = new Uint8Array(chunk).buffer;
                        return _context10.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 14:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10, this);
              }));

              function read() {
                return _read3.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);

                return;
              }

              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;

              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this49 = this;

              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this49._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this49._done = true;

                _this49._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this49._error(reason);
              });

              if (!this._isStreamingSupported && this._isRangeSupported) {
                this._error(new _util.AbortException("streaming is disabled"));
              }

              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return BaseFullReader;
        }();

        var BaseRangeReader = /*#__PURE__*/function () {
          function BaseRangeReader(stream) {
            _classCallCheck(this, BaseRangeReader);

            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            this._loaded = 0;
            this._readableStream = null;
            this._readCapability = (0, _util.createPromiseCapability)();
            var source = stream.source;
            this._isStreamingSupported = !source.disableStream;
          }

          _createClass(BaseRangeReader, [{
            key: "read",
            value: function () {
              var _read4 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee11() {
                var chunk, buffer;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        _context11.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        if (!this._done) {
                          _context11.next = 4;
                          break;
                        }

                        return _context11.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 4:
                        if (!this._storedError) {
                          _context11.next = 6;
                          break;
                        }

                        throw this._storedError;

                      case 6:
                        chunk = this._readableStream.read();

                        if (!(chunk === null)) {
                          _context11.next = 10;
                          break;
                        }

                        this._readCapability = (0, _util.createPromiseCapability)();
                        return _context11.abrupt("return", this.read());

                      case 10:
                        this._loaded += chunk.length;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded
                          });
                        }

                        buffer = new Uint8Array(chunk).buffer;
                        return _context11.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 14:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee11, this);
              }));

              function read() {
                return _read4.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);

                return;
              }

              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;

              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this50 = this;

              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this50._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this50._done = true;

                _this50._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this50._error(reason);
              });

              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return BaseRangeReader;
        }();

        function createRequestOptions(parsedUrl, headers) {
          return {
            protocol: parsedUrl.protocol,
            auth: parsedUrl.auth,
            host: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.path,
            method: "GET",
            headers: headers
          };
        }

        var PDFNodeStreamFullReader = /*#__PURE__*/function (_BaseFullReader) {
          _inherits(PDFNodeStreamFullReader, _BaseFullReader);

          var _super37 = _createSuper(PDFNodeStreamFullReader);

          function PDFNodeStreamFullReader(stream) {
            var _this51;

            _classCallCheck(this, PDFNodeStreamFullReader);

            _this51 = _super37.call(this, stream);

            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this51._url, "\"."));
                _this51._storedError = error;

                _this51._headersCapability.reject(error);

                return;
              }

              _this51._headersCapability.resolve();

              _this51._setReadableStream(response);

              var getResponseHeader = function getResponseHeader(name) {
                return _this51._readableStream.headers[name.toLowerCase()];
              };

              var _ref55 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: stream.isHttp,
                rangeChunkSize: _this51._rangeChunkSize,
                disableRange: _this51._disableRange
              }),
                  allowRangeRequests = _ref55.allowRangeRequests,
                  suggestedLength = _ref55.suggestedLength;

              _this51._isRangeSupported = allowRangeRequests;
              _this51._contentLength = suggestedLength || _this51._contentLength;
              _this51._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
            };

            _this51._request = null;

            if (_this51._url.protocol === "http:") {
              _this51._request = http.request(createRequestOptions(_this51._url, stream.httpHeaders), handleResponse);
            } else {
              _this51._request = https.request(createRequestOptions(_this51._url, stream.httpHeaders), handleResponse);
            }

            _this51._request.on("error", function (reason) {
              _this51._storedError = reason;

              _this51._headersCapability.reject(reason);
            });

            _this51._request.end();

            return _this51;
          }

          return PDFNodeStreamFullReader;
        }(BaseFullReader);

        var PDFNodeStreamRangeReader = /*#__PURE__*/function (_BaseRangeReader) {
          _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);

          var _super38 = _createSuper(PDFNodeStreamRangeReader);

          function PDFNodeStreamRangeReader(stream, start, end) {
            var _this52;

            _classCallCheck(this, PDFNodeStreamRangeReader);

            _this52 = _super38.call(this, stream);
            _this52._httpHeaders = {};

            for (var property in stream.httpHeaders) {
              var value = stream.httpHeaders[property];

              if (typeof value === "undefined") {
                continue;
              }

              _this52._httpHeaders[property] = value;
            }

            _this52._httpHeaders.Range = "bytes=".concat(start, "-").concat(end - 1);

            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this52._url, "\"."));
                _this52._storedError = error;
                return;
              }

              _this52._setReadableStream(response);
            };

            _this52._request = null;

            if (_this52._url.protocol === "http:") {
              _this52._request = http.request(createRequestOptions(_this52._url, _this52._httpHeaders), handleResponse);
            } else {
              _this52._request = https.request(createRequestOptions(_this52._url, _this52._httpHeaders), handleResponse);
            }

            _this52._request.on("error", function (reason) {
              _this52._storedError = reason;
            });

            _this52._request.end();

            return _this52;
          }

          return PDFNodeStreamRangeReader;
        }(BaseRangeReader);

        var PDFNodeStreamFsFullReader = /*#__PURE__*/function (_BaseFullReader2) {
          _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);

          var _super39 = _createSuper(PDFNodeStreamFsFullReader);

          function PDFNodeStreamFsFullReader(stream) {
            var _this53;

            _classCallCheck(this, PDFNodeStreamFsFullReader);

            _this53 = _super39.call(this, stream);
            var path = decodeURIComponent(_this53._url.path);

            if (fileUriRegex.test(_this53._url.href)) {
              path = path.replace(/^\//, "");
            }

            fs.lstat(path, function (error, stat) {
              if (error) {
                if (error.code === "ENOENT") {
                  error = new _util.MissingPDFException("Missing PDF \"".concat(path, "\"."));
                }

                _this53._storedError = error;

                _this53._headersCapability.reject(error);

                return;
              }

              _this53._contentLength = stat.size;

              _this53._setReadableStream(fs.createReadStream(path));

              _this53._headersCapability.resolve();
            });
            return _this53;
          }

          return PDFNodeStreamFsFullReader;
        }(BaseFullReader);

        var PDFNodeStreamFsRangeReader = /*#__PURE__*/function (_BaseRangeReader2) {
          _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);

          var _super40 = _createSuper(PDFNodeStreamFsRangeReader);

          function PDFNodeStreamFsRangeReader(stream, start, end) {
            var _this54;

            _classCallCheck(this, PDFNodeStreamFsRangeReader);

            _this54 = _super40.call(this, stream);
            var path = decodeURIComponent(_this54._url.path);

            if (fileUriRegex.test(_this54._url.href)) {
              path = path.replace(/^\//, "");
            }

            _this54._setReadableStream(fs.createReadStream(path, {
              start: start,
              end: end - 1
            }));

            return _this54;
          }

          return PDFNodeStreamFsRangeReader;
        }(BaseRangeReader);
        /***/

      },
      /* 24 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createResponseStatusError = createResponseStatusError;
        exports.extractFilenameFromHeader = extractFilenameFromHeader;
        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
        exports.validateResponseStatus = validateResponseStatus;

        var _util = __w_pdfjs_require__(2);

        var _content_disposition = __w_pdfjs_require__(25);

        var _display_utils = __w_pdfjs_require__(1);

        function validateRangeRequestCapabilities(_ref56) {
          var getResponseHeader = _ref56.getResponseHeader,
              isHttp = _ref56.isHttp,
              rangeChunkSize = _ref56.rangeChunkSize,
              disableRange = _ref56.disableRange;
          (0, _util.assert)(rangeChunkSize > 0, "Range chunk size must be larger than zero");
          var returnValues = {
            allowRangeRequests: false,
            suggestedLength: undefined
          };
          var length = parseInt(getResponseHeader("Content-Length"), 10);

          if (!Number.isInteger(length)) {
            return returnValues;
          }

          returnValues.suggestedLength = length;

          if (length <= 2 * rangeChunkSize) {
            return returnValues;
          }

          if (disableRange || !isHttp) {
            return returnValues;
          }

          if (getResponseHeader("Accept-Ranges") !== "bytes") {
            return returnValues;
          }

          var contentEncoding = getResponseHeader("Content-Encoding") || "identity";

          if (contentEncoding !== "identity") {
            return returnValues;
          }

          returnValues.allowRangeRequests = true;
          return returnValues;
        }

        function extractFilenameFromHeader(getResponseHeader) {
          var contentDisposition = getResponseHeader("Content-Disposition");

          if (contentDisposition) {
            var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);

            if (filename.includes("%")) {
              try {
                filename = decodeURIComponent(filename);
              } catch (ex) {}
            }

            if ((0, _display_utils.isPdfFile)(filename)) {
              return filename;
            }
          }

          return null;
        }

        function createResponseStatusError(status, url) {
          if (status === 404 || status === 0 && url.startsWith("file:")) {
            return new _util.MissingPDFException('Missing PDF "' + url + '".');
          }

          return new _util.UnexpectedResponseException("Unexpected server response (".concat(status, ") while retrieving PDF \"").concat(url, "\"."), status);
        }

        function validateResponseStatus(status) {
          return status === 200 || status === 206;
        }
        /***/

      },
      /* 25 */

      /***/
      function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;

        function getFilenameFromContentDispositionHeader(contentDisposition) {
          var needsEncodingFixup = true;
          var tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];
            var filename = rfc2616unquote(tmp);
            filename = unescape(filename);
            filename = rfc5987decode(filename);
            filename = rfc2047decode(filename);
            return fixupEncoding(filename);
          }

          tmp = rfc2231getparam(contentDisposition);

          if (tmp) {
            var _filename = rfc2047decode(tmp);

            return fixupEncoding(_filename);
          }

          tmp = toParamRegExp("filename", "i").exec(contentDisposition);

          if (tmp) {
            tmp = tmp[1];

            var _filename2 = rfc2616unquote(tmp);

            _filename2 = rfc2047decode(_filename2);
            return fixupEncoding(_filename2);
          }

          function toParamRegExp(attributePattern, flags) {
            return new RegExp("(?:^|;)\\s*" + attributePattern + "\\s*=\\s*" + "(" + '[^";\\s][^;\\s]*' + "|" + '"(?:[^"\\\\]|\\\\"?)+"?' + ")", flags);
          }

          function textdecode(encoding, value) {
            if (encoding) {
              if (!/^[\x00-\xFF]+$/.test(value)) {
                return value;
              }

              try {
                var decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                var bytes = Array.from(value, function (ch) {
                  return ch.charCodeAt(0) & 0xff;
                });
                value = decoder.decode(new Uint8Array(bytes));
                needsEncodingFixup = false;
              } catch (e) {
                if (/^utf-?8$/i.test(encoding)) {
                  try {
                    value = decodeURIComponent(escape(value));
                    needsEncodingFixup = false;
                  } catch (err) {}
                }
              }
            }

            return value;
          }

          function fixupEncoding(value) {
            if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
              value = textdecode("utf-8", value);

              if (needsEncodingFixup) {
                value = textdecode("iso-8859-1", value);
              }
            }

            return value;
          }

          function rfc2231getparam(contentDispositionStr) {
            var matches = [];
            var match;
            var iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");

            while ((match = iter.exec(contentDispositionStr)) !== null) {
              var _match = match,
                  _match2 = _slicedToArray(_match, 4),
                  n = _match2[1],
                  quot = _match2[2],
                  part = _match2[3];

              n = parseInt(n, 10);

              if (n in matches) {
                if (n === 0) {
                  break;
                }

                continue;
              }

              matches[n] = [quot, part];
            }

            var parts = [];

            for (var _n2 = 0; _n2 < matches.length; ++_n2) {
              if (!(_n2 in matches)) {
                break;
              }

              var _matches$_n = _slicedToArray(matches[_n2], 2),
                  _quot = _matches$_n[0],
                  _part = _matches$_n[1];

              _part = rfc2616unquote(_part);

              if (_quot) {
                _part = unescape(_part);

                if (_n2 === 0) {
                  _part = rfc5987decode(_part);
                }
              }

              parts.push(_part);
            }

            return parts.join("");
          }

          function rfc2616unquote(value) {
            if (value.startsWith('"')) {
              var parts = value.slice(1).split('\\"');

              for (var i = 0; i < parts.length; ++i) {
                var quotindex = parts[i].indexOf('"');

                if (quotindex !== -1) {
                  parts[i] = parts[i].slice(0, quotindex);
                  parts.length = i + 1;
                }

                parts[i] = parts[i].replace(/\\(.)/g, "$1");
              }

              value = parts.join('"');
            }

            return value;
          }

          function rfc5987decode(extvalue) {
            var encodingend = extvalue.indexOf("'");

            if (encodingend === -1) {
              return extvalue;
            }

            var encoding = extvalue.slice(0, encodingend);
            var langvalue = extvalue.slice(encodingend + 1);
            var value = langvalue.replace(/^[^']*'/, "");
            return textdecode(encoding, value);
          }

          function rfc2047decode(value) {
            if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
              return value;
            }

            return value.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function (matches, charset, encoding, text) {
              if (encoding === "q" || encoding === "Q") {
                text = text.replace(/_/g, " ");
                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {
                  return String.fromCharCode(parseInt(hex, 16));
                });
                return textdecode(charset, text);
              }

              try {
                text = atob(text);
              } catch (e) {}

              return textdecode(charset, text);
            });
          }

          return "";
        }
        /***/

      },
      /* 26 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNetworkStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(24);

        ;
        var OK_RESPONSE = 200;
        var PARTIAL_CONTENT_RESPONSE = 206;

        function getArrayBuffer(xhr) {
          var data = xhr.response;

          if (typeof data !== "string") {
            return data;
          }

          var array = (0, _util.stringToBytes)(data);
          return array.buffer;
        }

        var NetworkManager = /*#__PURE__*/function () {
          function NetworkManager(url, args) {
            _classCallCheck(this, NetworkManager);

            this.url = url;
            args = args || {};
            this.isHttp = /^https?:/i.test(url);
            this.httpHeaders = this.isHttp && args.httpHeaders || {};
            this.withCredentials = args.withCredentials || false;

            this.getXhr = args.getXhr || function NetworkManager_getXhr() {
              return new XMLHttpRequest();
            };

            this.currXhrId = 0;
            this.pendingRequests = Object.create(null);
          }

          _createClass(NetworkManager, [{
            key: "requestRange",
            value: function requestRange(begin, end, listeners) {
              var args = {
                begin: begin,
                end: end
              };

              for (var prop in listeners) {
                args[prop] = listeners[prop];
              }

              return this.request(args);
            }
          }, {
            key: "requestFull",
            value: function requestFull(listeners) {
              return this.request(listeners);
            }
          }, {
            key: "request",
            value: function request(args) {
              var xhr = this.getXhr();
              var xhrId = this.currXhrId++;
              var pendingRequest = this.pendingRequests[xhrId] = {
                xhr: xhr
              };
              xhr.open("GET", this.url);
              xhr.withCredentials = this.withCredentials;

              for (var property in this.httpHeaders) {
                var value = this.httpHeaders[property];

                if (typeof value === "undefined") {
                  continue;
                }

                xhr.setRequestHeader(property, value);
              }

              if (this.isHttp && "begin" in args && "end" in args) {
                xhr.setRequestHeader("Range", "bytes=".concat(args.begin, "-").concat(args.end - 1));
                pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
              } else {
                pendingRequest.expectedStatus = OK_RESPONSE;
              }

              xhr.responseType = "arraybuffer";

              if (args.onError) {
                xhr.onerror = function (evt) {
                  args.onError(xhr.status);
                };
              }

              xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
              xhr.onprogress = this.onProgress.bind(this, xhrId);
              pendingRequest.onHeadersReceived = args.onHeadersReceived;
              pendingRequest.onDone = args.onDone;
              pendingRequest.onError = args.onError;
              pendingRequest.onProgress = args.onProgress;
              xhr.send(null);
              return xhrId;
            }
          }, {
            key: "onProgress",
            value: function onProgress(xhrId, evt) {
              var pendingRequest = this.pendingRequests[xhrId];

              if (!pendingRequest) {
                return;
              }

              if (pendingRequest.onProgress) {
                pendingRequest.onProgress(evt);
              }
            }
          }, {
            key: "onStateChange",
            value: function onStateChange(xhrId, evt) {
              var pendingRequest = this.pendingRequests[xhrId];

              if (!pendingRequest) {
                return;
              }

              var xhr = pendingRequest.xhr;

              if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                pendingRequest.onHeadersReceived();
                delete pendingRequest.onHeadersReceived;
              }

              if (xhr.readyState !== 4) {
                return;
              }

              if (!(xhrId in this.pendingRequests)) {
                return;
              }

              delete this.pendingRequests[xhrId];

              if (xhr.status === 0 && this.isHttp) {
                if (pendingRequest.onError) {
                  pendingRequest.onError(xhr.status);
                }

                return;
              }

              var xhrStatus = xhr.status || OK_RESPONSE;
              var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;

              if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                if (pendingRequest.onError) {
                  pendingRequest.onError(xhr.status);
                }

                return;
              }

              var chunk = getArrayBuffer(xhr);

              if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                var rangeHeader = xhr.getResponseHeader("Content-Range");
                var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                pendingRequest.onDone({
                  begin: parseInt(matches[1], 10),
                  chunk: chunk
                });
              } else if (chunk) {
                pendingRequest.onDone({
                  begin: 0,
                  chunk: chunk
                });
              } else if (pendingRequest.onError) {
                pendingRequest.onError(xhr.status);
              }
            }
          }, {
            key: "getRequestXhr",
            value: function getRequestXhr(xhrId) {
              return this.pendingRequests[xhrId].xhr;
            }
          }, {
            key: "isPendingRequest",
            value: function isPendingRequest(xhrId) {
              return xhrId in this.pendingRequests;
            }
          }, {
            key: "abortRequest",
            value: function abortRequest(xhrId) {
              var xhr = this.pendingRequests[xhrId].xhr;
              delete this.pendingRequests[xhrId];
              xhr.abort();
            }
          }]);

          return NetworkManager;
        }();

        var PDFNetworkStream = /*#__PURE__*/function () {
          function PDFNetworkStream(source) {
            _classCallCheck(this, PDFNetworkStream);

            this._source = source;
            this._manager = new NetworkManager(source.url, {
              httpHeaders: source.httpHeaders,
              withCredentials: source.withCredentials
            });
            this._rangeChunkSize = source.rangeChunkSize;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFNetworkStream, [{
            key: "_onRangeRequestReaderClosed",
            value: function _onRangeRequestReaderClosed(reader) {
              var i = this._rangeRequestReaders.indexOf(reader);

              if (i >= 0) {
                this._rangeRequestReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
              reader.onClosed = this._onRangeRequestReaderClosed.bind(this);

              this._rangeRequestReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var readers = this._rangeRequestReaders.slice(0);

              readers.forEach(function (reader) {
                reader.cancel(reason);
              });
            }
          }]);

          return PDFNetworkStream;
        }();

        exports.PDFNetworkStream = PDFNetworkStream;

        var PDFNetworkStreamFullRequestReader = /*#__PURE__*/function () {
          function PDFNetworkStreamFullRequestReader(manager, source) {
            _classCallCheck(this, PDFNetworkStreamFullRequestReader);

            this._manager = manager;
            var args = {
              onHeadersReceived: this._onHeadersReceived.bind(this),
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = source.url;
            this._fullRequestId = manager.requestFull(args);
            this._headersReceivedCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._contentLength = source.length;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            this._isStreamingSupported = false;
            this._isRangeSupported = false;
            this._cachedChunks = [];
            this._requests = [];
            this._done = false;
            this._storedError = undefined;
            this._filename = null;
            this.onProgress = null;
          }

          _createClass(PDFNetworkStreamFullRequestReader, [{
            key: "_onHeadersReceived",
            value: function _onHeadersReceived() {
              var fullRequestXhrId = this._fullRequestId;

              var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);

              var getResponseHeader = function getResponseHeader(name) {
                return fullRequestXhr.getResponseHeader(name);
              };

              var _ref57 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: this._manager.isHttp,
                rangeChunkSize: this._rangeChunkSize,
                disableRange: this._disableRange
              }),
                  allowRangeRequests = _ref57.allowRangeRequests,
                  suggestedLength = _ref57.suggestedLength;

              if (allowRangeRequests) {
                this._isRangeSupported = true;
              }

              this._contentLength = suggestedLength || this._contentLength;
              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

              if (this._isRangeSupported) {
                this._manager.abortRequest(fullRequestXhrId);
              }

              this._headersReceivedCapability.resolve();
            }
          }, {
            key: "_onDone",
            value: function _onDone(args) {
              if (args) {
                if (this._requests.length > 0) {
                  var requestCapability = this._requests.shift();

                  requestCapability.resolve({
                    value: args.chunk,
                    done: false
                  });
                } else {
                  this._cachedChunks.push(args.chunk);
                }
              }

              this._done = true;

              if (this._cachedChunks.length > 0) {
                return;
              }

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];
            }
          }, {
            key: "_onError",
            value: function _onError(status) {
              var url = this._url;
              var exception = (0, _network_utils.createResponseStatusError)(status, url);
              this._storedError = exception;

              this._headersReceivedCapability.reject(exception);

              this._requests.forEach(function (requestCapability) {
                requestCapability.reject(exception);
              });

              this._requests = [];
              this._cachedChunks = [];
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(data) {
              if (this.onProgress) {
                this.onProgress({
                  loaded: data.loaded,
                  total: data.lengthComputable ? data.total : this._contentLength
                });
              }
            }
          }, {
            key: "read",
            value: function () {
              var _read5 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee12() {
                var chunk, requestCapability;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        if (!this._storedError) {
                          _context12.next = 2;
                          break;
                        }

                        throw this._storedError;

                      case 2:
                        if (!(this._cachedChunks.length > 0)) {
                          _context12.next = 5;
                          break;
                        }

                        chunk = this._cachedChunks.shift();
                        return _context12.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 5:
                        if (!this._done) {
                          _context12.next = 7;
                          break;
                        }

                        return _context12.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 7:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context12.abrupt("return", requestCapability.promise);

                      case 10:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12, this);
              }));

              function read() {
                return _read5.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;

              this._headersReceivedCapability.reject(reason);

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];

              if (this._manager.isPendingRequest(this._fullRequestId)) {
                this._manager.abortRequest(this._fullRequestId);
              }

              this._fullRequestReader = null;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReceivedCapability.promise;
            }
          }]);

          return PDFNetworkStreamFullRequestReader;
        }();

        var PDFNetworkStreamRangeRequestReader = /*#__PURE__*/function () {
          function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
            _classCallCheck(this, PDFNetworkStreamRangeRequestReader);

            this._manager = manager;
            var args = {
              onDone: this._onDone.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._requestId = manager.requestRange(begin, end, args);
            this._requests = [];
            this._queuedChunk = null;
            this._done = false;
            this.onProgress = null;
            this.onClosed = null;
          }

          _createClass(PDFNetworkStreamRangeRequestReader, [{
            key: "_close",
            value: function _close() {
              if (this.onClosed) {
                this.onClosed(this);
              }
            }
          }, {
            key: "_onDone",
            value: function _onDone(data) {
              var chunk = data.chunk;

              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();

                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunk = chunk;
              }

              this._done = true;

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];

              this._close();
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (!this.isStreamingSupported && this.onProgress) {
                this.onProgress({
                  loaded: evt.loaded
                });
              }
            }
          }, {
            key: "read",
            value: function () {
              var _read6 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee13() {
                var chunk, requestCapability;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee13$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        if (!(this._queuedChunk !== null)) {
                          _context13.next = 4;
                          break;
                        }

                        chunk = this._queuedChunk;
                        this._queuedChunk = null;
                        return _context13.abrupt("return", {
                          value: chunk,
                          done: false
                        });

                      case 4:
                        if (!this._done) {
                          _context13.next = 6;
                          break;
                        }

                        return _context13.abrupt("return", {
                          value: undefined,
                          done: true
                        });

                      case 6:
                        requestCapability = (0, _util.createPromiseCapability)();

                        this._requests.push(requestCapability);

                        return _context13.abrupt("return", requestCapability.promise);

                      case 9:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, _callee13, this);
              }));

              function read() {
                return _read6.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;

              this._requests.forEach(function (requestCapability) {
                requestCapability.resolve({
                  value: undefined,
                  done: true
                });
              });

              this._requests = [];

              if (this._manager.isPendingRequest(this._requestId)) {
                this._manager.abortRequest(this._requestId);
              }

              this._close();
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }]);

          return PDFNetworkStreamRangeRequestReader;
        }();
        /***/

      },
      /* 27 */

      /***/
      function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFFetchStream = void 0;

        var _util = __w_pdfjs_require__(2);

        var _network_utils = __w_pdfjs_require__(24);

        ;

        function createFetchOptions(headers, withCredentials, abortController) {
          return {
            method: "GET",
            headers: headers,
            signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,
            mode: "cors",
            credentials: withCredentials ? "include" : "same-origin",
            redirect: "follow"
          };
        }

        function createHeaders(httpHeaders) {
          var headers = new Headers();

          for (var property in httpHeaders) {
            var value = httpHeaders[property];

            if (typeof value === "undefined") {
              continue;
            }

            headers.append(property, value);
          }

          return headers;
        }

        var PDFFetchStream = /*#__PURE__*/function () {
          function PDFFetchStream(source) {
            _classCallCheck(this, PDFFetchStream);

            this.source = source;
            this.isHttp = /^https?:/i.test(source.url);
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }

          _createClass(PDFFetchStream, [{
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFFetchStreamReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }

              var reader = new PDFFetchStreamRangeReader(this, begin, end);

              this._rangeRequestReaders.push(reader);

              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              if (this._fullRequestReader) {
                this._fullRequestReader.cancel(reason);
              }

              var readers = this._rangeRequestReaders.slice(0);

              readers.forEach(function (reader) {
                reader.cancel(reason);
              });
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea5, _this$_fullRequestRea6;

              return (_this$_fullRequestRea5 = (_this$_fullRequestRea6 = this._fullRequestReader) === null || _this$_fullRequestRea6 === void 0 ? void 0 : _this$_fullRequestRea6._loaded) !== null && _this$_fullRequestRea5 !== void 0 ? _this$_fullRequestRea5 : 0;
            }
          }]);

          return PDFFetchStream;
        }();

        exports.PDFFetchStream = PDFFetchStream;

        var PDFFetchStreamReader = /*#__PURE__*/function () {
          function PDFFetchStreamReader(stream) {
            var _this55 = this;

            _classCallCheck(this, PDFFetchStreamReader);

            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            this._filename = null;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._contentLength = source.length;
            this._headersCapability = (0, _util.createPromiseCapability)();
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;

            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._headers = createHeaders(this._stream.httpHeaders);
            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              _this55._reader = response.body.getReader();

              _this55._headersCapability.resolve();

              var getResponseHeader = function getResponseHeader(name) {
                return response.headers.get(name);
              };

              var _ref58 = (0, _network_utils.validateRangeRequestCapabilities)({
                getResponseHeader: getResponseHeader,
                isHttp: _this55._stream.isHttp,
                rangeChunkSize: _this55._rangeChunkSize,
                disableRange: _this55._disableRange
              }),
                  allowRangeRequests = _ref58.allowRangeRequests,
                  suggestedLength = _ref58.suggestedLength;

              _this55._isRangeSupported = allowRangeRequests;
              _this55._contentLength = suggestedLength || _this55._contentLength;
              _this55._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);

              if (!_this55._isStreamingSupported && _this55._isRangeSupported) {
                _this55.cancel(new _util.AbortException("Streaming is disabled."));
              }
            })["catch"](this._headersCapability.reject);
            this.onProgress = null;
          }

          _createClass(PDFFetchStreamReader, [{
            key: "read",
            value: function () {
              var _read7 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee14() {
                var _yield$this$_reader$r, value, done, buffer;

                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.next = 2;
                        return this._headersCapability.promise;

                      case 2:
                        _context14.next = 4;
                        return this._reader.read();

                      case 4:
                        _yield$this$_reader$r = _context14.sent;
                        value = _yield$this$_reader$r.value;
                        done = _yield$this$_reader$r.done;

                        if (!done) {
                          _context14.next = 9;
                          break;
                        }

                        return _context14.abrupt("return", {
                          value: value,
                          done: done
                        });

                      case 9:
                        this._loaded += value.byteLength;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded,
                            total: this._contentLength
                          });
                        }

                        buffer = new Uint8Array(value).buffer;
                        return _context14.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 13:
                      case "end":
                        return _context14.stop();
                    }
                  }
                }, _callee14, this);
              }));

              function read() {
                return _read7.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (this._reader) {
                this._reader.cancel(reason);
              }

              if (this._abortController) {
                this._abortController.abort();
              }
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return PDFFetchStreamReader;
        }();

        var PDFFetchStreamRangeReader = /*#__PURE__*/function () {
          function PDFFetchStreamRangeReader(stream, begin, end) {
            var _this56 = this;

            _classCallCheck(this, PDFFetchStreamRangeReader);

            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._readCapability = (0, _util.createPromiseCapability)();
            this._isStreamingSupported = !source.disableStream;

            if (typeof AbortController !== "undefined") {
              this._abortController = new AbortController();
            }

            this._headers = createHeaders(this._stream.httpHeaders);

            this._headers.append("Range", "bytes=".concat(begin, "-").concat(end - 1));

            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }

              _this56._readCapability.resolve();

              _this56._reader = response.body.getReader();
            })["catch"](function (reason) {
              if ((reason === null || reason === void 0 ? void 0 : reason.name) === "AbortError") {
                return;
              }

              throw reason;
            });
            this.onProgress = null;
          }

          _createClass(PDFFetchStreamRangeReader, [{
            key: "read",
            value: function () {
              var _read8 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee15() {
                var _yield$this$_reader$r2, value, done, buffer;

                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee15$(_context15) {
                  while (1) {
                    switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.next = 2;
                        return this._readCapability.promise;

                      case 2:
                        _context15.next = 4;
                        return this._reader.read();

                      case 4:
                        _yield$this$_reader$r2 = _context15.sent;
                        value = _yield$this$_reader$r2.value;
                        done = _yield$this$_reader$r2.done;

                        if (!done) {
                          _context15.next = 9;
                          break;
                        }

                        return _context15.abrupt("return", {
                          value: value,
                          done: done
                        });

                      case 9:
                        this._loaded += value.byteLength;

                        if (this.onProgress) {
                          this.onProgress({
                            loaded: this._loaded
                          });
                        }

                        buffer = new Uint8Array(value).buffer;
                        return _context15.abrupt("return", {
                          value: buffer,
                          done: false
                        });

                      case 13:
                      case "end":
                        return _context15.stop();
                    }
                  }
                }, _callee15, this);
              }));

              function read() {
                return _read8.apply(this, arguments);
              }

              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (this._reader) {
                this._reader.cancel(reason);
              }

              if (this._abortController) {
                this._abortController.abort();
              }
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }]);

          return PDFFetchStreamRangeReader;
        }();
        /***/

      }
      /******/
      ];
      /************************************************************************/

      /******/
      // The module cache

      /******/

      var __webpack_module_cache__ = {};
      /******/

      /******/
      // The require function

      /******/

      function __w_pdfjs_require__(moduleId) {
        /******/
        // Check if module is in cache

        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/

        if (cachedModule !== undefined) {
          /******/
          return cachedModule.exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = __webpack_module_cache__[moduleId] = {
          /******/
          // no module.id needed

          /******/
          // no module.loaded needed

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);
        /******/

        /******/
        // Return the exports of the module

        /******/


        return module.exports;
        /******/
      }
      /******/

      /************************************************************************/


      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.

      (function () {
        var exports = __webpack_exports__;
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "addLinkAttributes", {
          enumerable: true,
          get: function get() {
            return _display_utils.addLinkAttributes;
          }
        });
        Object.defineProperty(exports, "getFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getPdfFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getPdfFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "isPdfFile", {
          enumerable: true,
          get: function get() {
            return _display_utils.isPdfFile;
          }
        });
        Object.defineProperty(exports, "LinkTarget", {
          enumerable: true,
          get: function get() {
            return _display_utils.LinkTarget;
          }
        });
        Object.defineProperty(exports, "loadScript", {
          enumerable: true,
          get: function get() {
            return _display_utils.loadScript;
          }
        });
        Object.defineProperty(exports, "PDFDateString", {
          enumerable: true,
          get: function get() {
            return _display_utils.PDFDateString;
          }
        });
        Object.defineProperty(exports, "RenderingCancelledException", {
          enumerable: true,
          get: function get() {
            return _display_utils.RenderingCancelledException;
          }
        });
        Object.defineProperty(exports, "build", {
          enumerable: true,
          get: function get() {
            return _api.build;
          }
        });
        Object.defineProperty(exports, "getDocument", {
          enumerable: true,
          get: function get() {
            return _api.getDocument;
          }
        });
        Object.defineProperty(exports, "LoopbackPort", {
          enumerable: true,
          get: function get() {
            return _api.LoopbackPort;
          }
        });
        Object.defineProperty(exports, "PDFDataRangeTransport", {
          enumerable: true,
          get: function get() {
            return _api.PDFDataRangeTransport;
          }
        });
        Object.defineProperty(exports, "PDFWorker", {
          enumerable: true,
          get: function get() {
            return _api.PDFWorker;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function get() {
            return _api.version;
          }
        });
        Object.defineProperty(exports, "CMapCompressionType", {
          enumerable: true,
          get: function get() {
            return _util.CMapCompressionType;
          }
        });
        Object.defineProperty(exports, "createObjectURL", {
          enumerable: true,
          get: function get() {
            return _util.createObjectURL;
          }
        });
        Object.defineProperty(exports, "createPromiseCapability", {
          enumerable: true,
          get: function get() {
            return _util.createPromiseCapability;
          }
        });
        Object.defineProperty(exports, "createValidAbsoluteUrl", {
          enumerable: true,
          get: function get() {
            return _util.createValidAbsoluteUrl;
          }
        });
        Object.defineProperty(exports, "InvalidPDFException", {
          enumerable: true,
          get: function get() {
            return _util.InvalidPDFException;
          }
        });
        Object.defineProperty(exports, "MissingPDFException", {
          enumerable: true,
          get: function get() {
            return _util.MissingPDFException;
          }
        });
        Object.defineProperty(exports, "OPS", {
          enumerable: true,
          get: function get() {
            return _util.OPS;
          }
        });
        Object.defineProperty(exports, "PasswordResponses", {
          enumerable: true,
          get: function get() {
            return _util.PasswordResponses;
          }
        });
        Object.defineProperty(exports, "PermissionFlag", {
          enumerable: true,
          get: function get() {
            return _util.PermissionFlag;
          }
        });
        Object.defineProperty(exports, "removeNullCharacters", {
          enumerable: true,
          get: function get() {
            return _util.removeNullCharacters;
          }
        });
        Object.defineProperty(exports, "shadow", {
          enumerable: true,
          get: function get() {
            return _util.shadow;
          }
        });
        Object.defineProperty(exports, "UnexpectedResponseException", {
          enumerable: true,
          get: function get() {
            return _util.UnexpectedResponseException;
          }
        });
        Object.defineProperty(exports, "UNSUPPORTED_FEATURES", {
          enumerable: true,
          get: function get() {
            return _util.UNSUPPORTED_FEATURES;
          }
        });
        Object.defineProperty(exports, "Util", {
          enumerable: true,
          get: function get() {
            return _util.Util;
          }
        });
        Object.defineProperty(exports, "VerbosityLevel", {
          enumerable: true,
          get: function get() {
            return _util.VerbosityLevel;
          }
        });
        Object.defineProperty(exports, "AnnotationLayer", {
          enumerable: true,
          get: function get() {
            return _annotation_layer.AnnotationLayer;
          }
        });
        Object.defineProperty(exports, "apiCompatibilityParams", {
          enumerable: true,
          get: function get() {
            return _api_compatibility.apiCompatibilityParams;
          }
        });
        Object.defineProperty(exports, "GlobalWorkerOptions", {
          enumerable: true,
          get: function get() {
            return _worker_options.GlobalWorkerOptions;
          }
        });
        Object.defineProperty(exports, "renderTextLayer", {
          enumerable: true,
          get: function get() {
            return _text_layer.renderTextLayer;
          }
        });
        Object.defineProperty(exports, "SVGGraphics", {
          enumerable: true,
          get: function get() {
            return _svg.SVGGraphics;
          }
        });
        Object.defineProperty(exports, "XfaLayer", {
          enumerable: true,
          get: function get() {
            return _xfa_layer.XfaLayer;
          }
        });

        var _display_utils = __w_pdfjs_require__(1);

        var _api = __w_pdfjs_require__(5);

        var _util = __w_pdfjs_require__(2);

        var _annotation_layer = __w_pdfjs_require__(18);

        var _api_compatibility = __w_pdfjs_require__(9);

        var _worker_options = __w_pdfjs_require__(12);

        var _text_layer = __w_pdfjs_require__(20);

        var _svg = __w_pdfjs_require__(21);

        var _xfa_layer = __w_pdfjs_require__(22);

        var pdfjsVersion = '2.9.79';
        var pdfjsBuild = 'ae48d0758';
        {
          var _w_pdfjs_require__ = __w_pdfjs_require__(4),
              isNodeJS = _w_pdfjs_require__.isNodeJS;

          if (isNodeJS) {
            var PDFNodeStream = __w_pdfjs_require__(23).PDFNodeStream;

            (0, _api.setPDFNetworkStreamFactory)(function (params) {
              return new PDFNodeStream(params);
            });
          } else {
            var PDFNetworkStream = __w_pdfjs_require__(26).PDFNetworkStream;

            var PDFFetchStream;

            if ((0, _display_utils.isFetchSupported)()) {
              PDFFetchStream = __w_pdfjs_require__(27).PDFFetchStream;
            }

            (0, _api.setPDFNetworkStreamFactory)(function (params) {
              if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {
                return new PDFFetchStream(params);
              }

              return new PDFNetworkStream(params);
            });
          }
        }
      })();
      /******/


      return __webpack_exports__;
      /******/
    }()
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../../../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ 20:
/*!*******************************************************!*\
  !*** multi ./resources/Public/js/vendor/moz_pdfjs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Volumes/Sites/_LARAVEL_7/rapyd_bx/resources/Public/js/vendor/moz_pdfjs.js */"./resources/Public/js/vendor/moz_pdfjs.js");


/***/ }),

/***/ 21:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 22:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });